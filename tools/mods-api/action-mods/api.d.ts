/**
 * Copyright Â© 2024 Cloud Software Group, Inc.
 * This file is subject to the license terms contained
 * in the license file that is distributed with this file.
 * 
 * Spotfire Action Mods API declaration.
 * Version: 2.0
 */

declare namespace Spotfire.Dxp {
    /**
     * @ignore
     * @@Helper class with property accessors to express interface types when casting.
     */
    abstract class Data {
        /** @@Type reference for casting to {{@link Spotfire.Dxp.Data.IDataColumn}. */
        static get IDataColumn(): TypeRef<Data.IDataColumn>;
        /** @@Type reference for casting to {{@link Spotfire.Dxp.Data.IDataNodeProducer}. */
        static get IDataNodeProducer(): TypeRef<Data.IDataNodeProducer>;
    }
    
    namespace Application {
        /**
         * Represents the currently running Spotfire instance.
         * This object can therefore be used to control the running instance, for example
         * open files or replace data.
         * 
         * 
         * If an analysis file (DXP file) has been opened in the application, an
         * object representing that document is available through
         * {@link Spotfire.Dxp.Application.AnalysisApplication.Document}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class AnalysisApplication extends Object implements System.IServiceProvider {
            /**
             * Gets the analysis document metadata.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DocumentMetadata(): DocumentMetadata;
            /**
             * Get the import context.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ImportContext(): Data.Import.ImportContext;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Creates the data writer given the typeId.
             * @param typeId The type identifier for the registered data
             * writer.
             * @returns A data writer; returns null if no data writer was found.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CreateDataWriter(typeId: Framework.DocumentModel.TypeIdentifier): Data.Export.DataWriter;
            /**
             * Gets an instance of the requested service type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            GetService<T>(typeT: TypeRefParam<T>): (JsType<T> | null);
            /**
             * Open the specified analysis or information link
             * from the library.
             * 
             * @since 2.0
             * 
             * @group Extended capability 'LibraryRead'
             */
            Open(libraryItem: Framework.Library.LibraryItem, settings: DocumentOpenSettings): void;
            /**
             * Saves the current loaded document to its last save location.
             * This is not possible if the loaded document was not an analysis file
             * loaded from a file path or from the library.
             * 
             * @remark This API expects that the script is declared with 'wrapInTransaction' set to 'false' to work as documented.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Save(): void;
            /**
             * Saves the currently loaded document to the library
             * with the specified title in the specified folder.
             * @param folder The library folder in which to save the document.
             * @param title The title of the library item that the document will be saved to.
             * @param metadataSettings The metadata to associate with the library item.
             * @param settings Controls some aspects of how the document is saved.
             * For instance whether a configuration block is embedded.
             * 
             * @remark This API expects that the script is declared with 'wrapInTransaction' set to 'false' to work as documented.
             * 
             * @since 2.0
             * 
             * @group Extended capability 'LibraryWrite'
             */
            SaveAs(folder: Framework.Library.LibraryItem, title: (JsType<System.String> | System.String), metadataSettings: Framework.Library.LibraryItemMetadataSettings, settings: DocumentSaveSettings): Framework.Library.LibraryItem;
            /**
             * Saves a copy of the currently loaded document to the library
             * with the specified title in the specified folder.
             * @param folder The library folder in which to save the document.
             * @param title The title of the library item that the document will be saved to.
             * @param metadataSpecification The metadata to associate with the library item.
             * @param settings Controls some aspects of how the document is saved.
             * For instance whether a configuration block is embedded.
             * 
             * @remark This API expects that the script is declared with 'wrapInTransaction' set to 'false' to work as documented.
             * 
             * @since 2.0
             * 
             * @group Extended capability 'LibraryWrite'
             */
            SaveCopy(folder: Framework.Library.LibraryItem, title: (JsType<System.String> | System.String), metadataSpecification: Framework.Library.LibraryItemMetadataSettings, settings: DocumentSaveSettings): Framework.Library.LibraryItem;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
            };
            private __type_924781030: null;
        }
        
        /**
         * Represents a captured bookmark state.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class Bookmark extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets the name of the user that created this bookmark.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CreatedBy(): JsType<System.String>;
            /**
             * Gets the date this bookmark was created.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CreatedDate(): JsType<System.DateTime>;
            /**
             * Gets or sets the description of this bookmark.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Description(): JsType<System.String>;
            set Description(value: JsType<System.String>);
            /**
             * Gets or sets the text that visually represents this bookmark.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DisplayName(): JsType<System.String>;
            set DisplayName(value: JsType<System.String>);
            /**
             * Gets the id.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Id(): JsType<System.Guid>;
            /**
             * Gets or sets the date time this bookmark last was updated.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ModifiedDate(): JsType<System.DateTime>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_2244296538: null;
        }
        
        /**
         * A collection container for bookmarks.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class BookmarkCollection extends Framework.DocumentModel.DocumentNodeListBase<Bookmark> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Bookmark>>, Explicit<System.Collections.IEnumerable> {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<Bookmark>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Bookmark>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Gets the element at the specified index.
             * @param index The zero-based index of the element to get.
             * @returns The element at the specified index.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), Bookmark>;
            private __type_2541156842: null;
        }
        
        /**
         * Specifies the components to use when capturing
         * a bookmark.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class BookmarkComponentFlags extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** The active page is captured. */
            static readonly ActivePage: BookmarkComponentFlags;
            /** The active visualization is captured. */
            static readonly ActiveVisual: BookmarkComponentFlags;
            /** All available components are captured. */
            static readonly All: BookmarkComponentFlags;
            /** The filter organization is captured. */
            static readonly FilterOrganization: BookmarkComponentFlags;
            /** The filter settings are captured. */
            static readonly FilterSettings: BookmarkComponentFlags;
            /** The marked rows are captured. */
            static readonly MarkedRecords: BookmarkComponentFlags;
            /** Indicates that no components are captured. */
            static readonly None: BookmarkComponentFlags;
            /** The configuration of the page, including layout and configuration of visuals, is captured. */
            static readonly PageConfiguration: BookmarkComponentFlags;
            /** The document, data and column properties are captured. */
            static readonly Properties: BookmarkComponentFlags;
            private __type_3065104064: null;
        }
        
        /**
         * Represents a collection of custom nodes.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class CustomNodes extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Adds the specified node.
             * @param node The node to add.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Add(node: Extension.CustomNode): void;
            /**
             * Adds a new node of the specified type if required.
             * If a node of the specified type is already present in the collection,
             * it is returned and nothing is added.
             * @returns A node of the speicifed type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            AddNewIfNeeded<T extends Extension.CustomNode>(typeT: TypeRefParam<T>): JsType<T>;
            /**
             * Determines whether the specified {@link Spotfire.Dxp.Application.Extension.CustomNode} exists in this the collection.
             * @param node {@link Spotfire.Dxp.Application.Extension.CustomNode}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(node: Extension.CustomNode): JsType<System.Boolean>;
            /**
             * Determines whether a {@link Spotfire.Dxp.Application.Extension.CustomNode} of the specified type exists in this collection.
             * @param nodeType The node type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(nodeType: (JsType<System.Type> | System.Type)): JsType<System.Boolean>;
            /**
             * Determines whether a {@link Spotfire.Dxp.Application.Extension.CustomNode} of the specified type exists in this collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            Contains<T extends Extension.CustomNode>(typeT: TypeRefParam<T>): JsType<System.Boolean>;
            /**
             * Removes the specified node.
             * @param node The node to remove.
             * @returns true if node was successfully removed; otherwise, false.
             * This method also returns false if node is not found.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(node: Extension.CustomNode): JsType<System.Boolean>;
            /**
             * Tries to get the {@link Spotfire.Dxp.Application.Extension.CustomNode} of the specified type.
             * @param nodeType The node type.
             * @param node The reference to be set.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetNode(nodeType: (JsType<System.Type> | System.Type), node: OutParam<Extension.CustomNode>): JsType<System.Boolean>;
            /**
             * Tries to get the {@link Spotfire.Dxp.Application.Extension.CustomNode} of the specified type.
             * @param node The reference to be set.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            TryGetNode<T extends Extension.CustomNode>(typeT: TypeRefParam<T>, node: OutParam<T>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_2052709982: null;
        }
        
        /**
         * Represents the panel where the details-on-demand table is displayed.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DetailsOnDemandPanel extends Panel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_4038701712: null;
        }
        
        /**
         * A document opened in a running instance of Spotfire is referred to
         * as an Analysis Document. The document not only contains a series of
         * metadata information (see {@link Spotfire.Dxp.Application.DocumentMetadata}), but it
         * also contains references to the data itself
         * (see {@link Spotfire.Dxp.Data.DataManager}), and to various other
         * components being part of the document, such as
         * {@link Spotfire.Dxp.Application.PageCollection | pages},
         * {@link Spotfire.Dxp.Application.Filters.FilteringSchemeCollection | filterings},
         * {@link Spotfire.Dxp.Application.BookmarkCollection | bookmarks}, etc.
         * 
         * 
         * As soon as data has been opened in Spotfire, an instance of this class can
         * be accessed through the {@link Spotfire.Dxp.Application.AnalysisApplication.Document}
         * property of the {@link Spotfire.Dxp.Application.AnalysisApplication}. This is regardless of
         * whether the data was opened through the user interface or
         * programmatically. Hence, new instances of this class cannot be created
         * through calls to the constructor.
         * 
         * When a document is opened in Spotfire using the user interface, the
         * document will be automatically configured to be ready for use. This
         * includes creation of a new page and adding a default visualization to
         * that page. When opening a document through the API, however, it is
         * empty. To achieve the same result as opening the document through the
         * user interface, a call to the {@link Spotfire.Dxp.Application.Document.AutoConfigure} method
         * must be made.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class Document extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets the active {@link Spotfire.Dxp.Data.DataTable}. That is, the active
             * {@link Spotfire.Dxp.Data.DataTable} of the active
             * {@link Spotfire.Dxp.Application.Visual}, if there is any. May return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActiveDataTableReference(): (Data.DataTable | null);
            /**
             * Gets the active filter. That is, the active
             * filtering of the active page if there is any. May return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActiveFilteringSelectionReference(): (Data.DataFilteringSelection | null);
            /**
             * Gets the active marking. That is, the active
             * marking of the active
             * {@link Spotfire.Dxp.Application.Visual}, if there is any. May return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActiveMarkingSelectionReference(): (Data.DataMarkingSelection | null);
            /**
             * Gets or sets the currently active {@link Spotfire.Dxp.Application.Page}.
             * 
             * 
             * Note: This property can return null, but cannot be set to null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActivePageReference(): (Page | null);
            set ActivePageReference(value: (Page | null));
            /**
             * Gets the active {@link Spotfire.Dxp.Application.Visual}. That is, the active
             * {@link Spotfire.Dxp.Application.Visual} of the active
             * {@link Spotfire.Dxp.Application.Page}, if there is any. May return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActiveVisualReference(): (Visual | null);
            /**
             * Gets the collection of {@link Spotfire.Dxp.Application.Bookmark}s. The collection
             * can be used to create new bookmarks or to find and apply existing ones.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Bookmarks(): BookmarkCollection;
            /**
             * Gets the collection of executions of calculations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Calculations(): Calculations.CalculationCollection;
            /**
             * Gets the coloring templates.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ColoringTemplates(): Visuals.ConditionalColoring.ColoringTemplateCollection;
            /**
             * Gets settings for compatibility with older versions.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Compatibility(): DocumentCompatibility;
            /**
             * Gets the collection of custom nodes associated with this document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CustomNodes(): CustomNodes;
            /**
             * Gets the Data Manager, which can be used to access
             * the data contained in this document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Data(): Data.DataManager;
            /**
             * Gets the collection of filter schemes in the document. The FilteringSchemeCollection can be
             * used to access and/or manipulate filters and filtering schemes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get FilteringSchemes(): Filters.FilteringSchemeCollection;
            /**
             * Gets the pages of this document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Pages(): PageCollection;
            /**
             * Gets the document properties.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Properties(): DocumentProperties;
            /**
             * Gets or sets a value controlling if tooltips are rendered using dark text on a light background (as in pre 4.0 versions), or light text on dark background.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get UseLightTooltips(): JsType<System.Boolean>;
            set UseLightTooltips(value: JsType<System.Boolean>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Applies the current user's preferences to a newly created
             * document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ApplyUserPreferences(): void;
            /**
             * Configures a newly created document with reasonable default
             * values such as an initial page with a visualization on it and a filter
             * panel containing default filters for all columns and hierarchies.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AutoConfigure(): void;
            /**
             * Gets the prepared {@link Spotfire.Dxp.Application.Export.Report}s saved in the document.
             * @returns The reports.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetReports(): System.Collections.Generic.IEnumerable<Export.Report>;
            /**
             * Gets the style properties for an element in the user interface.
             * @param element The element.
             * @returns An object with properties describing the style of the element.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetStyle(element: StyleElement): Framework.Styles.StyleProperties;
            /**
             * Tries to get the {@link Spotfire.Dxp.Application.Export.Report} specified by name.
             * @param reportName The name of the report.
             * @param report The report, or null if not found.
             * @returns True if the report specified by name was found; otherwise False.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetReport(reportName: (JsType<System.String> | System.String), report: OutParam<Export.Report>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_2315355651: null;
        }
        
        /**
         * Represents settings for compatibility with older versions.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DocumentCompatibility extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets or sets a value indicating whether visualizations should use the behavior
             * of versions 10.7 and prior when limited by their own marking.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get UseLegacyLimitByMarkingBehavior(): JsType<System.Boolean>;
            set UseLegacyLimitByMarkingBehavior(value: JsType<System.Boolean>);
            /**
             * Gets or sets a value indicating whether data should be loaded in serial when opening the document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get UseLegacySerialDataLoading(): JsType<System.Boolean>;
            set UseLegacySerialDataLoading(value: JsType<System.Boolean>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_1588799665: null;
        }
        
        /**
         * Provides access to metadata for the currently opened {@link Spotfire.Dxp.Application.Document}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DocumentMetadata extends Object {
            /**
             * Gets the current file name used by save operations initiated by the user.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get FileNameUsedBySave(): JsType<System.String>;
            /**
             * Returns true if the document has been changed since it was last saved.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsDirty(): JsType<System.Boolean>;
            /**
             * Gets the library item that the analysis was last saved to in the library;  otherwise null.
             * 
             * @since 2.0
             * 
             * @group Extended capability 'LibraryRead'
             */
            get LibraryItemUsedBySave(): Framework.Library.LibraryItem;
            /**
             * Gets the file name that the analysis was opened from; otherwise null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get LoadedFromFileName(): JsType<System.String>;
            /**
             * Gets the library item that the analysis was opened from; otherwise null.
             * 
             * @since 2.0
             * 
             * @group Extended capability 'LibraryRead'
             */
            get LoadedFromLibraryItem(): Framework.Library.LibraryItem;
            /**
             * Gets the library path that the analysis was opened from; otherwise null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get LoadedFromLibraryPath(): JsType<System.String>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3874578690: null;
        }
        
        /**
         * Provides settings and information used while a
         * document is opened.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DocumentOpenSettings extends Object {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1521006278: null;
        }
        
        /**
         * Provides access to the document properties in the document.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DocumentProperties extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Data.DataProperty>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets or sets a value indicating whether the AllowWebPlayerResume property is set
             * for the current document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get AllowWebPlayerResume(): JsType<System.Boolean>;
            set AllowWebPlayerResume(value: JsType<System.Boolean>);
            /**
             * Gets or sets the Description property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Description(): JsType<System.String>;
            set Description(value: JsType<System.String>);
            /**
             * Gets or sets the Keywords property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Keywords(): System.Collections.Generic.IList<JsType<System.String>>;
            set Keywords(value: OrExplicit<System.Collections.Generic.IList<JsType<System.String>>>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<Data.DataProperty>;
            /**
             * Gets the value of a named property. Binary data properties are returned as UInt8Array.
             * @param propertyName The property name.
             * @returns The value of the property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Get(propertyName: (JsType<System.String> | System.String)): unknown;
            /**
             * Returns an enumerator that iterates through the collection.
             * @returns An enumerator that can be used to iterate through the collection.
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<Data.DataProperty>;
            /**
             * Sets the value of a named property. Setting a binary data property expects the value name="value"/&gt; to be an UInt8Array.
             * @param propertyName The property name.
             * @param value The value to set.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Set(propertyName: (JsType<System.String> | System.String), value: any): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Data.DataProperty>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            private __type_1235357382: null;
        }
        
        /**
         * The {@link Spotfire.Dxp.Application.DocumentSaveSettings} class provides settings and information used when a
         * document is saved.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DocumentSaveSettings extends Object {
            /**
             * Construct a  {@link Spotfire.Dxp.Application.DocumentSaveSettings} object with the default settings.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1325740903: null;
        }
        
        /**
         * Represents a collection of images stored in the document.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class ImageCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Adds an image to the text area. It can be referenced from the HTML content using the key used as filename.
             * @param key The key of the image.
             * @param imageData The image to add. This should be in a format supported by web browsers, for instance PNG or JPG.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Add(key: (JsType<System.String> | System.String), imageData: (JsType<System.IO.Stream> | System.IO.Stream)): void;
            /**
             * Gets a value indicating whether the collection contains an image specified by key.
             * @param key The key of the image.
             * @returns True if the collection contains the image; otherwise False.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(key: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Removes the image with the specified key.
             * @param key The key of the image to remove.
             * @returns True if the image was removed; otherwise False.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(key: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Tries to get the image with the specified key.
             * @param key The key of the image to get.
             * @param outputStream The stream to write image data to.
             * @returns True if the image could be found; otherwise False.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetImage(key: (JsType<System.String> | System.String), outputStream: (JsType<System.IO.Stream> | System.IO.Stream)): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_99020965: null;
        }
        
        /**
         * A page contains {@link Spotfire.Dxp.Application.Visual | visuals} and {@link Spotfire.Dxp.Application.Panel | panels}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class Page extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets the active {@link Spotfire.Dxp.Data.DataTable}. That is, the active
             * {@link Spotfire.Dxp.Data.DataTable} of the active
             * {@link Spotfire.Dxp.Application.Visual}, if there is any. May return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActiveDataTableReference(): Data.DataTable;
            /**
             * Gets the active filter. That is, the active
             * filtering of the active page if there is any. May return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActiveFilteringSelectionReference(): Data.DataFilteringSelection;
            /**
             * Gets the active marking. That is, the active
             * marking of the active
             * {@link Spotfire.Dxp.Application.Visual}, if there is any. May return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActiveMarkingSelectionReference(): Data.DataMarkingSelection;
            /**
             * Gets or sets the active {@link Spotfire.Dxp.Application.Visual}. That is, the active
             * {@link Spotfire.Dxp.Application.Visual} of the active
             * {@link Spotfire.Dxp.Application.Page}, if there is any. May return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ActiveVisualReference(): Visual;
            set ActiveVisualReference(value: Visual);
            /**
             * Gets the collection of custom nodes associated with this page.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CustomNodes(): CustomNodes;
            /**
             * Gets the details on demand panel for this {@link Spotfire.Dxp.Application.Page}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DetailsOnDemandPanel(): DetailsOnDemandPanel;
            /**
             * Gets the filter panel for this {@link Spotfire.Dxp.Application.Page}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get FilterPanel(): Filters.FilterPanel;
            /**
             * Gets or sets a value indicating whether a minimum height has been set for the page.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HasMinimumHeight(): JsType<System.Boolean>;
            set HasMinimumHeight(value: JsType<System.Boolean>);
            /**
             * Gets or sets a value indicating whether a minimum width has been set for the page.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HasMinimumWidth(): JsType<System.Boolean>;
            set HasMinimumWidth(value: JsType<System.Boolean>);
            /**
             * Gets the unique id for this instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Id(): JsType<System.Guid>;
            /**
             * Gets or sets the minimum height of the page.
             * This is used if {@link Spotfire.Dxp.Application.Page.HasMinimumHeight} is set to true.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get MinimumHeight(): JsType<System.Int32>;
            set MinimumHeight(value: JsType<System.Int32>);
            /**
             * Gets or sets the minimum width of the page.
             * This is used if {@link Spotfire.Dxp.Application.Page.HasMinimumWidth} is set to true.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get MinimumWidth(): JsType<System.Int32>;
            set MinimumWidth(value: JsType<System.Int32>);
            /**
             * Gets the {@link Spotfire.Dxp.Application.Panel} collection for the {@link Spotfire.Dxp.Application.Page}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Panels(): PanelCollection;
            /**
             * Gets or sets a value indicating whether to show the active visual maximized.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ShowActiveVisualMaximized(): JsType<System.Boolean>;
            set ShowActiveVisualMaximized(value: JsType<System.Boolean>);
            /**
             * Gets or sets the page title. If set to a title that is not
             * unique, the provided title will be modified in such a way that it
             * becomes unique.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Title(): JsType<System.String>;
            set Title(value: JsType<System.String>);
            /**
             * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Page} is visible.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Visible(): JsType<System.Boolean>;
            set Visible(value: JsType<System.Boolean>);
            /**
             * Gets the collection of {@link Spotfire.Dxp.Application.Visual} objects on this {@link Spotfire.Dxp.Application.Page}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Visuals(): VisualCollection;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Applies the supplied {@link Spotfire.Dxp.Application.Layout.LayoutDefinition} to the
             * {@link Spotfire.Dxp.Application.Visual}s in this {@link Spotfire.Dxp.Application.Page}.
             * @param layoutDefinition The layout to arrange by.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ApplyLayout(layoutDefinition: Layout.LayoutDefinition): void;
            /**
             * Applies the supplied {@link Spotfire.Dxp.Application.Layout.TileMode} to the {@link Spotfire.Dxp.Application.Page}.
             * @param tileMode The {@link Spotfire.Dxp.Application.Layout.TileMode} to apply.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ApplyLayout(tileMode: Layout.TileMode): void;
            /**
             * Configures this page in a default way.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AutoConfigure(): void;
            /**
             * Configures this page using settings from the specified source page.
             * @param source Source page. Can be null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AutoConfigure(source: Page): void;
            /**
             * Gets the bounds of a visual in the user interface.
             * @param visual The {@link Spotfire.Dxp.Application.Visual} to get the bounds for.
             * @returns Current bounds.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetVisualBounds(visual: Visual): JsType<System.Drawing.Rectangle>;
            /**
             * Gets the bounds of a visual given a rectangle defining a visualization area.
             * @param visualizationAreaBounds A rectangle defining a visualization area.
             * @param visual A visual.
             * @returns The bounds the visual would have, given the bounds of a visualization area.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetVisualBounds(visual: Visual, visualizationAreaBounds: (JsType<System.Drawing.Rectangle> | System.Drawing.Rectangle)): JsType<System.Drawing.Rectangle>;
            /**
             * Gets the size of the visualization area in the user interface.
             * @returns The size of the visualization area in pixels.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetVisualizationAreaSize(): JsType<System.Drawing.Size>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_1994651755: null;
        }
        
        /**
         * A collection of {@link Spotfire.Dxp.Application.Page | visual pages} in an
         * analysis document. Note that new instances of this class
         * cannot be created. The one and only instance is accessed through the
         * {@link Spotfire.Dxp.Application.Document.Pages} property of the
         * {@link Spotfire.Dxp.Application.Document} class.
         * 
         * 
         * The instance of this class can be used directly either to enumerate or
         * to modify the visual pages in the document, that is,
         * {@link Spotfire.Dxp.Application.PageCollection.AddNew | add} new pages,
         * {@link Spotfire.Dxp.Application.PageCollection.Remove|remove} pages,
         * {@link Spotfire.Dxp.Application.PageCollection.Move|move} pages, etc.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class PageCollection extends Framework.DocumentModel.DocumentNodeListBase<Page> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Page>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets or sets the page navigation mode (tabs or links) used to switch
             * between the pages of the document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NavigationMode(): PageNavigationMode;
            set NavigationMode(value: PageNavigationMode);
            /**
             * Gets the settings that control the size of the visualization area.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get VisualizationAreaSize(): Layout.VisualizationAreaSize;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<Page>;
            /**
             * Creates a duplicate of the specified page and adds it to this
             * collection.
             * The duplicate page will become the active page.
             * @param page The {@link Spotfire.Dxp.Application.Page} to duplicate. It must be attached to the document.
             * @returns The duplicate {@link Spotfire.Dxp.Application.Page}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddDuplicate(page: Page): Page;
            /**
             * Creates and adds a {@link Spotfire.Dxp.Application.Page} with a
             * localized default title to the document.
             * The page will become the active page.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddNew(): Page;
            /**
             * Creates and adds a {@link Spotfire.Dxp.Application.Page} to the document.
             * The page will become the active page.
             * @param suggestedTitle A suggested title. A suffix will be added to the suggested title if
             * it is not unique, that is, another visual page with the name exists.
             * Note that only the first 1000 characters of the suggested title are
             * considered when naming the new page.
             * @returns The object model representation of the page that was added.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddNew(suggestedTitle: (JsType<System.String> | System.String)): Page;
            /**
             * Removes all pages from this collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Clear(): void;
            /**
             * Moves the item at the specified index to a new location in the collection.
             * @param fromIndex The zero-based index specifying the location of the item to be moved.
             * @param toIndex The zero-based index specifying the new location of the item.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
            /**
             * Moves a visual from its current {@link Spotfire.Dxp.Application.Page} to a new
             * page.
             * @param visualPanel The visual to move.
             * @param page The page to move the visual to.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            MoveVisualTo(visualPanel: Visual, page: Page): void;
            /**
             * Removes the specified {@link Spotfire.Dxp.Application.Page}
             * from this page collection.
             * @param item The page to remove.
             * @returns true if the page was successfully removed from
             * this page collection, otherwise false. This method
             * also returns false if the page is not found.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(item: Page): JsType<System.Boolean>;
            /**
             * Removes the page at the specified index
             * from this page collection.
             * @param index The index of the page to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
            /**
             * Tries to get a page specified by its id.
             * @param id The id.
             * @param page The page.
             * @returns true if the page was found, otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetPage(id: (JsType<System.Guid> | System.Guid), page: OutParam<Page>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Page>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Gets the element at the specified index.
             * @param index The zero-based index of the element to get.
             * @returns The element at the specified index.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), Page>;
            private __type_2859783073: null;
        }
        
        /**
         * Used to specify the current navigation mode.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class PageNavigationMode extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Links should be used to navigate between pages.
             * Links to navigate to the next and previous pages are shown, together with direct
             * navigation links to a few adjacent pages.
             */
            static readonly Links: PageNavigationMode;
            /**
             * Users should not be able to navigate between pages directly. Navigation links are
             * shown that allows the user to move back and forth in the history of visited pages.
             */
            static readonly None: PageNavigationMode;
            /** The navigation area is off. No navigation links of any kind are shown. */
            static readonly Off: PageNavigationMode;
            /** Tabs should be used to navigate between pages. */
            static readonly Tabs: PageNavigationMode;
            private __type_1911268272: null;
        }
        
        /**
         * Base class for panels placed at the sides or at the bottom of the application.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class Panel extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets or sets the docking placement of the panel.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DockingPlacement(): Layout.DockingPlacement;
            set DockingPlacement(value: Layout.DockingPlacement);
            /**
             * Gets or sets the {@link Spotfire.Dxp.Application.Panel.PanelState} of the panel.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get PanelState(): Layout.PanelState;
            set PanelState(value: Layout.PanelState);
            /**
             * Gets the title of the panel.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Title(): JsType<System.String>;
            /**
             * Gets the type identifier for the panel.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TypeId(): Framework.DocumentModel.TypeIdentifier;
            /**
             * Gets or sets whether the panel is visible.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Visible(): JsType<System.Boolean>;
            set Visible(value: JsType<System.Boolean>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_4053479140: null;
        }
        
        /**
         * A collection of {@link Spotfire.Dxp.Application.Panel}s.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class PanelCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Panel>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of {@link Spotfire.Dxp.Application.Panel}s in this collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<Panel>;
            /**
             * Adds a new {@link Spotfire.Dxp.Application.Panel} with the specified type identifier.
             * @param typeId The panel type identifier.
             * @returns The newly created {@link Spotfire.Dxp.Application.Panel}, or null if the type identifier is unsupported.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddNew(typeId: Framework.DocumentModel.TypeIdentifier): Panel;
            /**
             * Adds a new {@link Spotfire.Dxp.Application.Panel} of the specified type.
             * @returns Null if the {@link Spotfire.Dxp.Application.Panel} type is unlicensed, otherwise true.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            AddNew<T extends Panel>(typeT: TypeRefParam<T>): JsType<T>;
            /**
             * Configures this {@link Spotfire.Dxp.Application.PanelCollection}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AutoConfigure(): void;
            /**
             * Configures this {@link Spotfire.Dxp.Application.PanelCollection},
             * reflecting the specified source.
             * @param source The source.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AutoConfigure(source: PanelCollection): void;
            /**
             * Determines whether the specified {@link Spotfire.Dxp.Application.Panel} exists in this collection.
             * @param panel The panel.
             * @returns true if the panel is in the collection; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(panel: Panel): JsType<System.Boolean>;
            /**
             * Determines whether a {@link Spotfire.Dxp.Application.Panel} of the specified type exists in this collection.
             * @param panelType The panel type.
             * @returns true if a {@link Spotfire.Dxp.Application.Panel} of the specified type
             * is in the collection; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(panelType: (JsType<System.Type> | System.Type)): JsType<System.Boolean>;
            /**
             * Determines whether a {@link Spotfire.Dxp.Application.Panel} with the specified type identifier exists in this collection.
             * @param typeId The panel type identifier.
             * @returns true if a {@link Spotfire.Dxp.Application.Panel} of the specified {@link Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier}
             * is in the collection; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(typeId: Framework.DocumentModel.TypeIdentifier): JsType<System.Boolean>;
            /**
             * Determines whether a {@link Spotfire.Dxp.Application.Panel} of the specified type exists in this collection.
             * @returns true if a {@link Spotfire.Dxp.Application.Panel} of the specified type
             * is in the collection; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            Contains<T extends Panel>(typeT: TypeRefParam<T>): JsType<System.Boolean>;
            /**
             * Returns an enumerator that iterates through the collection.
             * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<Panel>;
            /**
             * Tries to get the panel with the specified type identifier.
             * @param typeId The panel type identifier.
             * @param panel The reference to be set.
             * @returns true if the panel was found, otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetPanel(typeId: Framework.DocumentModel.TypeIdentifier, panel: OutParam<Panel>): JsType<System.Boolean>;
            /**
             * Tries to get the panel of the specified type.
             * @param panel The reference to be set.
             * @returns true if the panel was found, otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            TryGetPanel<T extends Panel>(typeT: TypeRefParam<T>, panel: OutParam<T>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Panel>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            private __type_2717921892: null;
        }
        
        /**
         * Defines the type identifiers for
         * built-in panels.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class PanelTypeIdentifiers extends Object {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * BookmarkPanel2 identifier.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly BookmarkPanel2: Framework.DocumentModel.TypeIdentifier;
            /**
             * CollaborationPanel identifier (called Web Page, or Web Page Panel in the UI).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly CollaborationPanel: Framework.DocumentModel.TypeIdentifier;
            /**
             * DataPanel identifier.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly DataPanel: Framework.DocumentModel.TypeIdentifier;
            /**
             * DetailsOnDemandPanel identifier.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly DetailsOnDemandPanel: Framework.DocumentModel.TypeIdentifier;
            /**
             * FilterPanel identifier.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly FilterPanel: Framework.DocumentModel.TypeIdentifier;
            /**
             * ListsPanel identifier.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly ListsPanel: Framework.DocumentModel.TypeIdentifier;
            /**
             * TagPanel identifier.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly TagPanel: Framework.DocumentModel.TypeIdentifier;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_4057327756: null;
        }
        
        /**
         * Represents a stylable element in the user interface.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class StyleElement extends Object {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * A panel.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Panel: StyleElement;
            /**
             * Content inside a panel.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly PanelContent: StyleElement;
            /**
             * Panel header.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly PanelHeader: StyleElement;
            /**
             * A visual.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Visual: StyleElement;
            /**
             * Content inside visual.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly VisualContent: StyleElement;
            /**
             * The title of a visual.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly VisualTitle: StyleElement;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2142309689: null;
        }
        
        /**
         * This class represents either a visualization or a text area.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class Visual extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets the collection of custom nodes associated with this visual.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CustomNodes(): CustomNodes;
            /**
             * Gets the unique id for this instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Id(): JsType<System.Guid>;
            /**
             * Gets or sets a flag indicating whether to show the title or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ShowTitle(): JsType<System.Boolean>;
            set ShowTitle(value: JsType<System.Boolean>);
            /**
             * Gets or sets the title.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Title(): JsType<System.String>;
            set Title(value: JsType<System.String>);
            /**
             * Gets or sets the type identifier for the visual.
             * By setting this property, the visual is converted to the specified type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TypeId(): Framework.DocumentModel.TypeIdentifier;
            set TypeId(value: Framework.DocumentModel.TypeIdentifier);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Applies user preferences to a newly created visual.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ApplyUserPreferences(): void;
            /**
             * Gets the visual as the specified type.
             * @returns The visual; otherwise null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            As<T>(typeT: TypeRefParam<T>): (JsType<T> | null);
            /**
             * Configures a newly created visual with reasonable default
             * values given the current data set.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AutoConfigure(): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_3041235230: null;
        }
        
        /**
         * A collection of {@link Spotfire.Dxp.Application.Visual} objects.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class VisualCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Visual>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of {@link Spotfire.Dxp.Application.Visual}s in this collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<Visual>;
            /**
             * Creates a duplicate of the specified {@link Spotfire.Dxp.Application.Visual} and adds it to the collection.
             * @param visual The {@link Spotfire.Dxp.Application.Visual} to duplicate. It must be attached to the document.
             * @returns The duplicate {@link Spotfire.Dxp.Application.Visual}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddDuplicate(visual: Visual): Visual;
            /**
             * Adds a new visual of the specified type.
             * @returns The newly created content.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            AddNew<T extends Visuals.VisualContent>(typeT: TypeRefParam<T>): JsType<T>;
            /**
             * Creates a new {@link Spotfire.Dxp.Application.Visual} with a visual of the type identified by visualTypeId
             * and adds it to the collection.
             * @param visualTypeId The visual type identifier.
             * @returns The newly created {@link Spotfire.Dxp.Application.Visual}.
             * 
             * @example
             * 
             * The following example snippet shows how to add a bar chart to a visual collection.
             * ```
             * let visual = page.Visuals.AddNew(Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.BarChart);
             * let barchart = visual.As<Spotfire.Dxp.Application.Visuals.BarChart>();
             * ```
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddNew(visualTypeId: Framework.DocumentModel.TypeIdentifier): Visual;
            /**
             * Determines whether the visual is in the collection.
             * @param visual The visual.
             * @returns true if the visual is in the collection; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(visual: Visual): JsType<System.Boolean>;
            /**
             * Removes the specified {@link Spotfire.Dxp.Application.Visual}.
             * @param visual The {@link Spotfire.Dxp.Application.Visual} to remove.
             * @returns true is successful, otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(visual: Visual): JsType<System.Boolean>;
            /**
             * Tries to get a visual specified by its id.
             * @param id The id.
             * @param visual The visual.
             * @returns true if the visual was found, otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetVisual(id: (JsType<System.Guid> | System.Guid), visual: OutParam<Visual>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Visual>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            private __type_3134114050: null;
        }
        
        namespace AnalyticItems {
            /**
             * Represents a bookmark.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Bookmark extends Object {
                /**
                 * Gets the author of the bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Author(): JsType<System.String>;
                /**
                 * Gets the components included in this bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Components(): BookmarkComponentFlags;
                /**
                 * Gets the id of the bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Id(): JsType<System.Guid>;
                /**
                 * Gets a value indicating whether the bookmark is public or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsPublic(): JsType<System.Boolean>;
                /**
                 * Gets the date when the bookmark was last modified.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Modified(): JsType<System.DateTime>;
                /**
                 * Gets the name of the bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1265845685: null;
            }
            
            /**
             * Represents a tool context class for the {@link Spotfire.Dxp.Application.AnalyticItems.BookmarkContext.Bookmark}, which
             * contains information about which bookmark the tool is being launched for.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BookmarkContext extends Object {
                /**
                 * Gets the bookmark associated with the context.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Bookmark(): Bookmark;
                /**
                 * Gets the bookmark manager.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BookmarkManager(): BookmarkManager;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_7217774: null;
            }
            
            /**
             * Declares methods for retrieving links of different types
             * for a bookmark.
             * If the resulting link should contain the {@link Spotfire.Dxp.Framework.Library.LibraryLinksOption.Path | path} to the analysis
             * use Uri.AbsoluteUri on the resulting uri for a correct string representation for http or https
             * related links in order to comply with different browsers and systems and Uri.ToString() for Spotfire uri.
             * See {@link http://www.ietf.org/rfc/rfc3986.txt | RFC 3986} and related discussions.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BookmarkLinks extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Tries to get a uri for a Spotfire Server redirect page of the specified bookmark, which
                 * should be accessed through http or https.
                 * @param bookmark The bookmark to retrieve the Spotfire Server redirect page uri for.
                 * @param option The option for generating the resulting uri.
                 * @param uri The Spotfire Server redirect page uri for the specified bookmark.
                 * @returns True if successfully created a uri for a Spotfire Server redirect page; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetRedirectUri(bookmark: Bookmark, option: Framework.Library.LibraryLinksOption, uri: OutParam<System.Uri>): JsType<System.Boolean>;
                /**
                 * Tries to get a uri for a Spotfire analysis of the specified bookmark, which
                 * should be access through the TIBCOSpotfire protocol.
                 * @param bookmark The bookmark to retrieve the Spotfire analysis uri for.
                 * @param option The option for generating the resulting uri.
                 * @param uri The Spotfire analysis uri for the specified bookmark.
                 * @returns True if successfully created a uri for a Spotfire analysis; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetUri(bookmark: Bookmark, option: Framework.Library.LibraryLinksOption, uri: OutParam<System.Uri>): JsType<System.Boolean>;
                /**
                 * Tries to get a uri for a Spotfire Web Player Server redirect page of the specified bookmark, which
                 * should be accessed through http or https.
                 * @param bookmark The bookmark to retrieve the Spotfire Web Player Server redirect page uri for.
                 * @param option The option for generating the resulting uri.
                 * @param uri The Spotfire Web Player Server redirect page uri for the specified bookmark.
                 * @returns True if successfully created a uri for a Spotfire Web Player Server redirect page; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetWebPlayerRedirectUri(bookmark: Bookmark, option: Framework.Library.LibraryLinksOption, uri: OutParam<System.Uri>): JsType<System.Boolean>;
                /**
                 * Tries to get a uri for a Spotfire Web Player analysis with the specified bookmark, which
                 * should be accessed through http or https.
                 * @param bookmark The bookmark to retrieve the Spotfire Web Player Player analysis uri for.
                 * @param option The option for generating the resulting uri.
                 * @param uri The Spotfire Web Player analysis uri with the specified bookmark.
                 * @returns True if successfully created a uri for a Spotfire Web Player analysis; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetWebPlayerUri(bookmark: Bookmark, option: Framework.Library.LibraryLinksOption, uri: OutParam<System.Uri>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2169103912: null;
            }
            
            /**
             * Manages the bookmarks in the document and in the library.
             * The AnalysisApplication owns an instance of this class and provides it as a service.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BookmarkManager extends Object implements System.IServiceProvider {
                /**
                 * Gets a collection of methods for retrieving analysis and
                 * bookmark uris of different types.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Links(): BookmarkLinks;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Adds a new bookmark for the active page.
                 * @param name The bookmark name.
                 * @returns The new bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNew(name: (JsType<System.String> | System.String)): Bookmark;
                /**
                 * Adds a new bookmark for the specified components on the active page.
                 * @param name The bookmark name.
                 * @param components The components.
                 * @returns The new bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNew(name: (JsType<System.String> | System.String), components: BookmarkComponentFlags): Bookmark;
                /**
                 * Applies the specified bookmark to the document.
                 * @param bookmark The bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Apply(bookmark: Bookmark): void;
                /**
                 * Applies the bookmark with the specified id on the current document.
                 * @param id The identifier of the bookmark to apply.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Apply(id: (JsType<System.Guid> | System.Guid)): void;
                /**
                 * Applies the components of the specified bookmark to the document.
                 * @param bookmark The bookmark to apply.
                 * @param components The bookmark components.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Apply(bookmark: Bookmark, components: BookmarkComponentFlags): void;
                /**
                 * Determines whether all components of the specified bookmark can be fully applied.
                 * @param bookmark The bookmark.
                 * @returns True if all components of the bookmark can be applied; otherwise, False.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanApply(bookmark: Bookmark): JsType<System.Boolean>;
                /**
                 * Determines whether the specified components of the bookmark can be fully applied.
                 * @param bookmark The bookmark.
                 * @param components The components to check if they can be applied.
                 * @returns True if the specified components of the bookmark can be applied; otherwise False.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanApply(bookmark: Bookmark, components: BookmarkComponentFlags): JsType<System.Boolean>;
                /**
                 * Releases all resources managed by the {@link Spotfire.Dxp.Application.AnalyticItems.BookmarkManager}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Dispose(): void;
                /**
                 * Gets all the bookmarks in the document.
                 * @returns All bookmarks.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetBookmarks(): System.Collections.Generic.IList<Bookmark>;
                /**
                 * Gets the service of the specified type.
                 * @param serviceType The type to get.
                 * @returns The service of the specified type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetService(serviceType: (JsType<System.Type> | System.Type)): unknown;
                /**
                 * Gets the service of the specified type.
                 * @returns The service of the specified type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeTService - @@Generic type argument
                 */
                GetService<TService>(typeTService: TypeRefParam<TService>): JsType<TService>;
                /**
                 * Removes the specified bookmark from the document.
                 * @param bookmark The bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(bookmark: Bookmark): void;
                /**
                 * Saves a private copy of the specified bookmark.
                 * @param bookmark The bookmark.
                 * @returns The copy of the bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SavePrivateCopy(bookmark: Bookmark): Bookmark;
                /**
                 * Gets all bookmarks matching the specified expression.
                 * @param expression The search expression.
                 * @returns The bookmarks matching the expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Search(expression: (JsType<System.String> | System.String)): System.Collections.Generic.IList<Bookmark>;
                /**
                 * Sets the name on the specified bookmark. The specified bookmark is removed and a copy of it, with the new name, is returned.
                 * @param bookmark The bookmark to be renamed.
                 * @param name The new bookmark name.
                 * @returns A new bookmark that has replaced the old bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetName(bookmark: Bookmark, name: (JsType<System.String> | System.String)): Bookmark;
                /**
                 * Sets the public visibility on the specified bookmark. The specified bookmark is removed and a copy of it, with the new public visibility value, is returned.
                 * @param bookmark The bookmark to set visibility for.
                 * @param isPublic if set to true [is public].
                 * @returns A new bookmark that has replaced the old bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetPublicVisibility(bookmark: Bookmark, isPublic: (JsType<System.Boolean> | System.Boolean)): Bookmark;
                /**
                 * Tries to get the bookmark specified by id.
                 * @param id The id of the bookmark to get.
                 * @param bookmark A reference to the bookmark, if it exist.
                 * @returns True if the bookmark exists and was retrieved; otherwise False.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetBookmark(id: (JsType<System.Guid> | System.Guid), bookmark: OutParam<Bookmark>): JsType<System.Boolean>;
                /**
                 * Updates the specified bookmark to reflect the active page.
                 * @param bookmark The bookmark to update.
                 * @returns The bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Update(bookmark: Bookmark): Bookmark;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                };
                private __type_286641202: null;
            }
        }
        
        namespace Calculations {
            /**
             * Base class for calculations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Calculation<TSettings extends CalculationSettings, TResults extends CalculationResults> extends Dxp.Data.Calculation implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Calculations.CalculationResults} implementation associated with this calculation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CalculationResults(): JsType<TResults>;
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Calculations.CalculationSettings} associated with this calculation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CalculationSettings(): JsType<TSettings>;
                /**
                 * Gets the unique name of this calculation instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3728451158: null;
            }
            
            /**
             * A collection of calculation instances.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationCollection extends Framework.DocumentModel.DocumentNodeListBase<Dxp.Data.Calculation> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Dxp.Data.Calculation>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<Dxp.Data.Calculation>;
                /**
                 * Adds a new instance of the calculation identified by typeId to this collection.
                 * @param typeId The {@link Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier} for the {@link Spotfire.Dxp.Data.Calculation} to add
                 * @returns The calculation object constructed and added to this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNew(typeId: Framework.DocumentModel.TypeIdentifier): Dxp.Data.Calculation;
                /**
                 * Adds a new instance of the given calculation type to this collection.
                 * @returns The calculation object constructed and added to this
                 * collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeTCalculation - @@Generic type argument
                 */
                AddNew<TCalculation extends Dxp.Data.Calculation>(typeTCalculation: TypeRefParam<TCalculation>): JsType<TCalculation>;
                /**
                 * Determine if the collection contains the {@link Spotfire.Dxp.Data.Calculation} instance identified by calculationName
                 * @param calculationName The name of the instance to look up
                 * @returns True if an instance with that name exists false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(calculationName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Determines whether the specified value is in this collection.
                 * @param value The object to locate in this collection.
                 * The value can be null.
                 * @returns true if value is found in this collection;
                 * otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(value: Dxp.Data.Calculation): JsType<System.Boolean>;
                /**
                 * Finds all Calculations of type calculationType
                 * @param calculationType The type of the calculation to look for.
                 * @returns All calculations of type calculationType
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                FindCalculations(calculationType: (JsType<System.Type> | System.Type)): System.Collections.Generic.IEnumerable<Dxp.Data.Calculation>;
                /**
                 * Finds all Calculations with {@link Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier}typeId.
                 * @param typeId The typeId to look for.
                 * @returns All Calculations with {@link Spotfire.Dxp.Framework.DocumentModel.TypeIdentifier}typeId
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                FindCalculations(typeId: Framework.DocumentModel.TypeIdentifier): System.Collections.Generic.IEnumerable<Dxp.Data.Calculation>;
                /**
                 * Finds all calculations of type TCalculation
                 * @returns All calculations of this type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeTCalculation - @@Generic type argument
                 */
                FindCalculations<TCalculation extends Dxp.Data.Calculation>(typeTCalculation: TypeRefParam<TCalculation>): System.Collections.Generic.IEnumerable<TCalculation>;
                /**
                 * Completely removes the execution and all its results such as tables or columns.
                 * @param calculation The calculation.
                 * @returns true if operation succeeded; false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(calculation: Dxp.Data.Calculation): JsType<System.Boolean>;
                /**
                 * Tries to get a {@link Spotfire.Dxp.Data.Calculation} instance by name.
                 * @param calculationName The {@link Spotfire.Dxp.Data.Calculation.Name | name} of the calculation.
                 * @param calculation The {@link Spotfire.Dxp.Data.Calculation} to fill in.
                 * @returns True if a calculation with calculationName was found, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetCalculation(calculationName: (JsType<System.String> | System.String), calculation: OutParam<Dxp.Data.Calculation>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Dxp.Data.Calculation>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), Dxp.Data.Calculation>;
                private __type_317092215: null;
            }
            
            /**
             * Abstract base class for a single dependency for a calculation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationDependency extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1849000130: null;
            }
            
            /**
             * Abstract typed base class for dependencies for a calculation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationDependencyCollection<T extends CalculationDependency> extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<T>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * Gets an enumerator over the dependencies in this collection.
                 * @returns An enumerator.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<T>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_4271732592: null;
            }
            
            /**
             * Used to uniquely identify a dependency of a calculation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationDependencyIdentifier extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Compares this instance with a specified
                 * {@link Spotfire.Dxp.Application.Calculations.CalculationDependencyIdentifier}.
                 * @param other The object to compare this object to.
                 * @returns A 32-bit signed integer indicating the lexical relationship between
                 * the two comparands.Value Condition Less than zero This instance is
                 * less than value. Zero This instance is equal to value. Greater than
                 * zero This instance is greater than value.-or- value is null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CompareTo(other: CalculationDependencyIdentifier): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2144906705: null;
            }
            
            /**
             * Abstract base class for calculation results. After a calculation has been executed the results can be found here. This class must be extended to
             * implement a specialized results class that is suited for a concrete calculations implementation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationResults extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1005122231: null;
            }
            
            /**
             * Used to uniquely identify a result in {@link Spotfire.Dxp.Application.Calculations.CalculationResults}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationResultsIdentifier extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Compares this instance with a specified
                 * {@link Spotfire.Dxp.Application.Calculations.CalculationResultsIdentifier}.
                 * @param other The object to compare this object to.
                 * @returns A 32-bit signed integer indicating the lexical relationship between
                 * the two comparands.Value Condition Less than zero This instance is
                 * less than value. Zero This instance is equal to value. Greater than
                 * zero This instance is greater than value.-or- value is null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CompareTo(other: CalculationResultsIdentifier): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3460528088: null;
            }
            
            /**
             * Base class for calculation settings. Holds the input to a calculation and uses it to determine when the calculation needs to be rerun,
             * invalidated etc. This class must be extended to implement a specialized settings class that is suited for a concrete calculations implementation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationSettings extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets whether or not a settings object is new, that is, is associated
                 * with a calculation instance that has not been executed yet.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsNew(): JsType<System.Boolean>;
                /**
                 * Gets the update behavior of the calculation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UpdateBehavior(): Data.CalculationUpdateBehavior;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Validates the suggested columns, filtering selections and marking selections with respect to the current Settings and Results.
                 * In particular this means checking for circular references. This method is meant to be called from a dialog before allowing the user
                 * to set up dependencies that would cause errors. If the implementer forgets to do this the framework will run the same check before trying
                 * to calculate but without any chance for the user to modify their choices.
                 * @param dependentColumns Suggested dependencycolumns
                 * @param dependentFilteringSelections Suggested {@link Spotfire.Dxp.Data.DataFilteringSelection}:s
                 * @param dependentMarkingSelections Suggested {@link Spotfire.Dxp.Data.DataMarkingSelection}:s
                 * @returns A {@link Spotfire.Dxp.Application.Calculations.CalculationSettingsValidationResult} object containing any errors or warnings that was the result of the check.
                 * These can then be displayed to the user so they can modify their choices.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ValidateSettings(dependentColumns: OrExplicit<System.Collections.Generic.IEnumerable<Data.DataColumn>>, dependentFilteringSelections: OrExplicit<System.Collections.Generic.IEnumerable<Data.DataFilteringSelection>>, dependentMarkingSelections: OrExplicit<System.Collections.Generic.IEnumerable<Data.DataMarkingSelection>>): CalculationSettingsValidationResult;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2892639926: null;
            }
            
            /**
             * Report from the {@link Spotfire.Dxp.Application.Calculations.CalculationSettings} validation. Contains any errors or warnings that this resulted in. These can then be displayed
             * to the user or added to if the implementation wants to do additional checks.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationSettingsValidationResult extends Object {
                /**
                 * Errors found
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Errors(): System.Collections.Generic.IList<JsType<System.String>>;
                /**
                 * If the settings are valid input to run a calculation on.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsValid(): JsType<System.Boolean>;
                /**
                 * Warnings given
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Warnings(): System.Collections.Generic.IList<JsType<System.String>>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Add new error
                 * @param error The error string.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddError(error: (JsType<System.String> | System.String)): void;
                /**
                 * Add new warning
                 * @param warning The warning string.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddWarning(warning: (JsType<System.String> | System.String)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1565579304: null;
            }
            
            /**
             * Defines the type identifiers for built-in calculations
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationTypeIdentifiers extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * DataRelationships identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly DataRelationships: Framework.DocumentModel.TypeIdentifier;
                /**
                 * KMeans identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly KMeansClustering: Framework.DocumentModel.TypeIdentifier;
                /**
                 * LineSimilarity identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly LineSimilarity: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Stand-in identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly StandIn: Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3657304669: null;
            }
            
            /**
             * Keeps references to columns resulting from a calculation and corresponding to a particular {@link Spotfire.Dxp.Application.Calculations.CalculationResultsIdentifier}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnsCalculationResult extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * The {@link Spotfire.Dxp.Data.DataColumn}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Columns(): System.Collections.ObjectModel.ReadOnlyCollection<Data.DataColumn>;
                /**
                 * The {@link Spotfire.Dxp.Application.Calculations.ColumnsCalculationResult.DataTable} that the columns inhabit. Will return a valid value even if all the columns are gone so prefer this
                 * over asking the columns for their ancestor table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTable(): Data.DataTable;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_802861645: null;
            }
            
            /**
             * A calculation dependency on a single column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataColumnCalculationDependency extends CalculationDependency implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_262166732: null;
            }
            
            /**
             * A calculation dependency on a group of columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataColumnCalculationDependencyCollection extends CalculationDependencyCollection<DataColumnCalculationDependency> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataColumnCalculationDependency>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * The {@link Spotfire.Dxp.Data.DataColumn} objects that this dependency represents.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Columns(): System.Collections.ObjectModel.ReadOnlyCollection<Data.DataColumn>;
                /**
                 * The datatable in which the columns represented by this dependency resides. Will return a value even if all the columns
                 * in the table are deleted and is thus preferable to asking the columns for their ancestor table. Returns null if the datatable
                 * no longer exists.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTable(): Data.DataTable;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<DataColumnCalculationDependency>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataColumnCalculationDependency>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_1475273408: null;
            }
            
            /**
             * Represents a calculation dependency on a {@link Spotfire.Dxp.Application.Calculations.DataSelectionCalculationDependency.DataSelection}
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataSelectionCalculationDependency extends CalculationDependency implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * The {@link Spotfire.Dxp.Application.Calculations.DataSelectionCalculationDependency.DataSelection} that this dependency represents. Returns null if the selection no longer exists.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataSelection(): Data.DataSelection;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_198986464: null;
            }
            
            /**
             * Accumulator used to add the results of a calculation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ResultAccumulator extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Adds a column to an existing table or replaces it if it already exist.
                 * @param id A unique identifier for this result.
                 * @param table The {@link Spotfire.Dxp.Data.DataTable} to insert the columns in.
                 * @param builder A {@link Spotfire.Dxp.Data.Columns.ColumnBuilder} containing the values that the column should contain. Column name will be made unique within this {@link Spotfire.Dxp.Data.DataTable}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddColumns(id: CalculationResultsIdentifier, table: Data.DataTable, builder: Data.Columns.ColumnBuilder): void;
                /**
                 * Adds columns to an existing table or replaces them if they already exist.
                 * @param id A unique identifier for this result.
                 * @param table The {@link Spotfire.Dxp.Data.DataTable} to insert the columns in.
                 * @param columns The {@link Spotfire.Dxp.Data.Columns.ColumnBuilder} instances containing the values that the columns should contain. Column names will be made unique within this {@link Spotfire.Dxp.Data.DataTable}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddColumns(id: CalculationResultsIdentifier, table: Data.DataTable, columns: OrExplicit<System.Collections.Generic.IEnumerable<Data.Columns.ColumnBuilder>>): void;
                /**
                 * Adds a completely new {@link Spotfire.Dxp.Data.DataTable} consisting of the columns provided here or replaces them if the table already exists.
                 * @param id A unique identifier for this result.
                 * @param tableName The name of the {@link Spotfire.Dxp.Data.DataTable} to create. If the table exists and is given another name it will be renamed. If
                 * the name is not unique it will be made unique.
                 * @param builder A {@link Spotfire.Dxp.Data.Columns.ColumnBuilder} containing the values that the column should contain.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddTable(id: CalculationResultsIdentifier, tableName: (JsType<System.String> | System.String), builder: Data.Columns.ColumnBuilder): void;
                /**
                 * Adds a completely new {@link Spotfire.Dxp.Data.DataTable} consisting of the columns provided here or replaces them if the table already exists.
                 * @param id A unique identifier for this result.
                 * @param tableName The name of the {@link Spotfire.Dxp.Data.DataTable} to create. If the table exists and is given another name it will be renamed. If
                 * the name is not unique it will be made unique.
                 * @param newColumns {@link Spotfire.Dxp.Data.Columns.ColumnBuilder} instances containing the values that the columns should contain. Column names will be made unique within the table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddTable(id: CalculationResultsIdentifier, tableName: (JsType<System.String> | System.String), newColumns: OrExplicit<System.Collections.Generic.IEnumerable<Data.Columns.ColumnBuilder>>): void;
                /**
                 * Disposes this {@link Spotfire.Dxp.Application.Calculations.ResultAccumulator}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Dispose(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1953319645: null;
            }
            
            namespace DataRelationships {
                /**
                 * Used to select a statistical method in the data relationships calculation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ComparisonMethod extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Anova (numerical vs categorical) */
                    static readonly Anova: ComparisonMethod;
                    /** Chi-square (categorical vs categorical) */
                    static readonly ChiSquare: ComparisonMethod;
                    /** Kruskal-Wallis (sortable vs categorical) */
                    static readonly KruskalWallis: ComparisonMethod;
                    /** Linear regression (numerical vs numerical) */
                    static readonly LinearRegression: ComparisonMethod;
                    /** Linear regression (numerical vs numerical) with intercept and slope */
                    static readonly LinearRegressionWithInterceptAndSlope: ComparisonMethod;
                    /** Spearman R (numerical vs numerical) */
                    static readonly Spearman: ComparisonMethod;
                    private __type_326647031: null;
                }
                
                /**
                 * Contains the output of a {@link Spotfire.Dxp.Application.Calculations.DataRelationships.DataRelationshipsCalculation}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class DataRelationshipsCalculationResults extends CalculationResults implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the resulting {@link Spotfire.Dxp.Data.DataTable}
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get OutputTable(): Data.DataTable;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Tries to get the resulting {@link Spotfire.Dxp.Data.DataColumn} specified by column
                     * @param measure Specifies which measure to get.
                     * @param column The {@link Spotfire.Dxp.Data.DataColumn} in the result, null if it cannot be found.
                     * @returns True if the column was found, false otherwise.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    TryGetColumn(measure: Measure, column: OutParam<Data.DataColumn>): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_339751553: null;
                }
                
                /**
                 * Defines the input to a {@link Spotfire.Dxp.Application.Calculations.DataRelationships.DataRelationshipsCalculation}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class DataRelationshipsCalculationSettings extends CalculationSettings implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the {@link Spotfire.Dxp.Application.Calculations.DataRelationships.DataRelationshipsCalculationSettings.ComparisonMethod} of the data relationships
                     * calculation.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ComparisonMethod(): ComparisonMethod;
                    set ComparisonMethod(value: ComparisonMethod);
                    /**
                     * Specifies which {@link Spotfire.Dxp.Data.DataFilteringSelection} the {@link Spotfire.Dxp.Application.Calculations.DataRelationships.DataRelationshipsCalculation} operates on.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataFilteringSelectionReference(): Data.DataFilteringSelection;
                    set DataFilteringSelectionReference(value: Data.DataFilteringSelection);
                    /**
                     * Gets the update behavior of the calculation.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get UpdateBehavior(): Data.CalculationUpdateBehavior;
                    /**
                     * Represents one of the column sets to compare.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get XColumns(): DataRelationshipsColumnCollection;
                    /**
                     * Represents one of the column sets to compare.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get YColumns(): DataRelationshipsColumnCollection;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Initializes the settings with the preferences of the current user.
                     * Preferences consists of the two column sets, the comparison method and table name to operate on.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    ApplyPreferences(): void;
                    /**
                     * Saves the user preferences to match the current settings.
                     * Preferences consists of the two column sets, the comparison method and table name to operate on.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SavePreferences(): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3465431004: null;
                }
                
                /**
                 * Represents a collection of {@link Spotfire.Dxp.Data.DataColumn}s selected as input for a {@link Spotfire.Dxp.Application.Calculations.DataRelationships.DataRelationshipsCalculation}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class DataRelationshipsColumnCollection extends Object implements Explicit<System.Collections.Generic.ICollection<Data.DataColumn>>, Explicit<System.Collections.Generic.IEnumerable<Data.DataColumn>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * The number of {@link Spotfire.Dxp.Data.DataColumn}s in the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * Determines if the collection is readonly.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IsReadOnly(): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<Data.DataColumn>;
                    /**
                     * Add a {@link Spotfire.Dxp.Data.DataColumn} to this collection
                     * @param item The {@link Spotfire.Dxp.Data.DataColumn} to add.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Add(item: Data.DataColumn): void;
                    /**
                     * Adds the {@link Spotfire.Dxp.Data.DataColumn}s to this collection.
                     * @param columns The {@link Spotfire.Dxp.Data.DataColumn}s to add.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddRange(columns: OrExplicit<System.Collections.Generic.IEnumerable<Data.DataColumn>>): void;
                    /**
                     * Clears the collection of all {@link Spotfire.Dxp.Data.DataColumn}s.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Checks if a {@link Spotfire.Dxp.Data.DataColumn} exists in the collection.
                     * @param item The {@link Spotfire.Dxp.Data.DataColumn} to look for.
                     * @returns True if item exists, false otherwise.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Contains(item: Data.DataColumn): JsType<System.Boolean>;
                    /**
                     * Copies the included {@link Spotfire.Dxp.Data.DataColumn}s to the given array.
                     * @param array The array to copy the {@link Spotfire.Dxp.Data.DataColumn}s to.
                     * @param arrayIndex The zero-based index in array at which copying begins.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    CopyTo(array: TypedArray<Data.DataColumn>, arrayIndex: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Gets an enumerator.
                     * @returns The enumerator
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<Data.DataColumn>;
                    /**
                     * Removes a {@link Spotfire.Dxp.Data.DataColumn} from the collection.
                     * @param item The {@link Spotfire.Dxp.Data.DataColumn} to remove.
                     * @returns True if successful, false otherwise.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(item: Data.DataColumn): JsType<System.Boolean>;
                    /**
                     * Replaces all current {@link Spotfire.Dxp.Data.DataColumn}s, if any, with the given columns.
                     * @param columns The {@link Spotfire.Dxp.Data.DataColumn}s to replace with.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    ReplaceAll(columns: OrExplicit<System.Collections.Generic.IEnumerable<Data.DataColumn>>): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<Data.DataColumn>>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Data.DataColumn>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    private __type_1912907218: null;
                }
                
                /**
                 * All possible output columns from the {@link Spotfire.Dxp.Application.Calculations.DataRelationships.DataRelationshipsCalculation}. Used to get a specific column from the
                 * {@link Spotfire.Dxp.Application.Calculations.DataRelationships.DataRelationshipsCalculationResults.TryGetColumn|TryGetColumn(measure, column)} method
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class Measure extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** a, method-specific (e.g. intercept for linear regression) */
                    static readonly a: Measure;
                    /** b, method-specific (e.g. slope for linear regression) */
                    static readonly b: Measure;
                    /** Chi2Stat */
                    static readonly Chi2Stat: Measure;
                    /** Df */
                    static readonly Df: Measure;
                    /** DfBtwn */
                    static readonly DfBtwn: Measure;
                    /** DfWthn */
                    static readonly DfWthn: Measure;
                    /** FStat */
                    static readonly FStat: Measure;
                    /** HStat */
                    static readonly HStat: Measure;
                    /** Number of valid pairs. */
                    static readonly N: Measure;
                    /** PValue */
                    static readonly PValue: Measure;
                    /** R, correlation or rank correlation */
                    static readonly R: Measure;
                    /** RSq, the squared value of R */
                    static readonly RSq: Measure;
                    /** S2Btwn */
                    static readonly S2Btwn: Measure;
                    /** S2Wthn */
                    static readonly S2Wthn: Measure;
                    /** X */
                    static readonly X: Measure;
                    /** Y */
                    static readonly Y: Measure;
                    private __type_1709152653: null;
                }
            }
            
            /**
             * @@Type reference for casting to class {@link Spotfire.Dxp.Application.Calculations.Calculation}.
             * @param typeTSettings - @@Generic type argument
             * @param typeTResults - @@Generic type argument
             */
            function Calculation<TSettings extends CalculationSettings, TResults extends CalculationResults>(typeTSettings: TypeRefParam<TSettings>, typeTResults: TypeRefParam<TResults>): TypeRef<Calculation<TSettings, TResults>>;
            
            /**
             * @@Type reference for casting to class {@link Spotfire.Dxp.Application.Calculations.CalculationDependencyCollection}.
             * @param typeT - @@Generic type argument
             */
            function CalculationDependencyCollection<T extends CalculationDependency>(typeT: TypeRefParam<T>): TypeRef<CalculationDependencyCollection<T>>;
        }
        
        namespace DocumentProperties {
            /**
             * Contains predefined name constants for the default document properties.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DefaultProperties extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * The AllowWebPlayerResume property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static AllowWebPlayerResume: System.String;
                /**
                 * The Description property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static Description: System.String;
                /**
                 * The Keywords property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static Keywords: System.String;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_551258416: null;
            }
        }
        
        namespace Export {
            /**
             * Represents a prepared report used for exporting the analysis to PDF.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Report extends Object {
                /**
                 * Gets the description of the report.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the name of the report.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Exports the report as PDF with the resulting bytes in the specified stream.
                 * @param outputStream The output stream.
                 * @returns True if all pages were exported successfully; otherwise False
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExportToPdf(outputStream: (JsType<System.IO.Stream> | System.IO.Stream)): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1798302076: null;
            }
        }
        
        namespace Extension {
            /**
             * Base class for custom nodes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CustomNode extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_708093672: null;
            }
        }
        
        namespace Filters {
            /**
             * Representation of the Check Box Filter. The check box filter allows for
             * one or more values to be selected through a check box control.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CheckBoxFilter extends ColumnFilter implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether or not the filter should include
                 * empty value rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IncludeEmpty(): JsType<System.Boolean>;
                set IncludeEmpty(value: JsType<System.Boolean>);
                /** Gets the type id. */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * Gets a collection of the check box values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Values(): JsType<System.Collections.IList>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks the checkbox for value.
                 * @param value The value to check.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Check(value: any): void;
                /**
                 * Determines whether the specified value is checked.
                 * @param value The value.
                 * @returns true if the specified value is checked; otherwise, false.
                 * If the specified value is not among the available {@link Spotfire.Dxp.Application.Filters.CheckBoxFilter.Values} of this filter,
                 * false is returned.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsChecked(value: any): JsType<System.Boolean>;
                /**
                 * Unchecks the checkbox for value.
                 * @param value The value to uncheck.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Uncheck(value: any): void;
                /**
                 * Unchecks the checkboxes for all values in this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                UncheckAll(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1315979374: null;
            }
            
            /**
             * Representation of the Check Box Hierarchy Filter.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CheckBoxHierarchyFilter extends HierarchyFilter implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether the height of the filter is fixed. If the number of items does not fit within the specified height
                 * then a scrollbar is added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HasFixedHeight(): JsType<System.Boolean>;
                set HasFixedHeight(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the number of lines to show in the UI list box.
                 * This setting only has an effect if {@link Spotfire.Dxp.Application.Filters.CheckBoxHierarchyFilter.HasFixedHeight} is true.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Height(): JsType<System.Int32>;
                set Height(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether the search should be performed in all levels in the hierarchy.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SearchAllLevels(): JsType<System.Boolean>;
                set SearchAllLevels(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the search expression that determines which values
                 * are to be shown in the user interface. This property does not affect
                 * which rows are filtered out.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SearchExpression(): JsType<System.String>;
                set SearchExpression(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether the search field should be visible in the UI or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SearchFieldVisible(): JsType<System.Boolean>;
                set SearchFieldVisible(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the level in the hierarhcy where the search is performed. This value has an affect only if
                 * {@link Spotfire.Dxp.Application.Filters.CheckBoxHierarchyFilter.SearchAllLevels} is false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SearchLevel(): JsType<System.Int32>;
                set SearchLevel(value: JsType<System.Int32>);
                /** Gets the type id. */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks the node with path nodePath.
                 * @param nodePath The node path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Check(nodePath: System.Collections.Generic.List<Data.DistinctDataValue>): void;
                /**
                 * Checks the node with path nodePath.
                 * @param nodePath The node path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Check(...nodePath: Data.DistinctDataValue[]): void;
                /**
                 * Checks all nodes in this filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CheckAllNodes(): void;
                /**
                 * Collapses the specified node path.
                 * @param nodePath The node path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Collapse(...nodePath: Data.DistinctDataValue[]): void;
                /**
                 * Collapses the specified node path.
                 * @param nodePath The node path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Collapse(nodePath: System.Collections.Generic.List<Data.DistinctDataValue>): void;
                /**
                 * Expands the specified node path.
                 * @param nodePath The node path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Expand(...nodePath: Data.DistinctDataValue[]): void;
                /**
                 * Expands the specified node path.
                 * @param nodePath The node path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Expand(nodePath: System.Collections.Generic.List<Data.DistinctDataValue>): void;
                /**
                 * Determines whether the node at nodePath is checked or unchecked.
                 * @param nodePath The node path.
                 * @returns true if the node is checked; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsChecked(...nodePath: Data.DistinctDataValue[]): JsType<System.Boolean>;
                /**
                 * Determines whether the node at nodePath is checked or unchecked.
                 * @param nodePath The node path.
                 * @returns true if the node is checked; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsChecked(nodePath: System.Collections.Generic.List<Data.DistinctDataValue>): JsType<System.Boolean>;
                /**
                 * Determines whether the specified node path is expanded.
                 * @param nodePath The node path.
                 * @returns true if the specified node path is expanded; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsExpanded(...nodePath: Data.DistinctDataValue[]): JsType<System.Boolean>;
                /**
                 * Determines whether the specified node path is expanded.
                 * @param nodePath The node path.
                 * @returns true if the specified node path is expanded; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsExpanded(nodePath: System.Collections.Generic.List<Data.DistinctDataValue>): JsType<System.Boolean>;
                /**
                 * Unchecks the node with path nodePath.
                 * @param nodePath The node path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                UnCheck(nodePath: System.Collections.Generic.List<Data.DistinctDataValue>): void;
                /**
                 * Unchecks the node with path nodePath.
                 * @param nodePath The node path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                UnCheck(...nodePath: Data.DistinctDataValue[]): void;
                /**
                 * Unchecks all nodes in this filter. Doing so causes all data values
                 * to be filtered out.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                UncheckAllNodes(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1325676193: null;
            }
            
            /**
             * This class is an implementation detail and should never be used directly.
             * Instead, always use one of the concrete filter classes:
             * {@link Spotfire.Dxp.Application.Filters.CheckBoxFilter},
             * {@link Spotfire.Dxp.Application.Filters.ItemFilter},
             * {@link Spotfire.Dxp.Application.Filters.RadioButtonFilter},
             * {@link Spotfire.Dxp.Application.Filters.RangeFilter} and
             * {@link Spotfire.Dxp.Application.Filters.TextFilter}
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnFilter extends FilterBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the column instance associated with this filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataColumnReference(): (Data.DataColumn | null);
                /** Gets the filtered rows. */
                get FilteredRows(): Data.IndexSet;
                /**
                 * Gets a value indicating whether the referenced column has any invalid rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HasEmptyValues(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1681638131: null;
            }
            
            /**
             * The Filter class contains a specific filter implementation. The type of filter is controlled by the property {@link Spotfire.Dxp.Application.Filters.Filter.TypeId}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Filter extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the filtered rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilteredRows(): Data.IndexSet;
                /**
                 * Flag indicating whether the filter is modified.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Modified(): JsType<System.Boolean>;
                /**
                 * Gets or sets the name of this filter. The filter name is the same as the name of the referenced data column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                set Name(value: JsType<System.String>);
                /**
                 * Gets or sets the type identifier for the filter.
                 * By setting this property, the filter is converted to the specified type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                set TypeId(value: Framework.DocumentModel.TypeIdentifier);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Returns the filter implementation as specified type.
                 * @returns The filter implementation, or null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeT - @@Generic type argument
                 */
                As<T extends FilterBase>(typeT: TypeRefParam<T>): JsType<T>;
                /**
                 * Gets the value of a specified property.
                 * @param propertyName The property name, case insensitive.
                 * @returns The property value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetPropertyValue(propertyName: (JsType<System.String> | System.String)): unknown;
                /**
                 * Checks if there is a valid value for a specified property.
                 * @param propertyName The property name, case insensitive.
                 * @returns true if the property has a valid value, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                HasPropertyValue(propertyName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Resets the filter. After calling this method, the filter does not
                 * filter out any rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Reset(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3009031253: null;
            }
            
            /**
             * This class is an implementation detail and should never be used directly.
             * Instead, always use one of the concrete filter classes:
             * {@link Spotfire.Dxp.Application.Filters.CheckBoxFilter},
             * {@link Spotfire.Dxp.Application.Filters.CheckBoxHierarchyFilter},
             * {@link Spotfire.Dxp.Application.Filters.ItemFilter},
             * {@link Spotfire.Dxp.Application.Filters.RadioButtonFilter},
             * {@link Spotfire.Dxp.Application.Filters.RangeFilter},
             * {@link Spotfire.Dxp.Application.Filters.TextFilter} and
             * {@link Spotfire.Dxp.Application.Filters.ListBoxFilter}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterBase extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the filtered rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilteredRows(): Data.IndexSet;
                /**
                 * Gets the type id.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Gets the value of a specified property.
                 * @param propertyName The property name, case insensitive.
                 * @returns The property value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetPropertyValue(propertyName: (JsType<System.String> | System.String)): unknown;
                /**
                 * Checks if there is a valid value for a specified property.
                 * @param propertyName The property name, case insensitive.
                 * @returns true if the property has a valid value, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                HasPropertyValue(propertyName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Resets the filter. After calling this method, the filter does not
                 * filter out any rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Reset(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3033989294: null;
            }
            
            /**
             * The FilterCollection contains the {@link Spotfire.Dxp.Application.Filters.Filter}s for a specific {@link Spotfire.Dxp.Data.DataTable} in a {@link Spotfire.Dxp.Application.Filters.FilteringScheme}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterCollection extends Framework.DocumentModel.DocumentNodeListBase<Filter> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Filter>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets or sets a value indicating whether to automatically create filters for new columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AutoCreateFilters(): JsType<System.Boolean>;
                set AutoCreateFilters(value: JsType<System.Boolean>);
                /**
                 * Gets the data table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableReference(): Data.DataTable;
                /**
                 * Gets the filtered rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilteredRows(): Data.IndexSet;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<Filter>;
                /**
                 * Creates a filter and adds it to this FilterCollection. This method will
                 * make an effort to create a suitable filter for the column
                 * based on number of unique values and the column data type.
                 * @param dataColumn The DataColumn.
                 * @returns The Filter that was created and added to this FilterCollection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNewFilter(dataColumn: Data.DataColumn): Filter;
                /**
                 * Creates a filter and adds it to this FilterCollection. The filter type corresponds to the supplied filter identifier.
                 * @param filterIdentifier The filter identifier.
                 * @param dataColumn The data column.
                 * @returns The Filter that was created and added to this FilterCollection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNewFilter(filterIdentifier: Framework.DocumentModel.TypeIdentifier, dataColumn: Data.DataColumn): Filter;
                /**
                 * If this collection is empty, then the flag {@link Spotfire.Dxp.Application.Filters.FilterCollection.AutoCreateFilters} is set
                 * to true and filters are created for each column in the {@link Spotfire.Dxp.Application.Filters.FilterCollection.DataTableReference}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AutoConfigure(): void;
                /**
                 * Removes all items from this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines whether a {@link Spotfire.Dxp.Data.DataColumn} has a filter representation in this collection.
                 * @param column The column to locate in this collection.
                 * @returns true if value is found in this collection;
                 * otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(column: Data.DataColumn): JsType<System.Boolean>;
                /**
                 * Determines whether a named element is in this collection.
                 * @param name The name to locate in this collection.
                 * @returns true if value is found in this collection;
                 * otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Determines whether the specified value is in this collection.
                 * @param value The object to locate in this collection.
                 * The value can be null.
                 * @returns true if value is found in this collection;
                 * otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(value: Filter): JsType<System.Boolean>;
                /**
                 * Removes the specified item.
                 * @param item The item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: Filter): void;
                /**
                 * Resets all filters.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ResetAllFilters(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Filter>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: ((PropertyGet<Data.DataColumn, Filter> & PropertyGet<(JsType<System.String> | System.String), Filter>) & PropertyGet<(JsType<System.Int32> | System.Int32), Filter>);
                private __type_895034767: null;
            }
            
            /**
             * A container for one or more {@link Spotfire.Dxp.Application.Filters.FilterHandle}s which can
             * be placed into a {@link Spotfire.Dxp.Application.Filters.FilterPanel} to group filters. A
             * FilterGroup is uniquely identified by its name within any given panel.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterGroup extends FilterGroupItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether this group is expanded or
                 * collapsed. This property defaults to true.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expanded(): JsType<System.Boolean>;
                set Expanded(value: JsType<System.Boolean>);
                /**
                 * Gets the filter handles in this group.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilterHandles(): System.Collections.Generic.IEnumerable<FilterHandle>;
                /**
                 * Gets a value indicating whether or not this group is empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsEmpty(): JsType<System.Boolean>;
                /**
                 * Gets the items.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Items(): FilterGroupItemCollection;
                /**
                 * Gets the group display name, that is, its caption.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Filters.FilterPanel} to which this
                 * {@link Spotfire.Dxp.Application.Filters.FilterGroup} belongs.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Panel(): FilterPanel;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Adds the specified {@link Spotfire.Dxp.Application.Filters.Filter} to this group, a {@link Spotfire.Dxp.Application.Filters.FilterHandle} is created and returned.
                 * @param filter The filter to add.
                 * @returns The FilterHandle that represent the added filter
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(filter: Filter): FilterHandle;
                /**
                 * Removes all existing {@link Spotfire.Dxp.Application.Filters.FilterHandle} from this group.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearFilters(): void;
                /**
                 * Finds a filter in this group, given its {@link Spotfire.Dxp.Application.Filters.Filter.Name}.
                 * @param name The name of the filter to get.
                 * @returns The filter with specified name,
                 * or null if no such filter exists.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetFilter(name: (JsType<System.String> | System.String)): FilterHandle;
                /**
                 * Removes the {@link Spotfire.Dxp.Application.Filters.FilterHandle} for the specified {@link Spotfire.Dxp.Application.Filters.Filter} from this group. If the filter is not
                 * a member of this group, calling this method will not have any effect.
                 * @param filter The filter to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(filter: Filter): void;
                /**
                 * Sorts the members of this group alphabetically ascending,
                 * based on the names of the members.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SortMembersAscending(): void;
                /**
                 * Sorts the members of this group alphabetically descending,
                 * based on the names of the members.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SortMembersDescending(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3463404690: null;
            }
            
            /**
             * Base class for items contained in a FilterGroup.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterGroupItem extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the parent group.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ParentGroup(): FilterGroup;
                /**
                 * Gets a value indicating whether this {@link Spotfire.Dxp.Application.Filters.FilterGroupItem} is selected.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Selected(): JsType<System.Boolean>;
                set Selected(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Filters.FilterGroupItem}
                 * is visible in its {@link Spotfire.Dxp.Application.Filters.FilterGroup}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2603584675: null;
            }
            
            /**
             * Collection class for FilterGroupItems.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterGroupItemCollection extends Framework.DocumentModel.DocumentNodeList<FilterGroupItem> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<FilterGroupItem>>, Explicit<System.Collections.IEnumerable>, Explicit<System.Collections.Generic.IList<FilterGroupItem>>, Explicit<System.Collections.Generic.ICollection<FilterGroupItem>> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<FilterGroupItem>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<FilterGroupItem>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<FilterGroupItem>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<FilterGroupItem>>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), FilterGroupItem> & PropertySet<(JsType<System.Int32> | System.Int32), FilterGroupItem>);
                private __type_497503941: null;
            }
            
            /**
             * A FilterHandle represents a {@link Spotfire.Dxp.Application.Filters.Filter} when it is placed inside a {@link Spotfire.Dxp.Application.Filters.FilterGroup}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterHandle extends FilterGroupItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Filters.Filter} that this FilterHandle references.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilterReference(): Filter;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2733212551: null;
            }
            
            /**
             * A FilteringScheme contains {@link Spotfire.Dxp.Application.Filters} separated in {@link Spotfire.Dxp.Application.Filters.FilterCollection}s
             * for each {@link Spotfire.Dxp.Data.DataTable} in the {@link Spotfire.Dxp.Application.Document}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilteringScheme extends Framework.DocumentModel.DocumentNodeList<FilterCollection> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<FilterCollection>>, Explicit<System.Collections.IEnumerable>, Explicit<System.Collections.Generic.IList<FilterCollection>>, Explicit<System.Collections.Generic.ICollection<FilterCollection>> {
                /**
                 * Gets or sets a value indicating whether to auto configure filter collections.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AutoConfigureFilterCollections(): JsType<System.Boolean>;
                set AutoConfigureFilterCollections(value: JsType<System.Boolean>);
                /**
                 * Gets the default filter collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultFilterCollection(): FilterCollection;
                /**
                 * Gets the filtering selection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilteringSelectionReference(): Data.DataFilteringSelection;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<FilterCollection>;
                /**
                 * Sets the property {@link Spotfire.Dxp.Application.Filters.FilteringScheme.AutoConfigureFilterCollections} to true and invokes {@link Spotfire.Dxp.Application.Filters.FilterCollection.AutoConfigure} on all existing {@link Spotfire.Dxp.Application.Filters.FilterCollection}s.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AutoConfigure(): void;
                /**
                 * Resets all filters in all {@link Spotfire.Dxp.Application.Filters.FilterCollection}s of this
                 * {@link Spotfire.Dxp.Application.Filters.FilteringScheme}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ResetAllFilters(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<FilterCollection>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<FilterCollection>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<FilterCollection>>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: ((PropertyGet<Data.DataTable, FilterCollection> & PropertyGet<(JsType<System.Int32> | System.Int32), FilterCollection>) & PropertySet<(JsType<System.Int32> | System.Int32), FilterCollection>);
                private __type_2355919430: null;
            }
            
            /**
             * Collection of all FilteringSchemes in this {@link Spotfire.Dxp.Application.Document}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilteringSchemeCollection extends Framework.DocumentModel.DocumentNodeListBase<FilteringScheme> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<FilteringScheme>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets or sets a value indicating whether to auto configure filtering schemes after they are created.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AutoConfigureFilteringSchemes(): JsType<System.Boolean>;
                set AutoConfigureFilteringSchemes(value: JsType<System.Boolean>);
                /**
                 * Gets the default filtering scheme.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultFilteringSchemeReference(): FilteringScheme;
                /**
                 * Gets or sets a property determining if the filtering scheme menu is visible or not in the UI.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilteringSchemeMenuVisible(): JsType<System.Boolean>;
                set FilteringSchemeMenuVisible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<FilteringScheme>;
                /**
                 * Sets {@link Spotfire.Dxp.Application.Filters.FilteringSchemeCollection.AutoConfigureFilteringSchemes} to true and runs {@link Spotfire.Dxp.Application.Filters.FilteringScheme.AutoConfigure} on all FilteringSchemes.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AutoConfigure(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<FilteringScheme>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<Data.DataSelection, FilteringScheme> & PropertyGet<(JsType<System.Int32> | System.Int32), FilteringScheme>);
                private __type_4184282382: null;
            }
            
            /**
             * A Filter Panel represents the contents of the Spotfire control panel that
             * can contain the data {@link Spotfire.Dxp.Application.Filters.Filter | filters}.
             * 
             * 
             * Each Filter Panel contains one or more {@link Spotfire.Dxp.Application.Filters.FilterGroup | filter
             * groups} in which the filters are placed. These groups and the
             * filters in them are accessible through the
             * {@link Spotfire.Dxp.Application.Filters.FilterPanel.TableGroups} property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterPanel extends Panel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the FilteringScheme to use.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilteringSchemeReference(): (FilteringScheme | null);
                set FilteringSchemeReference(value: (FilteringScheme | null));
                /**
                 * Gets an enumerator over the filters in this panel that match the
                 * expression given by {@link Spotfire.Dxp.Application.Filters.FilterPanel.InteractiveSearchPattern}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FiltersMatchingSearchPattern(): System.Collections.Generic.IEnumerable<FilterHandle>;
                /**
                 * Gets or sets the search pattern.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get InteractiveSearchPattern(): JsType<System.String>;
                set InteractiveSearchPattern(value: JsType<System.String>);
                /**
                 * Gets the top level filter groups associated with data tables.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableGroups(): TableGroupCollection;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Applies the filter organization, that is, visibility, selected state, groups and sort order from another filter panel to this instance.
                 * @param sourcePanel The source filter panel.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ApplyOrganizationFrom(sourcePanel: FilterPanel): void;
                /**
                 * Configures this filter panel with a default {@link Spotfire.Dxp.Application.Filters.FilteringScheme}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AutoConfigure(): void;
                /**
                 * Configures this filter panel from the specified source filter panel.
                 * @param sourcePanel The source panel.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AutoConfigure(sourcePanel: FilterPanel): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3093034867: null;
            }
            
            /**
             * A specialization of the {@link Spotfire.Dxp.Application.Filters.FilterGroup},
             * representing the subgroups within a {@link Spotfire.Dxp.Application.Filters.FilterPanel} which can
             * be added to a {@link Spotfire.Dxp.Application.Filters.FilterGroup} in {@link Spotfire.Dxp.Application.Filters.FilterPanel.TableGroups}.
             * New subgroups are created using the
             * {@link Spotfire.Dxp.Application.Filters.TableGroup.AddNewSubGroup|AddNewSubGroup(name)}
             * method.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterSubGroup extends FilterGroup implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether this group is expanded or
                 * collapsed. This property defaults to true.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expanded(): JsType<System.Boolean>;
                set Expanded(value: JsType<System.Boolean>);
                /**
                 * Gets the group display name, that is, its caption.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets or sets a value indicating whether this group is visible or hidden.
                 * This property defaults to true.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Sets the name.
                 * @param value The value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetName(value: (JsType<System.String> | System.String)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1414954982: null;
            }
            
            /**
             * Defines the identifiers for
             * built-in filters.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterTypeIdentifiers extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Return the identifier for the specified type.
                 * @param filterClass The filter class.
                 * @returns The identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static TypeToIdentifier(filterClass: (JsType<System.Type> | System.Type)): Framework.DocumentModel.TypeIdentifier;
                /**
                 * CheckBoxFilter identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly CheckBoxFilter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * CheckBoxHierarchyFilter identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly CheckBoxHierarchyFilter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * ItemFilter identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly ItemFilter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * ListBoxFilter identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly ListBoxFilter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * RadioButtonFilter identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly RadioButtonFilter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * RangeFilter identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly RangeFilter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * TextFilter identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly TextFilter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3236521965: null;
            }
            
            /**
             * This class is an implementation detail and should never be used directly.
             * Instead, always use the {@link Spotfire.Dxp.Application.Filters.CheckBoxHierarchyFilter}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HierarchyFilter extends FilterBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataColumn} instance associated with this filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataColumnReference(): Data.DataColumn;
                /** Gets the filtered rows. */
                get FilteredRows(): Data.IndexSet;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataHierarchy} instance associated with this filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Hierarchy(): Data.DataHierarchy;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_528944538: null;
            }
            
            /**
             * Representation of an ItemFilter. The item filter has the ability to
             * filter on a single value in the column that is applies on. The value
             * that is being filtered on is given by
             * {@link Spotfire.Dxp.Application.Filters.SingleValueColumnFilter.Value}.
             * 
             * 
             * In addition to the distinct values in the
             * {@link Spotfire.Dxp.Application.Filters.ColumnFilter.DataColumnReference}, the Item Filter can filter on the
             * special values given by the {@link Spotfire.Dxp.Application.Filters.ItemFiltering} enumeration.
             * The {@link Spotfire.Dxp.Application.Filters.ItemFiltering.All} value
             * is the default value of an Item Filter. The
             * {@link Spotfire.Dxp.Application.Filters.ItemFiltering.None} value is
             * the last value in an Item Filter. The
             * {@link Spotfire.Dxp.Application.Filters.ItemFiltering.Empty} value is
             * only used when the filter column contains empty values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ItemFilter extends SingleValueColumnFilter implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the type id. */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1888745152: null;
            }
            
            /**
             * The special values that an {@link Spotfire.Dxp.Application.Filters.ItemFilter} or {@link Spotfire.Dxp.Application.Filters.RadioButtonFilter} may filter.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ItemFiltering extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Filter all values. */
                static readonly All: ItemFiltering;
                /** All Empty values. */
                static readonly Empty: ItemFiltering;
                /** Filter no values. */
                static readonly None: ItemFiltering;
                private __type_4187698420: null;
            }
            
            /**
             * Represents a list box filter. A list box filter allows multiple selection and searching
             * while preserving space. This filter can handle a large amount of categorical values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ListBoxFilter extends ColumnFilter implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether this instance should use check boxes to indicate filtered items.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CheckBoxModeEnabled(): JsType<System.Boolean>;
                set CheckBoxModeEnabled(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the number of lines to show in the UI list box.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Height(): JsType<System.Int32>;
                set Height(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether all values should be included or not.
                 * True if filtering should include all values, if this property is set to
                 * to true then this overrides the SelectedValues list. If this property is set then
                 * empty values are included regardless of the {@link Spotfire.Dxp.Application.Filters.ListBoxFilter.IncludeEmpty} setting.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IncludeAllValues(): JsType<System.Boolean>;
                set IncludeAllValues(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether we should include empty values or not. If this is true
                 * then the empty values in this column will not be filtered out by this filter,
                 * otherwise the empty values will be filtered out by this filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IncludeEmpty(): JsType<System.Boolean>;
                set IncludeEmpty(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the search expression that determines which values
                 * are to be shown in the user interface. This property does not affect
                 * which rows are filtered out.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SearchExpression(): JsType<System.String>;
                set SearchExpression(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether the search field should be visible in the UI or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SearchFieldVisible(): JsType<System.Boolean>;
                set SearchFieldVisible(value: JsType<System.Boolean>);
                /**
                 * Gets a read-only collection of the currently selected values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SelectedValues(): JsType<System.Collections.IList>;
                /**
                 * Gets or sets a value indicating whether (All) is shown in the filter or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowAll(): JsType<System.Boolean>;
                set ShowAll(value: JsType<System.Boolean>);
                /** Gets the type id. */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Check if a value is selected or not.
                 * @param value The value.
                 * @returns True if the value is selected, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsSelected(value: any): JsType<System.Boolean>;
                /**
                 * Select the given values, this will remove
                 * all previously selected values. Note that the IncludeAllValues property needs to
                 * be set to false in order for this selection to affect the filtering.
                 * @param values The values to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetSelection(values: (any[] | OrExplicit<System.Collections.Generic.IEnumerable<(any | System.Object)>>)): void;
                /**
                 * Select the given values, this will remove
                 * all previously selected values. Note that the IncludeAllValues property needs to
                 * be set to false in order for this selection to affect the filtering.
                 * @param values The values to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetSelection(...values: any[]): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1487161816: null;
            }
            
            /**
             * Representation of the Radio Button Filter. Similar to the
             * {@link Spotfire.Dxp.Application.Filters.ItemFilter}, this filter can filter on single values in the
             * column that the filter is being applied on. Graphically, the values in
             * the column are represented as radio buttons.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class RadioButtonFilter extends SingleValueColumnFilter implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the type id. */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3440734058: null;
            }
            
            /**
             * Representation of a RangeFilter. Range Filters are associated with one
             * data column given by the {@link Spotfire.Dxp.Application.Filters.ColumnFilter.DataColumnReference} property.
             * The {@link Spotfire.Dxp.Application.Filters.RangeFilter.ValueRange} of the filter, represents the filtering
             * performed by the filter. When the filter is created, this range is set
             * to the extreme (minimum and maximum) values found in the target column.
             * 
             * 
             * The granularity of filtering in a RangeFilter can be adjusted using the
             * {@link Spotfire.Dxp.Application.Filters.RangeFilter.ValueDataRange} property. Narrowing this range will cause
             * the filter to "zoom in" and only apply on the values therein. Note that
             * this is graphically visualized in the Filter using three dots.
             * 
             * 
             * A Range Filter can be applied to a column independent  of its value type.
             * Nevertheless, the {@link Spotfire.Dxp.Application.Filters.RangeFilter.VisualScale | visual scales} supported
             * by the filter are limited by value types. For instance, the Logarithmic
             * scale can only be applied to numeric columns. To query the valid scales
             * on a filter, use the {@link Spotfire.Dxp.Application.Filters.RangeFilter.ValidVisualScales} property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class RangeFilter extends ColumnFilter implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether the referenced column has any invalid rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HasEmptyValues(): JsType<System.Boolean>;
                /**
                 * Gets or sets a value indicating whether or not the filter should
                 * include empty value rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IncludeEmpty(): JsType<System.Boolean>;
                set IncludeEmpty(value: JsType<System.Boolean>);
                /** Gets the type id. */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * Gets a read-only list containing the valid scales that can be set
                 * on this filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ValidVisualScales(): System.Collections.ObjectModel.ReadOnlyCollection<VisualScale>;
                /**
                 * Gets or sets this range filter's min and max value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ValueDataRange(): ValueRange;
                set ValueDataRange(value: ValueRange);
                /**
                 * Gets or sets the value range for the filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ValueRange(): ValueRange;
                set ValueRange(value: ValueRange);
                /**
                 * Gets or sets the current scale transformation of the filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get VisualScale(): VisualScale;
                set VisualScale(value: VisualScale);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Resets the filter data range to the extreme values in the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ResetDataRange(): void;
                /**
                 * Steps both low and high limit to the previous values. If the lower
                 * range is already at its minimum, calling this method will have no
                 * effect.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                StepBodyDown(): void;
                /**
                 * Steps both low and high limit to the next values. If the upper
                 * range is already at its maximum, calling this method will have no
                 * effect.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                StepBodyUp(): void;
                /**
                 * Steps the high limit down to previous value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                StepHighLimitDown(): void;
                /**
                 * Steps the high limit up to next value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                StepHighLimitUp(): void;
                /**
                 * Steps the low limit down to previous value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                StepLowLimitDown(): void;
                /**
                 * Steps the low limit up to next value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                StepLowLimitUp(): void;
                /**
                 * Trims the value range of the filter to only contain filtered values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TrimSelection(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2893552632: null;
            }
            
            /**
             * Base class for {@link Spotfire.Dxp.Application.Filters.ColumnFilter | column filter} that are
             * used to filter on a single value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SingleValueColumnFilter extends ColumnFilter implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Get or set a value indicating whether {@link Spotfire.Dxp.Application.Filters.ItemFiltering.All} is allowed in this filter. If the filter
                 * value is {@link Spotfire.Dxp.Application.Filters.ItemFiltering.All} when AllowAll is set to false, the filter value will be set to {@link Spotfire.Dxp.Application.Filters.ItemFiltering.None}.
                 * If AllowAll is false, {@link Spotfire.Dxp.Application.Filters.SingleValueColumnFilter.Reset} or setting the value to {@link Spotfire.Dxp.Application.Filters.ItemFiltering.All} will have no effect.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AllowAll(): JsType<System.Boolean>;
                set AllowAll(value: JsType<System.Boolean>);
                /**
                 * Get or set a value indicating whether {@link Spotfire.Dxp.Application.Filters.ItemFiltering.None} is shown in the filter.
                 * Even if {@link Spotfire.Dxp.Application.Filters.ItemFiltering.None} is hidden, it may still be set in the filter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowNone(): JsType<System.Boolean>;
                set ShowNone(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the filtered value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Value(): unknown;
                set Value(value: unknown);
                /**
                 * Gets a list of allowed values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Values(): JsType<System.Collections.IList>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3961253970: null;
            }
            
            /**
             * A specialization of the {@link Spotfire.Dxp.Application.Filters.FilterGroup},
             * representing one root group that exists within a
             * {@link Spotfire.Dxp.Application.Filters.FilterPanel} and that can be accessed through the
             * {@link Spotfire.Dxp.Application.Filters.FilterPanel.TableGroups}
             * property. In addition to the
             * functionality of standard groups, the root group can contain one or more
             * subgroups. Subgroups are added using the {@link Spotfire.Dxp.Application.Filters.TableGroup.AddNewSubGroup|AddNewSubGroup(name)}
             * method. Additionally, the root filter group is special in the sense that
             * is cannot be renamed.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableGroup extends FilterGroup implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether to auto synchronize filters handles when the {@link Spotfire.Dxp.Application.Filters.FilterCollection} changes.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AutoSynchronizeFilters(): JsType<System.Boolean>;
                set AutoSynchronizeFilters(value: JsType<System.Boolean>);
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Filters.FilterCollection} for this TableGroup.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilterCollectionReference(): FilterCollection;
                /**
                 * Gets the group display name, that is, its caption.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets the subgroups of this root group.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SubGroups(): System.Collections.Generic.IEnumerable<FilterSubGroup>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Adds a new filter group with the given name as a subgroup of this
                 * group. The new group is added to the end of the list of members of
                 * this group.
                 * @param name The name of the new group to create. Note that
                 * this name must be unique within this {@link Spotfire.Dxp.Application.Filters.TableGroup}.
                 * @returns The newly created group.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNewSubGroup(name: (JsType<System.String> | System.String)): FilterSubGroup;
                /**
                 * Removes all subgroups from this group.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearSubGroups(): void;
                /**
                 * Finds a subgroup in this group, given its {@link Spotfire.Dxp.Application.Filters.FilterGroup.Name}.
                 * @param name The name of the group to get.
                 * @returns The group with specified name,
                 * or null if no such subgroup exists.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetSubGroup(name: (JsType<System.String> | System.String)): FilterSubGroup;
                /**
                 * Creates a new filter group with the given name and inserts it as a
                 * subgroup of this group at the given position.
                 * @param name The name of the new group to create. Note that
                 * this name must be unique within the {@link Spotfire.Dxp.Application.Filters.TableGroup}.
                 * @param index The index at which the new group is inserted
                 * after being created. The valid range for this parameter is
                 * [0, number of existing members].
                 * @returns The newly created group.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                InsertNewSubGroup(name: (JsType<System.String> | System.String), index: (JsType<System.Int32> | System.Int32)): FilterSubGroup;
                /**
                 * Removes the {@link Spotfire.Dxp.Application.Filters.FilterHandle} for the specified {@link Spotfire.Dxp.Application.Filters.Filter} from this group. If the filter is not
                 * a member of this group, calling this method will not have any effect.
                 * @param filter The filter to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(filter: Filter): void;
                /**
                 * Removes the specified subgroup from this group. If the filter is not a member of this
                 * group, it will not be removed.
                 * @param subGroup The sub group to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(subGroup: FilterSubGroup): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2806162454: null;
            }
            
            /**
             * Collection class for TableGroups.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableGroupCollection extends Framework.DocumentModel.DocumentNodeList<TableGroup> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<TableGroup>>, Explicit<System.Collections.IEnumerable>, Explicit<System.Collections.Generic.IList<TableGroup>>, Explicit<System.Collections.Generic.ICollection<TableGroup>> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<TableGroup>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<TableGroup>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<TableGroup>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<TableGroup>>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), TableGroup> & PropertySet<(JsType<System.Int32> | System.Int32), TableGroup>);
                private __type_3940225090: null;
            }
            
            /**
             * Representation of a TextFilter which uses a search expression to match
             * values from its column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TextFilter extends ColumnFilter implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the type id. */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * Gets or sets the value that this {@link Spotfire.Dxp.Application.Filters.TextFilter} is matching.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Value(): JsType<System.String>;
                set Value(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_251062712: null;
            }
            
            /**
             * A ValueRange represents an interval in a scale containing values
             * of arbitrary types. The range is defined by the properties
             * {@link Spotfire.Dxp.Application.Filters.ValueRange.High} and {@link Spotfire.Dxp.Application.Filters.ValueRange.Low}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ValueRange extends Object {
                /**
                 * Gets the high limit of the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get High(): unknown;
                /**
                 * Gets a value indicating whether or not this range is full, having both the low and high properties
                 * set to their respective {@link Spotfire.Dxp.Application.Filters.ValueRange.Endpoint} values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsFullRange(): JsType<System.Boolean>;
                /**
                 * Gets a value indicating whether or not this range is valid.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsValidRange(): JsType<System.Boolean>;
                /**
                 * Gets the low limit of the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Low(): unknown;
                /**
                 * Initializes a new instance of type {@link Spotfire.Dxp.Application.Filters.ValueRange} given a
                 * range to copy.
                 * @param range A range to copy.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(range: ValueRange);
                /**
                 * Initializes a new instance of type {@link Spotfire.Dxp.Application.Filters.ValueRange}.
                 * @param low The lower limit of the range.
                 * @param high The upper limit of the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(low: any, high: any);
                /**
                 * Indicates whether this instance and a specified object are equal.
                 * @param obj Another object to compare to.
                 * @returns true if obj and this instance are the same type and represent the same value; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Equals(obj: any): JsType<System.Boolean>;
                /**
                 * Returns the hash code for this instance.
                 * @returns A 32-bit signed integer that is the hash code for this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetHashCode(): JsType<System.Int32>;
                /**
                 * Returns the fully qualified type name of this instance.
                 * @returns A {@link System.String} containing a fully qualified type name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ToString(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_708887517: null;
            }
            
            /**
             * Enumeration specifying the valid scale transformations available.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualScale extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Linear transformation, leave data unchanged. */
                static readonly Linear: VisualScale;
                /** A Log10 transformation. */
                static readonly Log10: VisualScale;
                private __type_798200489: null;
            }
        }
        
        namespace Layout {
            /**
             * The docking placement of a {@link Spotfire.Dxp.Application.Panel}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DockingPlacement extends Object {
                /**
                 * Gets the index of the {@link Spotfire.Dxp.Application.Panel} instance in the {@link Spotfire.Dxp.Application.Layout.PanelRegion}.<br />
                 * An index of 0 indicates the topmost panel in {@link Spotfire.Dxp.Application.Layout.PanelRegion.Left} and {@link Spotfire.Dxp.Application.Layout.PanelRegion.Right} regions,
                 * and the leftmost panel in the {@link Spotfire.Dxp.Application.Layout.PanelRegion.Bottom} region.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Index(): JsType<System.Int32>;
                /**
                 * Gets the region.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Region(): PanelRegion;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Application.Layout.DockingPlacement} class.
                 * @param region The docking region.
                 * @param index The docking index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(region: PanelRegion, index: (JsType<System.Int32> | System.Int32));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2070769246: null;
            }
            
            /**
             * Defines the layout structure and content to be applied within
             * a {@link Spotfire.Dxp.Application.Page}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LayoutDefinition extends Object {
                /**
                 * Initializes a new instance of the
                 * {@link Spotfire.Dxp.Application.Layout.LayoutDefinition} class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor();
                /**
                 * Adds the specified {@link Spotfire.Dxp.Application.Visual} to the current
                 * section. {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.BeginStackedSection} or
                 * {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.BeginSideBySideSection} should be called prior to
                 * this.
                 * @param visual The {@link Spotfire.Dxp.Application.Visual} to be added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(visual: Visual): void;
                /**
                 * Adds the specified {@link Spotfire.Dxp.Application.Visual} to the current
                 * section. {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.BeginStackedSection} or
                 * {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.BeginSideBySideSection} should be called prior to
                 * this.
                 * @param visual The {@link Spotfire.Dxp.Application.Visual} to be added.
                 * @param proportion The proportion of this element relative to its siblings. Must be greater than 0.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(visual: Visual, proportion: (JsType<System.Single> | System.Single)): void;
                /**
                 * Creates a side-by-side (vertical) section that will be
                 * used for subsequent calls to to {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.Add|Add(visual)} or {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.Add|Add(visual, proportion)}. The section
                 * should be ended by calling {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.EndSection}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                BeginSideBySideSection(): void;
                /**
                 * Creates a side-by-side (vertical) section that will be
                 * used for subsequent calls to to {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.Add|Add(visual)} or {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.Add|Add(visual, proportion)}. The section
                 * should be ended by calling {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.EndSection}.
                 * @param proportion The proportion of this element relative to its siblings. Must be greater than 0.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                BeginSideBySideSection(proportion: (JsType<System.Single> | System.Single)): void;
                /**
                 * Creates a stacked (horizontal) section that will be used
                 * for subsequent calls to {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.Add|Add(visual)} or {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.Add|Add(visual, proportion)}. The section
                 * should be closed by calling {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.EndSection}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                BeginStackedSection(): void;
                /**
                 * Creates a stacked (horizontal) section that will be used
                 * for subsequent calls to to {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.Add|Add(visual)} or {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.Add|Add(visual, proportion)}. The section
                 * should be closed by calling {@link Spotfire.Dxp.Application.Layout.LayoutDefinition.EndSection}.
                 * @param proportion The proportion of this element relative to its siblings. Must be greater than 0.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                BeginStackedSection(proportion: (JsType<System.Single> | System.Single)): void;
                /**
                 * Ends the current section. All sections must be ended.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                EndSection(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4061813607: null;
            }
            
            /**
             * Specifies which edge of a page to dock a panel to.
             * This enumeration is used in {@link Spotfire.Dxp.Application.Layout.DockingPlacement}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PanelRegion extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Bottom region. */
                static readonly Bottom: PanelRegion;
                /** Left region. */
                static readonly Left: PanelRegion;
                /** Right region. */
                static readonly Right: PanelRegion;
                private __type_1793012136: null;
            }
            
            /**
             * Represents the panel state.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PanelState extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * The panel is docked.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Docked: PanelState;
                /**
                 * The panel is in pop over state.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Popover: PanelState;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3987364729: null;
            }
            
            /**
             * How to generally arrange {@link Spotfire.Dxp.Application.Visual}s within
             * a {@link Spotfire.Dxp.Application.Page}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TileMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Arrange the {@link Spotfire.Dxp.Application.Visual}s giving them
                 * as similar sizes as possible.
                 */
                static readonly Evenly: TileMode;
                /**
                 * Arrange the {@link Spotfire.Dxp.Application.Visual}s giving each
                 * as much horizontal space as possible.
                 */
                static readonly Horizontally: TileMode;
                /**
                 * Arrange the {@link Spotfire.Dxp.Application.Visuals}s giving the active
                 * {@link Spotfire.Dxp.Application.Visual} maximal space and the rest minimal space.
                 */
                static readonly Maximize: TileMode;
                /**
                 * Arrange the {@link Spotfire.Dxp.Application.Visual}s giving each
                 * as much vertical space as possible.
                 */
                static readonly Vertically: TileMode;
                private __type_1346740159: null;
            }
            
            /**
             * The visualization area size.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualizationAreaSize extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether the mode is fit to window or fixed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FitToWindow(): JsType<System.Boolean>;
                set FitToWindow(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the size in pixels for the visualization area.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Size(): JsType<System.Drawing.Size>;
                set Size(value: JsType<System.Drawing.Size>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3771384762: null;
            }
        }
        
        namespace Tools {
            /**
             * Represents a tool context class for cell values, which
             * contain a cell value, its {@link Spotfire.Dxp.Application.Tools.CopyCellValueContext.DataType} and its ContentType.
             * Custom tools using this class is used when a value is to be copied, i.e. on
             * the "Copy Cell" submenu in the table plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CopyCellValueContext extends Object {
                /**
                 * Gets the ContentType for the value, null if not available.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ContentType(): JsType<System.String>;
                /**
                 * Gets the type of the value in this CopyCellValueContext.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataType(): Data.DataType;
                /**
                 * Gets the value for which this context is valid.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataValue(): Data.DataValue;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1213959024: null;
            }
            
            /**
             * Represents a tool context class for the {@link Spotfire.Dxp.Application.Visuals.Maps.MapChart},
             * which contains information about the geographic coordinates
             * for the location a right click has been made on the map chart.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class MapChartCoordinatesContext extends Object {
                /**
                 * Gets the geographic coordinates.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Coordinates(): JsType<System.Drawing.PointF>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2381639387: null;
            }
            
            /**
             * Represents a tool context class for the {@link Spotfire.Dxp.Application.Tools.TablePlotCellContext.TablePlot}, which
             * contains information about which row and column in the plot's data table
             * the tool is being launched for.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TablePlotCellContext extends Object {
                /**
                 * Gets the data value from the context cell.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataValue(): Data.DataValue;
                /**
                 * Gets the table column in in which the cell is located.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableColumn(): Visuals.TableColumn;
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Tools.TablePlotCellContext.TablePlot} that the context is
                 * valid for.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TablePlot(): Visuals.TablePlot;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_836011193: null;
            }
            
            /**
             * Represents a tool context class for the {@link Spotfire.Dxp.Application.Tools.TablePlotColumnContext.TablePlot}, which
             * contains information about which column in the plot's data table
             * the tool is being launched for.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TablePlotColumnContext extends Object {
                /**
                 * Gets the clicked table column in the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableColumn(): Visuals.TableColumn;
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Tools.TablePlotColumnContext.TablePlot} the column is located in.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TablePlot(): Visuals.TablePlot;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1449172925: null;
            }
        }
        
        namespace UserPreferences {
            /**
             * General user preferences for visualizations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualizationPreferences extends Framework.Preferences.PreferenceBase {
                /**
                 * Gets the metadata for the axis title font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AxisTitleFontMetadata(): Framework.Styles.FontMetadata;
                /** Category for the preference. */
                get Category(): JsType<System.String>;
                /**
                 * Gets the metadata for the legend font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendFontMetadata(): Framework.Styles.FontMetadata;
                /**
                 * Gets or sets the default behavior for when the limiting markings are empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LimitingMarkingsEmptyBehavior(): Data.LimitingMarkingsEmptyBehavior;
                set LimitingMarkingsEmptyBehavior(value: Data.LimitingMarkingsEmptyBehavior);
                /**
                 * Gets or sets the default message to show when the limiting markings are empty.
                 * This message is used when {@link Spotfire.Dxp.Application.UserPreferences.VisualizationPreferences.LimitingMarkingsEmptyBehavior} is set to ShowMessage.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LimitingMarkingsEmptyMessage(): JsType<System.String>;
                set LimitingMarkingsEmptyMessage(value: JsType<System.String>);
                /**
                 * Gets the metadata for the Lines and Curves font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LinesAndCurvesFontMetadata(): Framework.Styles.FontMetadata;
                /**
                 * Gets the metadata for the other labels font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OtherLabelFontMetadata(): Framework.Styles.FontMetadata;
                /**
                 * Gets or sets the preferred aggregation method for numeric columns. When a visualization is
                 * configured by heuristics, this method will be used to aggregate numeric columns unless overridden
                 * by other settings, such as {@link Spotfire.Dxp.Data.DataColumnProperties.PreferredAggregationMethod}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PreferredAggregationMethodForNumericColumns(): JsType<System.String>;
                set PreferredAggregationMethodForNumericColumns(value: JsType<System.String>);
                /**
                 * Gets the metadata for the scale label font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ScaleLabelFontMetadata(): Framework.Styles.FontMetadata;
                /** Sub category for the preference. */
                get SubCategory(): JsType<System.String>;
                /**
                 * Gets the metadata for the trellis label font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TrellisLabelFontMetadata(): Framework.Styles.FontMetadata;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_291834605: null;
            }
        }
        
        namespace Visuals {
            /**
             * Base class for axes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Axis extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the axis mode.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AxisMode(): AxisMode;
                /**
                 * Gets or sets the axis binding.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Binding(): AxisBinding;
                set Binding(value: AxisBinding);
                /**
                 * Gets or sets a value controlling how a categorical axis responds to filtering.
                 * This property only affects axes where the categories are laid out spatially.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CategoryMode(): CategoryMode;
                set CategoryMode(value: CategoryMode);
                /**
                 * Gets or sets a value controlling whether the axis expression should be evaluated on all data or
                 * on filtered data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EvaluationMode(): AxisEvaluationMode;
                set EvaluationMode(value: AxisEvaluationMode);
                /**
                 * Gets or sets the expression that defines how data is mapped to this axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                set Expression(value: JsType<System.String>);
                /**
                 * Gets the axis name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets or sets the title font for this axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TitleFontMetadata(): Framework.Styles.FontMetadata;
                set TitleFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1678747234: null;
            }
            
            /**
             * Axis bindings are used to base the expression on an axis on currently marked value in a column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class AxisBinding extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the data column containing the values used to control the expression on an axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnReference(): Data.DataColumn;
                set ColumnReference(value: Data.DataColumn);
                /**
                 * Gets or sets the expression template used to build the expression. Defaults to an empty string.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ExpressionTemplate(): JsType<System.String>;
                set ExpressionTemplate(value: JsType<System.String>);
                /**
                 * Gets or sets the marking that controls which row in the column
                 * defined by the {@link Spotfire.Dxp.Application.Visuals.AxisBinding.ColumnReference} property that should be used for the axis expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkingReference(): Data.DataMarkingSelection;
                set MarkingReference(value: Data.DataMarkingSelection);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Application.Visuals.AxisBinding} class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_53245899: null;
            }
            
            /**
             * Represents the mode for evaluating an axis expression.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class AxisEvaluationMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Specifies that the axis expression should be evaluated on all data. */
                static readonly AllData: AxisEvaluationMode;
                /** Specifies that the axis expression should be evaluated after filtering. */
                static readonly FilteredData: AxisEvaluationMode;
                private __type_1500950755: null;
            }
            
            /**
             * Specifies whether an axis is categorical or continuous.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class AxisMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The axis is categorical. */
                static readonly Categorical: AxisMode;
                /** The axis is continuous. */
                static readonly Continuous: AxisMode;
                private __type_826044341: null;
            }
            
            /**
             * Structure used to control the range of an axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class AxisRange extends Object {
                /**
                 * Gets the high value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get High(): unknown;
                /**
                 * Gets the low value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Low(): unknown;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Application.Visuals.AxisRange} class.
                 * @param low The lower limit of the range, or null if the low value should be derived from the data.
                 * @param high The upper limit of the range, or null if the low value should be derived from the data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(low: any, high: any);
                /**
                 * Determines whether the specified object is equal to the current object.
                 * @param obj Instance to check for equality.
                 * @returns true if the specified object is equal to the current object; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Equals(obj: any): JsType<System.Boolean>;
                /**
                 * Returns the hash code for this instance.
                 * @returns A 32-bit signed integer that is the hash code for this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetHashCode(): JsType<System.Int32>;
                /**
                 * Returns a string that represents the current object.
                 * @returns A string representing this object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ToString(): JsType<System.String>;
                /**
                 * Gets an open range, that is, a range where both high and low limits are null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly DefaultRange: AxisRange;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1349637169: null;
            }
            
            /**
             * Specifies the axis transform.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class AxisTransformType extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Log 10 transform. */
                static readonly Log10: AxisTransformType;
                /** No transform. */
                static readonly None: AxisTransformType;
                private __type_1020094310: null;
            }
            
            /**
             * Representation of a bar chart. A bar chart displays data using a number
             * of bars, each of which represents a
             * particular category as defined by the {@link Spotfire.Dxp.Application.Visuals.BarChart.XAxis}. The height
             * of each bar is proportional to a specific aggregation (for example to the sum
             * of the values in the category it represents) defined on the
             * {@link Spotfire.Dxp.Application.Visuals.BarChart.YAxis}. In addition bars can be split into further
             * categories by means of the {@link Spotfire.Dxp.Application.Visuals.BarChart.ColorAxis}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BarChart extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the width of the bars.
                 * Allowed values are in the range [0, 100].
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BarWidth(): JsType<System.Single>;
                set BarWidth(value: JsType<System.Single>);
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.Axis} by which coloring in the plot is made.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets or sets a value indicating whether the visualization should inject empty values for missing time series data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CompensateForMissingTimeSeriesValues(): JsType<System.Boolean>;
                set CompensateForMissingTimeSeriesValues(value: JsType<System.Boolean>);
                /**
                 * Gets the details object that controls how tooltips are displayed in this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): BarChartDetails;
                /**
                 * Gets the fitting models.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FittingModels(): FittingModels.FittingModelCollection;
                /**
                 * Gets or sets a flag indicating if all bars in this plot should be
                 * drawn with maximum size.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HundredPercentBars(): JsType<System.Boolean>;
                set HundredPercentBars(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether the complete bar shall be
                 * labeled or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelCompleteBar(): JsType<System.Boolean>;
                set LabelCompleteBar(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the font used for the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets label orientation of this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelOrientation(): LabelOrientation;
                set LabelOrientation(value: LabelOrientation);
                /**
                 * Gets or sets the number of decimal digits for percentages.
                 * Allowed values are 0 through 6.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelPercentageDecimalDigits(): JsType<System.Int32>;
                set LabelPercentageDecimalDigits(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether or not bar segments shall be
                 * labeled.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelSegments(): JsType<System.Boolean>;
                set LabelSegments(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating label visibility.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelVisibility(): LabelVisibility;
                set LabelVisibility(value: LabelVisibility);
                /**
                 * Gets or sets a value indicating max number of drawn labels.
                 * Allowed values are 0 to 200.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxNumberOfLabels(): JsType<System.Int32>;
                set MaxNumberOfLabels(value: JsType<System.Int32>);
                /**
                 * Gets or sets the orientation of the bars.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Orientation(): BarChartOrientation;
                set Orientation(value: BarChartOrientation);
                /**
                 * Gets or sets a value indicating whether segments in stacked bars should be shown in reversed order.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ReverseSegmentOrder(): JsType<System.Boolean>;
                set ReverseSegmentOrder(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the type of the segment label information.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SegmentLabelInformationType(): LabelInformationType;
                set SegmentLabelInformationType(value: LabelInformationType);
                /**
                 * Gets or sets a flag indicating if shadow bars should be drawn.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowShadowBars(): JsType<System.Boolean>;
                set ShowShadowBars(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether or not the bars
                 * in this plot are sorted.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortedBars(): JsType<System.Boolean>;
                set SortedBars(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether segments in stacked bars should be ordered by size.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortSegmentsBySize(): JsType<System.Boolean>;
                set SortSegmentsBySize(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the stack mode.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get StackMode(): StackMode;
                set StackMode(value: StackMode);
                /**
                 * Get the X-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): ScaleAxis;
                /**
                 * Gets the Y-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): ScaleAxis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1065735160: null;
            }
            
            /**
             * Representation of bar detail information for a {@link Spotfire.Dxp.Application.Visuals.BarChart}.
             * The information contained in this class is displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BarChartDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the X-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the Y-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2815595406: null;
            }
            
            /**
             * The orientation of the bars in a bar chart.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BarChartOrientation extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Horizontal orientation of the bars in a bar chart. */
                static readonly Horizontal: BarChartOrientation;
                /** Vertical orientation of the bars in a bar chart. */
                static readonly Vertical: BarChartOrientation;
                private __type_2090275570: null;
            }
            
            /**
             * Represents a box plot.
             * 
             * 
             * Box plots are used to visualize key statistical measures,
             * such as median, mean and quartiles. The measures are shown on the Y-axis for each category defined by the X-axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BoxPlot extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the width of the boxes.
                 * Allowed values are in the range [0, 100].
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BoxWidth(): JsType<System.Single>;
                set BoxWidth(value: JsType<System.Single>);
                /**
                 * Gets the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets the comparison circles for the box plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ComparisonCircles(): BoxPlotComparisonCircles;
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): BoxPlotDetails;
                /**
                 * Gets the fitting models.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FittingModels(): FittingModels.FittingModelCollection;
                /**
                 * Gets or sets the size of the markers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerSize(): JsType<System.Single>;
                set MarkerSize(value: JsType<System.Single>);
                /**
                 * Gets the reference points.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ReferencePoints(): BoxPlotReferencePointCollection;
                /**
                 * Gets or sets a value indicating whether 95 % confidence intervals are drawn.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Show95PercentConfidenceInterval(): JsType<System.Boolean>;
                set Show95PercentConfidenceInterval(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether distributions are drawn within the boxes.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowDistribution(): JsType<System.Boolean>;
                set ShowDistribution(value: JsType<System.Boolean>);
                /**
                 * Gets the table with statistical measures shown beneath the x axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Table(): BoxPlotStatisticsTable;
                /**
                 * Gets or sets a value indicating whether to use relative scale on the Y-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UseRelativeScale(): JsType<System.Boolean>;
                set UseRelativeScale(value: JsType<System.Boolean>);
                /**
                 * Gets the X-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): ScaleAxis;
                /**
                 * Gets or sets the amount of jittering in the x direction.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XJitter(): JsType<System.Double>;
                set XJitter(value: JsType<System.Double>);
                /**
                 * Gets the Y-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): ScaleAxis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4098062667: null;
            }
            
            /**
             * The comparison circles area next to a plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BoxPlotComparisonCircles extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the value of the alpha level to use when calculating the Tukey-Kramer values.
                 * The Alpha level should be a value between 0.0001 and 0.999. Default value is 0.01.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AlphaLevel(): JsType<System.Double>;
                set AlphaLevel(value: JsType<System.Double>);
                /**
                 * Gets or sets the span of the comparison circles area.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Span(): JsType<System.Single>;
                set Span(value: JsType<System.Single>);
                /**
                 * Gets or sets a value indicating whether the area with comparison circles is visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2188530295: null;
            }
            
            /**
             * Class representing bar detail information, typically displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BoxPlotDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item that controls the display of statistical measures.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get StatisticalMeasures(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the y axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the x axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4029420669: null;
            }
            
            /**
             * Represents information about a reference point,
             * such as the shape it is using, the color, etc.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BoxPlotReferencePoint extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether the reference point is available.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Available(): JsType<System.Boolean>;
                /**
                 * Gets or sets the color to use for the reference point.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): JsType<System.Drawing.Color>;
                set Color(value: JsType<System.Drawing.Color>);
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Application.Visuals.LineStyle} to use for the reference point.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LineStyle(): LineStyle;
                set LineStyle(value: LineStyle);
                /**
                 * Gets or sets the marker shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerShape(): MarkerShape;
                set MarkerShape(value: MarkerShape);
                /**
                 * Gets the name of the method used by this reference point.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MethodName(): JsType<System.String>;
                /**
                 * Gets or sets a value indicating whether the reference point is rendered as a line or marker shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowAsLine(): JsType<System.Boolean>;
                set ShowAsLine(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether this reference point is visible or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4268770682: null;
            }
            
            /**
             * A collection of reference points in a box plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BoxPlotReferencePointCollection extends Framework.DocumentModel.DocumentNodeListBase<BoxPlotReferencePoint> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<BoxPlotReferencePoint>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<BoxPlotReferencePoint>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<BoxPlotReferencePoint>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), BoxPlotReferencePoint>;
                private __type_2276168098: null;
            }
            
            /**
             * Controls the sort order in a {@link Spotfire.Dxp.Application.Visuals.BoxPlotStatisticsTable}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BoxPlotSortMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Ascending sort order. */
                static readonly Ascending: BoxPlotSortMode;
                /** Descending sort order. */
                static readonly Descending: BoxPlotSortMode;
                private __type_212716968: null;
            }
            
            /**
             * Represents the statistics table shown below the X-axis of a box plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BoxPlotStatisticsTable extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the font to use for this {@link Spotfire.Dxp.Application.Visuals.BoxPlotStatisticsTable}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontMetadata(): Framework.Styles.FontMetadata;
                set FontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets the measures in the table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Measures(): BoxPlotStatisticsTable.MeasureCollection;
                /**
                 * Gets or sets a value indicating whether to render gridlines or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowGridlines(): JsType<System.Boolean>;
                set ShowGridlines(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the measure to sort by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortMeasure(): JsType<System.String>;
                set SortMeasure(value: JsType<System.String>);
                /**
                 * Gets or sets the sort mode.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortMode(): BoxPlotSortMode;
                set SortMode(value: BoxPlotSortMode);
                /**
                 * Gets or sets a value indicating whether this table is visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2153263452: null;
            }
            
            /**
             * Class representing the camera in a 3D scatter plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Camera extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the direction in which the camera is looking.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Direction(): Tuple3D;
                set Direction(value: Tuple3D);
                /**
                 * Gets the field of view in, in degrees.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FieldOfView(): JsType<System.Double>;
                /**
                 * Gets of sets the position of the camera.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Position(): Tuple3D;
                set Position(value: Tuple3D);
                /**
                 * Sets or gets the up direction.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UpDirection(): Tuple3D;
                set UpDirection(value: Tuple3D);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Resets camera to its default position and direction.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Reset(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3639885536: null;
            }
            
            /**
             * Class representing an axis that is always categorical.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CategoricalAxis extends CategoricalAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3202813912: null;
            }
            
            /**
             * Base class for categorical axes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CategoricalAxisBase extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3343204821: null;
            }
            
            /**
             * Class representing a category on an axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CategoryKey extends Object {
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Application.Visuals.CategoryKey} class.
                 * @param parts Values for each level in the hierarchy this CategoryKey refers to.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(...parts: any[]);
                /**
                 * Compares the current object with another object of the same type.
                 * @param other An object to compare with this object.
                 * @returns A 32-bit signed integer that indicates the relative order of the objects being compared. If it is zero, the objects are equal. If it is
                 * less than zero, this object is less than other. If greater than zero, this object is greater than other.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CompareTo(other: CategoryKey): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3521801942: null;
            }
            
            /**
             * Enumeration controlling how a categorical axis responds to filtering.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CategoryMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Show all values. */
                static readonly ShowAll: CategoryMode;
                /** Show filtered values only. Categories that contain no data after filtering will be removed. Most axes have this as default. */
                static readonly ShowFiltered: CategoryMode;
                /** Show filtered range of values. Empty categories at the beginning and end of the scale will be removed. Empty categories in between categories with data are kept. */
                static readonly ShowFilteredRange: CategoryMode;
                private __type_1138841696: null;
            }
            
            /**
             * Struct used to refer to a range of cells.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CellRange extends Object {
                /**
                 * Creates an empty cell range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Empty(): CellRange;
                /**
                 * Gets the number of columns in the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnCount(): JsType<System.Int32>;
                /**
                 * Gets the first column index in the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FirstColumnIndex(): JsType<System.Int32>;
                /**
                 * Gets the first row index in the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FirstRowIndex(): JsType<System.Int32>;
                /**
                 * Gets a value indicating if this is an empty range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsEmpty(): JsType<System.Boolean>;
                /**
                 * Gets the last column index in the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LastColumnIndex(): JsType<System.Int32>;
                /**
                 * Gets the last row index in the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LastRowIndex(): JsType<System.Int32>;
                /**
                 * Gets the number of rows in the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowCount(): JsType<System.Int32>;
                /**
                 * Constructor for a single cell.
                 * @param rowIndex The index of the row.
                 * @param columnIndex The index of the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(rowIndex: (JsType<System.Int32> | System.Int32), columnIndex: (JsType<System.Int32> | System.Int32));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Application.Visuals.CellRange} struct.
                 * @param firstRowIndex The index of the first row.
                 * @param firstColumnIndex The index of the first column.
                 * @param lastRowIndex The index of the last row.
                 * @param lastColumnIndex The index of the last column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(firstRowIndex: (JsType<System.Int32> | System.Int32), firstColumnIndex: (JsType<System.Int32> | System.Int32), lastRowIndex: (JsType<System.Int32> | System.Int32), lastColumnIndex: (JsType<System.Int32> | System.Int32));
                /**
                 * Checks if a row index and a column index is within this range.
                 * @param rowIndex The row index.
                 * @param columnIndex The column index.
                 * @returns true if this range contains the given row and column indexes; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(rowIndex: (JsType<System.Int32> | System.Int32), columnIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4291830892: null;
            }
            
            /**
             * Axis used to define coloring within a visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColorAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the categorical part of this axis. Can be null for axes that do not support categorical expressions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Categorical(): ColorAxis.CategoricalColorAxis;
                /**
                 * Gets a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} object that controls how values are mapped to colors.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Coloring(): ConditionalColoring.Coloring;
                /**
                 * Gets the continuous part of this axis. Can be null for axes that do not support continuous expressions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Continuous(): ColorAxis.ContinuousColorAxis;
                /**
                 * Gets or sets the default color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultColor(): JsType<System.Drawing.Color>;
                set DefaultColor(value: JsType<System.Drawing.Color>);
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendColorItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1486538599: null;
            }
            
            /**
             * The CombinationChart class can render series of data as bars or lines.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CombinationChart extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the properties for bar series.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Bars(): CombinationChartBarProperties;
                /**
                 * Gets the axis that controls how data is split into series with assigned colors.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets or sets a value indicating whether the visualization should inject empty values for missing time series data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CompensateForMissingTimeSeriesValues(): JsType<System.Boolean>;
                set CompensateForMissingTimeSeriesValues(value: JsType<System.Boolean>);
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): CombinationChartDetails;
                /**
                 * Gets the fitting models.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FittingModels(): FittingModels.FittingModelCollection;
                /**
                 * Gets an object that can be used to control the series type of each series.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedSeriesType(): IndexedCombinationChartSeriesType;
                /**
                 * Gets or sets the font used for the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets a value indicating label visibility.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelVisibility(): LabelVisibility;
                set LabelVisibility(value: LabelVisibility);
                /**
                 * Gets the properties for line series.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Lines(): CombinationChartLineProperties;
                /**
                 * Gets or sets a value indicating max number of drawn labels.
                 * Allowed values are 0 to 200.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxNumberOfLabels(): JsType<System.Int32>;
                set MaxNumberOfLabels(value: JsType<System.Int32>);
                /**
                 * Gets the legend item that displays series information.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SeriesLegendItem(): LegendCombinationChartSeriesItem;
                /**
                 * Gets or sets the default series type.
                 * Use the {@link Spotfire.Dxp.Application.Visuals.CombinationChart.IndexedSeriesType |  to modify the series type for each series.}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SeriesType(): CombinationChartSeriesType;
                set SeriesType(value: CombinationChartSeriesType);
                /**
                 * Gets or sets a {@link Spotfire.Dxp.Application.Visuals.CategoryKey} that identifies the series to sort the X axis by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortBy(): CategoryKey;
                set SortBy(value: CategoryKey);
                /**
                 * Gets the X axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): ScaleAxis;
                /**
                 * Gets the Y axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): ScaleAxis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4159049414: null;
            }
            
            /**
             * Class that controls properties for bars in a {@link Spotfire.Dxp.Application.Visuals.CombinationChart}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CombinationChartBarProperties extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether the complete bar shall be
                 * labeled or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelCompleteBar(): JsType<System.Boolean>;
                set LabelCompleteBar(value: JsType<System.Boolean>);
                /**
                 * Gets or sets label orientation of this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelOrientation(): LabelOrientation;
                set LabelOrientation(value: LabelOrientation);
                /**
                 * Gets or sets a value indicating whether segments in stacked bars should be shown in reversed order.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ReverseSegmentOrder(): JsType<System.Boolean>;
                set ReverseSegmentOrder(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the stack mode. Only StackMode.None, and StackMode.Stack are supported.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get StackMode(): StackMode;
                set StackMode(value: StackMode);
                /**
                 * Gets or sets the relative width of the bars.
                 * Allowed values are in the range [0, 100].
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Width(): JsType<System.Single>;
                set Width(value: JsType<System.Single>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3547339386: null;
            }
            
            /**
             * Class representing combination chart detail information, typically displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CombinationChartDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the Color axis of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the X axis of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the Y axis of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2198589164: null;
            }
            
            /**
             * Class that controls properties for line series in a {@link Spotfire.Dxp.Application.Visuals.CombinationChart}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CombinationChartLineProperties extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether the lines break on empty values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BreakOnEmpty(): JsType<System.Boolean>;
                set BreakOnEmpty(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the size of the markers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerSize(): JsType<System.Single>;
                set MarkerSize(value: JsType<System.Single>);
                /**
                 * Gets or sets a value indicating whether marker labels are displayed or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowMarkerLabels(): JsType<System.Boolean>;
                set ShowMarkerLabels(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether markers are displayed or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowMarkers(): JsType<System.Boolean>;
                set ShowMarkers(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether lines are drawn in steps or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SteppedLines(): JsType<System.Boolean>;
                set SteppedLines(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the width of lines.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Width(): JsType<System.Single>;
                set Width(value: JsType<System.Single>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1639517331: null;
            }
            
            /**
             * Enum describing how a series is displayed in a {@link Spotfire.Dxp.Application.Visuals.CombinationChart}
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CombinationChartSeriesType extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Show series as bars. */
                static readonly Bar: CombinationChartSeriesType;
                /** Show series as a line. */
                static readonly Line: CombinationChartSeriesType;
                private __type_1798131139: null;
            }
            
            /**
             * Base class for continuous axes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ContinuousAxisBase extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4166873608: null;
            }
            
            /**
             * The ContinuousScaleType enumeration controls the type of scale (Ratio, Interval).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ContinuousScaleType extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Interval scale. */
                static readonly IntervalScale: ContinuousScaleType;
                /** Ratio scale. */
                static readonly RatioScale: ContinuousScaleType;
                private __type_1434825438: null;
            }
            
            /**
             * Cross table plot class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CrossTablePlot extends Visualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the cell height.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CellHeight(): JsType<System.Int32>;
                set CellHeight(value: JsType<System.Int32>);
                /**
                 * Gets or sets the cell width.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CellWidth(): JsType<System.Int32>;
                set CellWidth(value: JsType<System.Int32>);
                /**
                 * Gets or sets the category defining how color schemes can be applied. The category should be the name of one of the levels
                 * in either the row hierarchy or the column hierarchy. CategoryKey.Empty represents Column Names, presented as "(Cell Values)".
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorCategory(): CategoryKey;
                set ColorCategory(value: CategoryKey);
                /**
                 * Gets the ColoringCollection for this plot. The ColoringCollection contains {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}
                 * objects, and has methods to apply them to parts of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Colorings(): ConditionalColoring.ColoringCollection;
                /**
                 * Gets the column axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnAxis(): CategoricalAxisBase;
                /**
                 * Gets the height of the column headers. This is the headers on the top of the cross table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnHeaderHeights(): CrossTablePlot.HeaderSizeCollection;
                /**
                 * Gets the column axis labels object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnLabels(): ScaleLabels;
                /**
                 * Gets the column subtotals collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnSubtotals(): CrossTableSubtotalCollection;
                /**
                 * Gets or sets a value indicating whether column subtotals should be displayed above or below the values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnSubtotalsLayout(): CrossTableSubtotalsLayout;
                set ColumnSubtotalsLayout(value: CrossTableSubtotalsLayout);
                /**
                 * Gets or sets the text to display when there is no data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EmptyCellText(): JsType<System.String>;
                set EmptyCellText(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether cross table data can be exported in the Web Player.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ExportDataEnabled(): JsType<System.Boolean>;
                set ExportDataEnabled(value: JsType<System.Boolean>);
                /**
                 * Gets the formatting for this cross table plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Formatting(): Formatting;
                /**
                 * Gets or sets a value indicating whether to show an extra empty column for hidden columns when using top N columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndicateHiddenColumns(): JsType<System.Boolean>;
                set IndicateHiddenColumns(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show an extra empty row for hidden rows when using top N rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndicateHiddenRows(): JsType<System.Boolean>;
                set IndicateHiddenRows(value: JsType<System.Boolean>);
                /**
                 * Gets the measure axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MeasureAxis(): ColorAxis;
                /**
                 * Gets the row axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowAxis(): CategoricalAxisBase;
                /**
                 * Gets or sets the row header horizontal scroll behavior.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowHeaderScroll(): TableHeaderScrollBehavior;
                set RowHeaderScroll(value: TableHeaderScrollBehavior);
                /**
                 * Gets the width of the row headers. This is the headers to the left of the cross table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowHeaderWidths(): CrossTablePlot.HeaderSizeCollection;
                /**
                 * Gets the row axis labels object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowLabels(): ScaleLabels;
                /**
                 * Gets or sets a value indicating whether to show axis selectors.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowAxisSelectors(): JsType<System.Boolean>;
                set ShowAxisSelectors(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show column grand total.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowColumnGrandTotal(): JsType<System.Boolean>;
                set ShowColumnGrandTotal(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to use continuous coloring for numeric cells.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowContinuousColor(): JsType<System.Boolean>;
                set ShowContinuousColor(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show gridlines.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowGridlines(): JsType<System.Boolean>;
                set ShowGridlines(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show row grand total.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowRowGrandTotal(): JsType<System.Boolean>;
                set ShowRowGrandTotal(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether top N columns should be activated.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowTopNColumns(): JsType<System.Boolean>;
                set ShowTopNColumns(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether top N rows should be activated.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowTopNRows(): JsType<System.Boolean>;
                set ShowTopNRows(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a category key for sorting the columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortColumnsCategory(): CategoryKey;
                set SortColumnsCategory(value: CategoryKey);
                /**
                 * Gets or sets the direction of sort when sorting columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortColumnsOrder(): Data.SortOrder;
                set SortColumnsOrder(value: Data.SortOrder);
                /**
                 * Gets or sets a category key for sorting the rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortRowsCategory(): CategoryKey;
                set SortRowsCategory(value: CategoryKey);
                /**
                 * Gets or sets the sort mode used when sorting rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortRowsMode(): CrossTablePlot.SortMode;
                set SortRowsMode(value: CrossTablePlot.SortMode);
                /**
                 * Gets or sets the direction of sort when sorting rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortRowsOrder(): Data.SortOrder;
                set SortRowsOrder(value: Data.SortOrder);
                /**
                 * Gets or sets the table font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableFontMetadata(): Framework.Styles.FontMetadata;
                set TableFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets the table header font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableHeaderFontMetadata(): Framework.Styles.FontMetadata;
                set TableHeaderFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets the font for subtotals and grand total in the table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableTotalsFontMetadata(): Framework.Styles.FontMetadata;
                set TableTotalsFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets top N column count.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TopNColumnCount(): JsType<System.Int32>;
                set TopNColumnCount(value: JsType<System.Int32>);
                /**
                 * Gets or sets the top N row count.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TopNRowCount(): JsType<System.Int32>;
                set TopNRowCount(value: JsType<System.Int32>);
                /**
                 * Gets the totals definition.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Totals(): CrossTableTotals;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a layout object that can be used to access the values in the table.
                 * @returns A {@link Spotfire.Dxp.Application.Visuals.TableLayout} object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CreateLayout(): TableLayout;
                /**
                 * Exports the content of the cross table as tab separated text.
                 * @param writer The text writer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExportText(writer: (JsType<System.IO.TextWriter> | System.IO.TextWriter)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3871956604: null;
            }
            
            /**
             * Represents a cross table subtotal.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CrossTableSubtotal extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether the subtotal should be visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1956977691: null;
            }
            
            /**
             * Represents a collection of cross table subtotals.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CrossTableSubtotalCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<CrossTableSubtotal>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of subtotals in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<CrossTableSubtotal>;
                /**
                 * Hides all subtotals.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                HideAll(): void;
                /**
                 * Shows all subtotals.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ShowAll(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<CrossTableSubtotal>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.CrossTableSubtotal} with the specified level name.
                 * @param levelName The subtotal level name.
                 * @returns The value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.String> | System.String), CrossTableSubtotal>;
                private __type_3544612297: null;
            }
            
            /**
             * Enum to represent how column subtotals will be displayed in the cross table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CrossTableSubtotalsLayout extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Show column subtotals after the axis values. */
                static readonly After: CrossTableSubtotalsLayout;
                /** Show column subtotals before the axis values. */
                static readonly Before: CrossTableSubtotalsLayout;
                private __type_2569158318: null;
            }
            
            /**
             * Responsible for Cross Table Totals settings.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CrossTableTotals extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the default calculation mode for how to calculate totals.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultCalculationMode(): CrossTableTotals.CalculationMode;
                set DefaultCalculationMode(value: CrossTableTotals.CalculationMode);
                /**
                 * Gets the indexed totals calculation mode for an expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedTotalsCalculationMode(): IndexedTotalsCalculationMode;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_486271764: null;
            }
            
            /**
             * Represents a subset based on a data selection.
             * This class is instantiated by the {@link Spotfire.Dxp.Application.Visuals.VisualizationSubsetCollection.AddDataSelection|AddDataSelection} method on {@link Spotfire.Dxp.Application.Visuals.VisualizationSubsetCollection}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataSelectionVisualizationSubset extends VisualizationSubset implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the data selection to use. This is either a {@link Spotfire.Dxp.Data.DataFilteringSelection} or {@link Spotfire.Dxp.Data.DataMarkingSelection}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SelectionReference(): Data.DataSelection;
                set SelectionReference(value: Data.DataSelection);
                /**
                 * Gets or sets a value indicating whether to show the complement of the subset or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowComplement(): JsType<System.Boolean>;
                set ShowComplement(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3247176025: null;
            }
            
            /**
             * Represents one of the default subsets in a visualization. Objects of this class cannot be directly instantiated,
             * but they can be accessed through one of the following properties on {@link Spotfire.Dxp.Application.Visuals.VisualizationSubsetCollection}:
             * {@link Spotfire.Dxp.Application.Visuals.VisualizationSubsetCollection.Default}, {@link Spotfire.Dxp.Application.Visuals.VisualizationSubsetCollection.DefaultComplement}, {@link Spotfire.Dxp.Application.Visuals.VisualizationSubsetCollection.All}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DefaultVisualizationSubset extends VisualizationSubset implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1987279582: null;
            }
            
            /**
             * Represents the dendrogram and hierarchical clustering settings used in the {@link Spotfire.Dxp.Application.Visuals.HeatMap}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Dendrogram extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the clustering settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ClusteringSettings(): Data.Computations.Clustering.HierarchicalClusteringSettings;
                set ClusteringSettings(value: Data.Computations.Clustering.HierarchicalClusteringSettings);
                /**
                 * Gets or sets the data table reference.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableReference(): Data.DataTable;
                set DataTableReference(value: Data.DataTable);
                /**
                 * Gets or sets the docking of the dendrogram area.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Dock(): ScaleDock;
                set Dock(value: ScaleDock);
                /**
                 * Gets or sets the empty value replacement.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EmptyValueReplacement(): HeatMapEmptyValueReplacement;
                set EmptyValueReplacement(value: HeatMapEmptyValueReplacement);
                /**
                 * Gets the dendrogram legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): DendrogramLegendItem;
                /**
                 * Gets or sets a value indicating whether clustering needs to be manually updated.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ManualUpdate(): JsType<System.Boolean>;
                set ManualUpdate(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the normalization. The normalization may be set to null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Normalization(): HeatMapNormalization;
                set Normalization(value: HeatMapNormalization);
                /**
                 * Gets or sets the first of two alternating colors used to indicate
                 * clusters in the dendrogram.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PruningColorA(): JsType<System.Drawing.Color>;
                set PruningColorA(value: JsType<System.Drawing.Color>);
                /**
                 * Gets or sets the second of two alternating colors used to indicate
                 * clusters in the dendrogram.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PruningColorB(): JsType<System.Drawing.Color>;
                set PruningColorB(value: JsType<System.Drawing.Color>);
                /**
                 * Gets or sets the pruning level for the dendrogram. This is the minimum number of values in the prune column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PruningLevel(): JsType<System.Int32>;
                set PruningLevel(value: JsType<System.Int32>);
                /**
                 * Gets or sets the color used for drawing the pruning line in
                 * the dendrogram.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PruningLineColor(): JsType<System.Drawing.Color>;
                set PruningLineColor(value: JsType<System.Drawing.Color>);
                /**
                 * Gets or sets a value indicating whether the pruning line is visible in the dendrogram.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowPruningLine(): JsType<System.Boolean>;
                set ShowPruningLine(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the span of the dendrogram area.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Span(): JsType<System.Single>;
                set Span(value: JsType<System.Single>);
                /**
                 * Gets or sets a value indicating whether or not to use the {@link Spotfire.Dxp.Data.DataTable} in {@link Spotfire.Dxp.Application.Visuals.Dendrogram.DataTableReference} as dendrogram.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UseDataTable(): JsType<System.Boolean>;
                set UseDataTable(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show dendrogram.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Return the dendrogram data as a {@link Spotfire.Dxp.Data.DataRowReader}.
                 * @returns A {@link Spotfire.Dxp.Data.DataRowReader} containing the dendrogram data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetData(): Data.DataRowReader;
                /**
                 * Updates the row clustering.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Update(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2124461014: null;
            }
            
            /**
             * Represents the legend information for a {@link Spotfire.Dxp.Application.Visuals.DendrogramLegendItem.Dendrogram} in the {@link Spotfire.Dxp.Application.Visuals.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DendrogramLegendItem extends LegendTextItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the text contained in this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Text(): JsType<System.String>;
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1555485168: null;
            }
            
            /**
             * Base class for detail items.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DetailItem extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a string value describing this item to be used in the user interface.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.DetailItem} is visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3237673097: null;
            }
            
            /**
             * A collection of parts that build up detail (tooltip) information.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DetailItemCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DetailItem>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of items in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<DetailItem>;
                /**
                 * Adds a detail item based on an expression.
                 * @param expression The expression.
                 * @returns An {@link Spotfire.Dxp.Application.Visuals.ExpressionDetailItem}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddExpression(expression: (JsType<System.String> | System.String)): ExpressionDetailItem;
                /**
                 * Determines the index of a specific item.
                 * @param item The object to locate.
                 * @returns The index of item if found in the collection; otherwise, -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(item: DetailItem): JsType<System.Int32>;
                /**
                 * Inserts a detail item based on an expression.
                 * @param index Index to insert at.
                 * @param expression The expression.
                 * @returns An {@link Spotfire.Dxp.Application.Visuals.ExpressionDetailItem}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                InsertExpression(index: (JsType<System.Int32> | System.Int32), expression: (JsType<System.String> | System.String)): ExpressionDetailItem;
                /**
                 * Moves the item at the specified index to a new location in the collection
                 * @param oldIndex The zero-based index specifying the location of the item to be moved.
                 * @param newIndex The zero-based index specifying the new location of the item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Move(oldIndex: (JsType<System.Int32> | System.Int32), newIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the specified item from the collection.
                 * @param item The item.
                 * @returns True if the item was succesfully removed. False if the item could not be removed or
                 * if it could not be found in the collection
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: DetailItem): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DetailItem>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.DetailItem} at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), DetailItem>;
                private __type_2281650587: null;
            }
            
            /**
             * The Details class is used to display marker details (tooltips) in a plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Details extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the display mode.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayMode(): DetailsDisplayMode;
                set DisplayMode(value: DetailsDisplayMode);
                /**
                 * Gets a {@link Spotfire.Dxp.Application.Visuals.DetailItemCollection} containing
                 * the parts that build up detail (tooltip) information.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Items(): DetailItemCollection;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4011793931: null;
            }
            
            /**
             * This enumeration specifies whether the details (tooltips) display the name of the columns/expressions
             * they are based upon, or the property in the plot they represent.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DetailsDisplayMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Displays the underlying column name or expression, for instance "SUM(Sales)". */
                static readonly ColumnNames: DetailsDisplayMode;
                /** Displays the plot property names, for instance "X" or "Y". */
                static readonly PropertyNames: DetailsDisplayMode;
                private __type_2258805432: null;
            }
            
            /**
             * Represents Error Bars on a {@link Spotfire.Dxp.Application.Visuals.ScaleAxis}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ErrorBars extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets whether or not the error bars are enabled.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Enabled(): JsType<System.Boolean>;
                set Enabled(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the fixed color used for drawing error bars when
                 * {@link Spotfire.Dxp.Application.Visuals.ErrorBars.UseMarkerColor} is false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FixedColor(): JsType<System.Drawing.Color>;
                set FixedColor(value: JsType<System.Drawing.Color>);
                /**
                 * Gets or sets whether or not the error bars should be
                 * included in the axis range of the visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IncludeInAxisRange(): JsType<System.Boolean>;
                set IncludeInAxisRange(value: JsType<System.Boolean>);
                /**
                 * Gets the indexed enabled property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedEnabled(): IndexedBool;
                /**
                 * Gets the indexed Lower Expression property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedLowerExpression(): IndexedExpression;
                /**
                 * Gets the indexed Upper Expression property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedUpperExpression(): IndexedExpression;
                /**
                 * Gets a reference to the corresponding legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItemReference(): LegendErrorBarsItem;
                /**
                 * Gets or sets the expression used to define the
                 * lower error of the error bar.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LowerExpression(): JsType<System.String>;
                set LowerExpression(value: JsType<System.String>);
                /**
                 * Gets or sets whether or not the error bars should be drawn
                 * using end caps.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowEndCaps(): JsType<System.Boolean>;
                set ShowEndCaps(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the expression used to define the
                 * upper error of the error bar.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UpperExpression(): JsType<System.String>;
                set UpperExpression(value: JsType<System.String>);
                /**
                 * Gets or sets whether to use marker colors when
                 * drawing error bars.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UseMarkerColor(): JsType<System.Boolean>;
                set UseMarkerColor(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3528170927: null;
            }
            
            /**
             * ExpressionColumn class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExpressionColumn extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the Expression defining the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                set Expression(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2871022561: null;
            }
            
            /**
             * Represents a marker detail (tooltip) based on an expression.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExpressionDetailItem extends DetailItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the string value describing this item to be used in the user interface. */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets or sets the expression string used to generate the output for this detail (tooltip) item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                set Expression(value: JsType<System.String>);
                /**
                 * Gets or sets the image size of this detail item. The size is only used when the value renderer produces images.
                 * Allowed values are 1-1600 pixels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ImageSize(): JsType<System.Single>;
                set ImageSize(value: JsType<System.Single>);
                /**
                 * Gets the settings for the value renderer used for this detail item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ValueRenderer(): ValueRenderers.ValueRendererSettings;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Sets the renderer for the detail (tooltip) item.
                 * @param typeId The type id of the renderer to use.
                 * @returns The renderer settings associated with the type id.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetValueRenderer(typeId: Framework.DocumentModel.TypeIdentifier): ValueRenderers.ValueRendererSettings;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3424885979: null;
            }
            
            /**
             * Represents an expression condition in a conditional rule.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExpressionRuleCondition extends RuleCondition implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the expression for this rule.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                set Expression(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3276274596: null;
            }
            
            /**
             * Represents a rule that uses a boolean condition to determine the visibility of visualization items.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterRule extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the displayname that is used for this Rule. It will either be equal to ManualDisplayName or (when that is null)
                 * it will be an auto-generated string. This display name is suitable for use in the property pages, but not in the legend
                 * (since it shows the definition, rather than the value)
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.FilterRule} is enabled.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Enabled(): JsType<System.Boolean>;
                set Enabled(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.FilterRule} should be evaluated per trellis or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EvaluatePerTrellis(): JsType<System.Boolean>;
                set EvaluatePerTrellis(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the expression this rule is evaluated on.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                set Expression(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether this rule shows or hides matched items.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HideMatchedItems(): JsType<System.Boolean>;
                set HideMatchedItems(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the display name. If set to null, the Rule will be
                 * represented with an auto-generated name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ManualDisplayName(): JsType<System.String>;
                set ManualDisplayName(value: JsType<System.String>);
                /**
                 * Gets the rule condition.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RuleCondition(): RuleCondition;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_629794083: null;
            }
            
            /**
             * Represents a list of rules in a {@link Spotfire.Dxp.Application.Visuals.Visualization} that are used to filter visualization items.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterRuleCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, System.Collections.IEnumerable, Explicit<System.Collections.Generic.IEnumerable<FilterRule>> {
                /**
                 * Gets the count.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<FilterRule>;
                /**
                 * Adds a bottom N rule to the end of the collection.
                 * @param expression The expression.
                 * @param rank An integer specifying the rank of the added rule.
                 * @param hideMatchedItems Should matched elements be filtered out or in?
                 * @returns The rule that was added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddBottomNRule(expression: (JsType<System.String> | System.String), rank: (JsType<System.Int32> | System.Int32), hideMatchedItems: (JsType<System.Boolean> | System.Boolean)): FilterRule;
                /**
                 * Adds a bottom N rule to the end of the collection.
                 * @param expression The expression.
                 * @param value A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}, that has to evaluate to an integer.
                 * @param hideMatchedItems Should matched elements be filtered out or in?
                 * @returns The rule that was added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddBottomNRule(expression: (JsType<System.String> | System.String), value: ConditionalColoring.ConditionValue, hideMatchedItems: (JsType<System.Boolean> | System.Boolean)): FilterRule;
                /**
                 * Adds a new expression rule to the end of the collection.
                 * @param expression The expression.
                 * @param booleanExpression The boolean expression.
                 * @param hideMatchedItems Should matched elements be filtered out or in?
                 * @returns The rule that was added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddExpressionRule(expression: (JsType<System.String> | System.String), booleanExpression: (JsType<System.String> | System.String), hideMatchedItems: (JsType<System.Boolean> | System.Boolean)): FilterRule;
                /**
                 * Adds a range rule to the end of the collection.
                 * @param expression The expression.
                 * @param startValue The start value.
                 * @param endValue The end value.
                 * @param hideMatchedItems Should matched elements be filtered out or in?
                 * @returns The rule that was added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddRangeRule(expression: (JsType<System.String> | System.String), startValue: ConditionalColoring.ConditionValue, endValue: ConditionalColoring.ConditionValue, hideMatchedItems: (JsType<System.Boolean> | System.Boolean)): FilterRule;
                /**
                 * Adds a string rule to the end of the collection.
                 * @param expression The expression.
                 * @param comparisonOperator The comparison operator.
                 * @param value The value.
                 * @param hideMatchedItems Should matched elements be filtered out or in?
                 * @returns The rule that was added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddStringRule(expression: (JsType<System.String> | System.String), comparisonOperator: ConditionalColoring.StringComparisonOperator, value: ConditionalColoring.ConditionValue, hideMatchedItems: (JsType<System.Boolean> | System.Boolean)): FilterRule;
                /**
                 * Adds a threshold rule to the end of the collection.
                 * @param expression The expression.
                 * @param comparisonOperator The comparison operator.
                 * @param value The threshold value.
                 * @param hideMatchedItems Should matched elements be filtered out or in?
                 * @returns The rule that was added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddThresholdRule(expression: (JsType<System.String> | System.String), comparisonOperator: ConditionalColoring.RuleComparisonOperator, value: ConditionalColoring.ConditionValue, hideMatchedItems: (JsType<System.Boolean> | System.Boolean)): FilterRule;
                /**
                 * Adds a top N rule to the end of the collection.
                 * @param expression The expression.
                 * @param rank An integer specifying the rank of the added rule.
                 * @param hideMatchedItems Should matched elements be filtered out or in?
                 * @returns The rule that was added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddTopNRule(expression: (JsType<System.String> | System.String), rank: (JsType<System.Int32> | System.Int32), hideMatchedItems: (JsType<System.Boolean> | System.Boolean)): FilterRule;
                /**
                 * Adds a top N rule to the end of the collection.
                 * @param expression The expression.
                 * @param value A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}, that has to evaluate to an integer.
                 * @param hideMatchedItems Should matched elements be filtered out or in?
                 * @returns The rule that was added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddTopNRule(expression: (JsType<System.String> | System.String), value: ConditionalColoring.ConditionValue, hideMatchedItems: (JsType<System.Boolean> | System.Boolean)): FilterRule;
                /**
                 * Clears this collection, removing all filter rules.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines whether the collection contains a specified rule.
                 * @param rule The rule to locate in the collection.
                 * @returns True if the collection contains the specified rule; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(rule: FilterRule): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through a collection.
                 * @returns An {@link System.Collections.IEnumerator} object that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): JsType<System.Collections.IEnumerator>;
                /**
                 * Determines the index of a specific rule in the collection.
                 * @param rule The rule to locate in the collection.
                 * @returns The index of the rule if found in the list; otherwise, -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(rule: FilterRule): JsType<System.Int32>;
                /**
                 * Moves a rule at the specified index to another location in the collection.
                 * @param fromIndex The zero-based index specifying the location of the item to be moved.
                 * @param toIndex The zero-based index specifying the new location of the item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the specified rule from the collection.
                 * @param rule The rule to remove.
                 * @returns True if the rule was removed; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(rule: FilterRule): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<FilterRule>>,
                };
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.FilterRule} at the specified index. Includes all filter rules even disabled filter rules.
                 * @param index The index.
                 * @returns The {@link Spotfire.Dxp.Application.Visuals.FilterRule} at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), FilterRule>;
                private __type_2271802217: null;
            }
            
            /**
             * Represents formatting settings to be used when rendered. The settings can contain
             * formatters for between 0 and 8 data types, namely Integer, Real, Currency, DateTime, LongInteger,
             * SingleReal, TimeSpan and Boolean.
             * In addition, for each data type a specific formatter can be set for a category or column,
             * specified by a {@link Spotfire.Dxp.Application.Visuals.CategoryKey}. This is referred to as "indexed".
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Formatting extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Application.Visuals.Formatting.TimeSpanFormatter} used for the data type TimeSpan.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BooleanFormatter(): Data.Formatters.BooleanFormatter;
                set BooleanFormatter(value: Data.Formatters.BooleanFormatter);
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type Currency.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CurrencyFormatter(): Data.Formatters.NumberFormatter;
                set CurrencyFormatter(value: Data.Formatters.NumberFormatter);
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Application.Visuals.Formatting.DateTimeFormatter} used for the data types Date, Time and DateTime.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DateTimeFormatter(): Data.Formatters.DateTimeFormatter;
                set DateTimeFormatter(value: Data.Formatters.DateTimeFormatter);
                /**
                 * Gets the indexed {@link Spotfire.Dxp.Application.Visuals.Formatting.BooleanFormatter} used for the data type Boolean.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedBooleanFormatter(): IndexedFormatter<Data.Formatters.BooleanFormatter>;
                /**
                 * Gets the indexed {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type Currency.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedCurrencyFormatter(): IndexedFormatter<Data.Formatters.NumberFormatter>;
                /**
                 * Gets the indexed {@link Spotfire.Dxp.Application.Visuals.Formatting.DateTimeFormatter} used for the data types Date, Time and DateTime.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedDateTimeFormatter(): IndexedFormatter<Data.Formatters.DateTimeFormatter>;
                /**
                 * Gets the indexed {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type Integer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedIntegerFormatter(): IndexedFormatter<Data.Formatters.NumberFormatter>;
                /**
                 * Gets the indexed {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type LongInteger.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedLongIntegerFormatter(): IndexedFormatter<Data.Formatters.NumberFormatter>;
                /**
                 * Gets the indexed {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type Real.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedRealFormatter(): IndexedFormatter<Data.Formatters.NumberFormatter>;
                /**
                 * Gets the indexed {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type SingleReal.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedSingleRealFormatter(): IndexedFormatter<Data.Formatters.NumberFormatter>;
                /**
                 * Gets the indexed {@link Spotfire.Dxp.Application.Visuals.Formatting.TimeSpanFormatter} used for the data type TimeSpan.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedTimeSpanFormatter(): IndexedFormatter<Data.Formatters.TimeSpanFormatter>;
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type Integer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IntegerFormatter(): Data.Formatters.NumberFormatter;
                set IntegerFormatter(value: Data.Formatters.NumberFormatter);
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type LongInteger.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LongIntegerFormatter(): Data.Formatters.NumberFormatter;
                set LongIntegerFormatter(value: Data.Formatters.NumberFormatter);
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type Real.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RealFormatter(): Data.Formatters.NumberFormatter;
                set RealFormatter(value: Data.Formatters.NumberFormatter);
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.Formatters.NumberFormatter} used for the data type SingleReal.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SingleRealFormatter(): Data.Formatters.NumberFormatter;
                set SingleRealFormatter(value: Data.Formatters.NumberFormatter);
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Application.Visuals.Formatting.TimeSpanFormatter} used for the data type TimeSpan.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TimeSpanFormatter(): Data.Formatters.TimeSpanFormatter;
                set TimeSpanFormatter(value: Data.Formatters.TimeSpanFormatter);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all formatting settings for all data types, non-indexed as well as indexed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4120607796: null;
            }
            
            /**
             * GroupByAxis class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class GroupByAxis extends CategoricalAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendGroupByItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_135305070: null;
            }
            
            /**
             * HeatMap class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMap extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the category defining how color schemes can be applied. The category should be the name of one of the levels
                 * in either the row hierarchy or the column hierarchy. CategoryKey.Empty represents Column Names, presented as "(Cell Values)".
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorCategory(): CategoryKey;
                set ColorCategory(value: CategoryKey);
                /**
                 * Gets the ColoringCollection for this plot. The ColoringCollection contains {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}
                 * objects, and has methods to apply them to parts of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Colorings(): ConditionalColoring.ColoringCollection;
                /**
                 * Gets the column clustering and dendrogram.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnDendrogram(): Dendrogram;
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): HeatMapDetails;
                /**
                 * Gets the measure axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MeasureAxis(): HeatMapMeasureAxis;
                /**
                 * Gets the row clustering and dendrogram.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowDendrogram(): Dendrogram;
                /**
                 * Gets or sets the measure to sort by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortBy(): CategoryKey;
                set SortBy(value: CategoryKey);
                /**
                 * Gets or sets the sort order.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortOrder(): Data.SortOrder;
                set SortOrder(value: Data.SortOrder);
                /**
                 * Gets the X axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): ScaleAxis;
                /**
                 * Gets the Y axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): ScaleAxis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1032960997: null;
            }
            
            /**
             * Class representing heat map detail information, typically displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the XAxis of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the YAxis of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3895383575: null;
            }
            
            /**
             * Base class for {@link Spotfire.Dxp.Application.Visuals.HeatMap} empty value replacements.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapEmptyValueReplacement extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a column average empty value replacement.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapEmptyValueReplacementColumnAverage} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateColumnAverageEmptyValueReplacement(): HeatMapEmptyValueReplacementColumnAverage;
                /**
                 * Creates a constant empty value replacement.
                 * @param constantValue The constant value.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapEmptyValueReplacementConstant} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateConstantEmptyValueReplacement(constantValue: (JsType<System.Double> | System.Double)): HeatMapEmptyValueReplacementConstant;
                /**
                 * Creates a row average empty value replacement.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapEmptyValueReplacementRowAverage} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateRowAverageEmptyValueReplacement(): HeatMapEmptyValueReplacementRowAverage;
                /**
                 * Creates a row interpolation empty value replacement.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapEmptyValueReplacementRowInterpolation} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateRowInterpolationEmptyValueReplacement(): HeatMapEmptyValueReplacementRowInterpolation;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_670806485: null;
            }
            
            /**
             * Represents a column average empty value replacement.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapEmptyValueReplacementColumnAverage extends HeatMapEmptyValueReplacement {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2906898006: null;
            }
            
            /**
             * Represents a constant value replacement.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapEmptyValueReplacementConstant extends HeatMapEmptyValueReplacement {
                /**
                 * Gets the constant value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Value(): JsType<System.Double>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_972111619: null;
            }
            
            /**
             * Represents a row average empty value replacement.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapEmptyValueReplacementRowAverage extends HeatMapEmptyValueReplacement {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2548501714: null;
            }
            
            /**
             * Represents a row interpolation empty value replacement.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapEmptyValueReplacementRowInterpolation extends HeatMapEmptyValueReplacement {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3879792609: null;
            }
            
            /**
             * Axis used to define heat map measures.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapMeasureAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether the heat map measure
                 * axis selector should be shown.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowAxisSelector(): JsType<System.Boolean>;
                set ShowAxisSelector(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_577226126: null;
            }
            
            /**
             * Base class for {@link Spotfire.Dxp.Application.Visuals.HeatMap} normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalization extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a Mean normalization.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapNormalizationMean} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateMeanNormalization(): HeatMapNormalizationMean;
                /**
                 * Creates a Percentile normalization.
                 * @param percentage The percentage.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapNormalizationPercentile} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreatePercentileNormalization(percentage: (JsType<System.Double> | System.Double)): HeatMapNormalizationPercentile;
                /**
                 * Creates a scale between 0 and 1 normalization.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapNormalizationScaleBetween0And1} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateScaleBetween0And1Normalization(): HeatMapNormalizationScaleBetween0And1;
                /**
                 * Creates a Standard Deviation normalization.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapNormalizationStandardDeviation} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateStandardDeviationNormalization(): HeatMapNormalizationStandardDeviation;
                /**
                 * Creates a Subtract Mean normalization.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapNormalizationSubtractMean} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateSubtractMeanNormalization(): HeatMapNormalizationSubtractMean;
                /**
                 * Creates a Subtract Median normalization.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapNormalizationSubtractMedian} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateSubtractMedianNormalization(): HeatMapNormalizationSubtractMedian;
                /**
                 * Creates the Trimmed Mean normalization.
                 * @param percentage The percentage.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapNormalizationTrimmedMean} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateTrimmedMeanNormalization(percentage: (JsType<System.Double> | System.Double)): HeatMapNormalizationTrimmedMean;
                /**
                 * Creates a Z score calculation normalization.
                 * @returns A new {@link Spotfire.Dxp.Application.Visuals.HeatMapNormalizationZScoreCalculation} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateZScoreCalculationNormalization(): HeatMapNormalizationZScoreCalculation;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3352096154: null;
            }
            
            /**
             * Represents a Mean normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalizationMean extends HeatMapNormalization {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_106114347: null;
            }
            
            /**
             * Represents a Percentile normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalizationPercentile extends HeatMapNormalization {
                /**
                 * Gets the percentage.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Percentage(): JsType<System.Double>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_72968779: null;
            }
            
            /**
             * Represents a Scale between 0 and 1 normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalizationScaleBetween0And1 extends HeatMapNormalization {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2430088: null;
            }
            
            /**
             * Represents a Standard Deviation normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalizationStandardDeviation extends HeatMapNormalization {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1995664370: null;
            }
            
            /**
             * Represents a Subtract Mean normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalizationSubtractMean extends HeatMapNormalization {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1641417791: null;
            }
            
            /**
             * Represents a Subtract Median normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalizationSubtractMedian extends HeatMapNormalization {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_617405060: null;
            }
            
            /**
             * Represents a Trimmed Mean normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalizationTrimmedMean extends HeatMapNormalization {
                /**
                 * Gets the percentage.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Percentage(): JsType<System.Double>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1621967097: null;
            }
            
            /**
             * Represents a Z Score Calculation normalization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HeatMapNormalizationZScoreCalculation extends HeatMapNormalization {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_134771611: null;
            }
            
            /**
             * Represents the alignment of the content in the horizontal legend.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HorizontalAlignment extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * The content is aligned in the center.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Center: HorizontalAlignment;
                /**
                 * The content is aligned to the left.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Left: HorizontalAlignment;
                /**
                 * The content is aligned to the right.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Right: HorizontalAlignment;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_394697088: null;
            }
            
            /**
             * Representation of a horizontal legend.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HorizontalLegend extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the horizontal alignment of the contents of the legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ContentAlignment(): HorizontalAlignment;
                set ContentAlignment(value: HorizontalAlignment);
                /**
                 * Gets or sets the docking of this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Dock(): HorizontalLegendDock;
                set Dock(value: HorizontalLegendDock);
                /**
                 * Gets or sets the height of the horizontal legend.
                 * The height is specified as the number of rows showing legend values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowCount(): JsType<System.Int32>;
                set RowCount(value: JsType<System.Int32>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3856019926: null;
            }
            
            /**
             * Represents the horizontal legend docking placement.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HorizontalLegendDock extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * The legend is docked to the bottom.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Bottom: HorizontalLegendDock;
                /**
                 * The legend is docked to the top.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Top: HorizontalLegendDock;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2485884993: null;
            }
            
            /**
             * Representation of a text area that stores its content as HTML. The text area
             * can visualize text and images using standard tags. Use this visualization
             * as a component when creating a guided analysis.
             * 
             * The text area holds a collection of images that can be referenced from the HTML
             * content with the key used in the collection as source attribute on the image tags.
             * The Internet Explorer based view in the Professional client does not support
             * transparent PNG images.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class HtmlTextArea extends VisualContent implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the HTML content. The HTML should only contain
                 * markup that would fit inside the body tag of a complete document.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HtmlContent(): (JsType<System.String> | null);
                set HtmlContent(value: (JsType<System.String> | null));
                /**
                 * Gets the collection of images.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Images(): ImageCollection;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4099757836: null;
            }
            
            /**
             * Indexed property of the type AxisRange.
             * An indexed property gives finer grained control of some settings of a visualization
             * when {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScaling} is set to true.
             * How to index an indexed property depends on the value
             * of {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode}.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Color} then indexed properties are indexed using values
             * from the color axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Trellis} then indexed properties are indexed using values
             * from the applicable trellis axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Dual} then most indexed properties are indexed using values
             * from {@link Spotfire.Dxp.Application.Visuals.ScaleDock}. However, {@link Spotfire.Dxp.Application.Visuals.Scale.IndexedDock} is indexed using values from the color axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedAxisRange extends Object {
                /**
                 * Get or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): AxisRange;
                set RootValue(value: AxisRange);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param key The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param keys The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, AxisRange> & PropertySet<TypedArray<System.Object>, AxisRange>) & PropertyGet<CategoryKey, AxisRange>) & PropertySet<CategoryKey, AxisRange>);
                private __type_2650436890: null;
            }
            
            /**
             * Indexed property of the type AxisTransformType.
             * An indexed property gives finer grained control of some settings of a visualization
             * when {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScaling} is set to true.
             * How to index an indexed property depends on the value
             * of {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode}.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Color} then indexed properties are indexed using values
             * from the color axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Trellis} then indexed properties are indexed using values
             * from the applicable trellis axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Dual} then most indexed properties are indexed using values
             * from {@link Spotfire.Dxp.Application.Visuals.ScaleDock}. However, {@link Spotfire.Dxp.Application.Visuals.Scale.IndexedDock} is indexed using values from the color axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedAxisTransformType extends Object {
                /**
                 * Get or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): AxisTransformType;
                set RootValue(value: AxisTransformType);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Checks if the key exists in the indexed property.
                 * @param key The key.
                 * @returns true if the the key exists; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Checks if the key exists in the indexed property. The key is represented
                 * by an object array.
                 * @param keys The key represented by an object array.
                 * @returns true if the the key exists; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, AxisTransformType> & PropertySet<TypedArray<System.Object>, AxisTransformType>) & PropertyGet<CategoryKey, AxisTransformType>) & PropertySet<CategoryKey, AxisTransformType>);
                private __type_1884634333: null;
            }
            
            /**
             * Indexed property of the type bool.
             * An indexed property gives finer grained control of some settings of a visualization
             * when {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScaling} is set to true.
             * How to index an indexed property depends on the value
             * of {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode}.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Color} then indexed properties are indexed using values
             * from the color axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Trellis} then indexed properties are indexed using values
             * from the applicable trellis axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Dual} then most indexed properties are indexed using values
             * from {@link Spotfire.Dxp.Application.Visuals.ScaleDock}. However, {@link Spotfire.Dxp.Application.Visuals.Scale.IndexedDock} is indexed using values from the color axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedBool extends Object {
                /**
                 * Get or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): JsType<System.Boolean>;
                set RootValue(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param key The key.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param keys The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, JsType<System.Boolean>> & PropertySet<TypedArray<System.Object>, (JsType<System.Boolean> | System.Boolean)>) & PropertyGet<CategoryKey, JsType<System.Boolean>>) & PropertySet<CategoryKey, (JsType<System.Boolean> | System.Boolean)>);
                private __type_3737751244: null;
            }
            
            /**
             * Indexed property of the type CombinationChartSeriesType.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedCombinationChartSeriesType extends Object {
                /**
                 * Gets or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): CombinationChartSeriesType;
                set RootValue(value: CombinationChartSeriesType);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Checks if the key exists in the indexed property.
                 * @param key The key to look for.
                 * @returns true if the the key exists; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Checks if the key exists in the indexed property. The key is represented
                 * by an object array.
                 * @param keys The key represented by an object array.
                 * @returns true if the the key exists; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key to index by.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, CombinationChartSeriesType> & PropertySet<TypedArray<System.Object>, CombinationChartSeriesType>) & PropertyGet<CategoryKey, CombinationChartSeriesType>) & PropertySet<CategoryKey, CombinationChartSeriesType>);
                private __type_2934561008: null;
            }
            
            /**
             * Indexed property of Expression
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedExpression extends Object {
                /**
                 * Get or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): JsType<System.String>;
                set RootValue(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param key The key.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param keys The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, JsType<System.String>> & PropertySet<TypedArray<System.Object>, (JsType<System.String> | System.String)>) & PropertyGet<CategoryKey, JsType<System.String>>) & PropertySet<CategoryKey, (JsType<System.String> | System.String)>);
                private __type_2237067934: null;
            }
            
            /**
             * Represents several {@link Spotfire.Dxp.Data.Formatters.DataFormatterBase} instances
             * split up by a category or column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedFormatter<T extends Data.Formatters.DataFormatterBase> extends Object {
                /**
                 * Gets all categories in this {@link Spotfire.Dxp.Application.Visuals.IndexedFormatter}, including
                 * the always present {@link Spotfire.Dxp.Application.Visuals.CategoryKey.Empty}.
                 * {@link Spotfire.Dxp.Application.Visuals.CategoryKey.Empty} is the same object as the non-indexed
                 * {@link Spotfire.Dxp.Data.Formatters.DataFormatterBase}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Categories(): System.Collections.Generic.IEnumerable<CategoryKey>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines whether this {@link Spotfire.Dxp.Application.Visuals.IndexedFormatter}
                 * contains a formatter for a specific category or column.
                 * @param category An object identifying the category or column.
                 * @returns true if there is a formatter for the given category; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...category: any[]): JsType<System.Boolean>;
                /**
                 * Determines whether this {@link Spotfire.Dxp.Application.Visuals.IndexedFormatter}
                 * contains a formatter for a specific category or column.
                 * @param category A {@link Spotfire.Dxp.Application.Visuals.CategoryKey} identifying the category or column.
                 * @returns true if there is a formatter for the given category; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(category: CategoryKey): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the formatting for a category or column.
                 * @param categories The expression for a category or column.
                 * @returns The formatting for the category or column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, JsType<T>> & PropertySet<TypedArray<System.Object>, (JsType<T> | T)>) & PropertyGet<CategoryKey, JsType<T>>) & PropertySet<CategoryKey, (JsType<T> | T)>);
                private __type_3096301528: null;
            }
            
            /**
             * Indexed property of the type int.
             * An indexed property gives finer grained control of some settings of a visualization
             * when {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScaling} is set to true.
             * How to index an indexed property depends on the value
             * of {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode}.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Color} then indexed properties are indexed using values
             * from the color axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Trellis} then indexed properties are indexed using values
             * from the applicable trellis axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Dual} then most indexed properties are indexed using values
             * from {@link Spotfire.Dxp.Application.Visuals.ScaleDock}. However, {@link Spotfire.Dxp.Application.Visuals.Scale.IndexedDock} is indexed using values from the color axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedInt extends Object {
                /**
                 * Get or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): JsType<System.Int32>;
                set RootValue(value: JsType<System.Int32>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param key The key.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param keys The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, JsType<System.Int32>> & PropertySet<TypedArray<System.Object>, (JsType<System.Int32> | System.Int32)>) & PropertyGet<CategoryKey, JsType<System.Int32>>) & PropertySet<CategoryKey, (JsType<System.Int32> | System.Int32)>);
                private __type_1605755709: null;
            }
            
            /**
             * Indexed property of the type {@link Spotfire.Dxp.Application.Visuals.LabelOrientation}.
             * An indexed property gives finer grained control of some settings of a visualization
             * when {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScaling} is set to true.
             * How to index an indexed property depends on the value
             * of {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode}.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Color} then indexed properties are indexed using values
             * from the color axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Trellis} then indexed properties are indexed using values
             * from the applicable trellis axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Dual} then most indexed properties are indexed using values
             * from {@link Spotfire.Dxp.Application.Visuals.ScaleDock}. However, {@link Spotfire.Dxp.Application.Visuals.Scale.IndexedDock} is indexed using values from the color axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedLabelOrientation extends Object {
                /**
                 * Get or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): LabelOrientation;
                set RootValue(value: LabelOrientation);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param key The key.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param keys The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, LabelOrientation> & PropertySet<TypedArray<System.Object>, LabelOrientation>) & PropertyGet<CategoryKey, LabelOrientation>) & PropertySet<CategoryKey, LabelOrientation>);
                private __type_1578001836: null;
            }
            
            /**
             * Controls where an individual scale is displayed.
             * An indexed property gives finer grained control of some settings of a visualization
             * when {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScaling} is set to true.
             * How to index an indexed property depends on the value
             * of {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode}.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Color} then indexed properties are indexed using values
             * from the color axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Trellis} then indexed properties are indexed using values
             * from the applicable trellis axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Dual} then most indexed properties are indexed using values
             * from {@link Spotfire.Dxp.Application.Visuals.ScaleDock}. However, {@link Spotfire.Dxp.Application.Visuals.Scale.IndexedDock} is indexed using values from the color axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedScaleDock extends Object {
                /**
                 * Gets or sets the root value for the indexed property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): ScaleDock;
                set RootValue(value: ScaleDock);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param key The key.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param keys The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, ScaleDock> & PropertySet<TypedArray<System.Object>, ScaleDock>) & PropertyGet<CategoryKey, ScaleDock>) & PropertySet<CategoryKey, ScaleDock>);
                private __type_3685503881: null;
            }
            
            /**
             * Indexed property of the type {@link Spotfire.Dxp.Application.Visuals.ScaleLabelLayout}.
             * An indexed property gives finer grained control of some settings of a visualization
             * when {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScaling} is set to true.
             * How to index an indexed property depends on the value
             * of {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode}.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Color} then indexed properties are indexed using values
             * from the color axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Trellis} then indexed properties are indexed using values
             * from the applicable trellis axis. Some indexed properties cannot be indexed in this case and the root value
             * should then be used.
             * If {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.IndividualScalingMode} is set to
             * {@link Spotfire.Dxp.Application.Visuals.IndividualScalingMode.Dual} then most indexed properties are indexed using values
             * from {@link Spotfire.Dxp.Application.Visuals.ScaleDock}. However, {@link Spotfire.Dxp.Application.Visuals.Scale.IndexedDock} is indexed using values from the color axis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedScaleLabelLayout extends Object {
                /**
                 * Get or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): ScaleLabelLayout;
                set RootValue(value: ScaleLabelLayout);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param key The key.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param keys The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, ScaleLabelLayout> & PropertySet<TypedArray<System.Object>, ScaleLabelLayout>) & PropertyGet<CategoryKey, ScaleLabelLayout>) & PropertySet<CategoryKey, ScaleLabelLayout>);
                private __type_1866340330: null;
            }
            
            /**
             * Represents an Indexed property of {@link Spotfire.Dxp.Application.Visuals.CrossTableTotals.CalculationMode}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndexedTotalsCalculationMode extends Object {
                /**
                 * Gets or sets the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootValue(): CrossTableTotals.CalculationMode;
                set RootValue(value: CrossTableTotals.CalculationMode);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the root value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param key The key.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(key: CategoryKey): JsType<System.Boolean>;
                /**
                 * Check if the dictionary for the indexed property contains a key.
                 * @param keys The key as an object array.
                 * @returns true if the key is found in the dictionary, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(...keys: any[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the value corresponding to the key.
                 * @param key The key.
                 * @returns Value corresponding to the key.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, CrossTableTotals.CalculationMode> & PropertySet<TypedArray<System.Object>, CrossTableTotals.CalculationMode>) & PropertyGet<CategoryKey, CrossTableTotals.CalculationMode>) & PropertySet<CategoryKey, CrossTableTotals.CalculationMode>);
                private __type_2429353781: null;
            }
            
            /**
             * Modes for individual scaling
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class IndividualScalingMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Color. */
                static readonly Color: IndividualScalingMode;
                /** Dual scales. */
                static readonly Dual: IndividualScalingMode;
                /** Trellis panels. */
                static readonly Trellis: IndividualScalingMode;
                private __type_2634042646: null;
            }
            
            /**
             * Represents a visualization for one or several key performance indicators (KPIs),
             * each represented by a {@link Spotfire.Dxp.Application.Visuals.KpiVisualization}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiChart extends Visualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the active KPI. This can be used to identify the KPI Visualization within the
                 * KPI Chart that the user last interacted with. This value can be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ActiveKpi(): (KpiVisualization | null);
                set ActiveKpi(value: (KpiVisualization | null));
                /**
                 * Gets or sets a value for the number of pixels spacing between kpis when each kpi starts on a new row.
                 * Has no effect if {@link Spotfire.Dxp.Application.Visuals.KpiChart.NewRowPerKpi} is false.
                 * Default value is 24. Allowed values are 0 to 100.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AdditionalSpacingBetweenKpis(): JsType<System.Int32>;
                set AdditionalSpacingBetweenKpis(value: JsType<System.Int32>);
                /**
                 * Gets or sets the font metadata used for the base font. The base font is the smallest font used in the kpi chart.
                 * All other font sizes are derived from this size.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BaseFontMetadata(): Framework.Styles.FontMetadata;
                set BaseFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets the collection of KPIs for this KPI Chart.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get KpiCollection(): KpiCollection;
                /**
                 * Gets or sets the minimum number of tiles to show on each row. If the kpi chart cannot show that number of tiles with the given width and font settings the tiles will be scaled
                 * down (including the font size) until they do.
                 * Default value is 1. Allowed values are 1 to 100.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MinTilesPerRow(): JsType<System.Int32>;
                set MinTilesPerRow(value: JsType<System.Int32>);
                /**
                 * Gets or sets the minimum number of tiles to keep completely visible in the kpi chart. If the kpi chart cannot show that number of tiles with the given width and font settings the tiles will be scaled
                 * down (including the font size) until they do.
                 * Default value is 0. Allowed values are 0 to 100.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MinVisibleTiles(): JsType<System.Int32>;
                set MinVisibleTiles(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether the tiles for one kpi should be grouped and started on a new line or not.
                 * This also affects the sorting, when the kpis each starts on a new line sorting is done for each kpi separately.
                 * Default value if false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get NewRowPerKpi(): JsType<System.Boolean>;
                set NewRowPerKpi(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the preferred width of a KPI tile as a multiple of the current font size. When filling up the {@link Spotfire.Dxp.Application.Visuals.KpiChart}
                 * with KPI tiles, no tile will be less than this size (given that the width of the {@link Spotfire.Dxp.Application.Visuals.KpiChart}
                 * is not smaller than this size). In addition, the KPI tiles will not be larger than twice this size.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PreferredRelativeTileWidth(): JsType<System.Double>;
                set PreferredRelativeTileWidth(value: JsType<System.Double>);
                /**
                 * Gets or sets a value indicating whether the title is shown for each kpi when each kpi starts on a new row.
                 * Has no effect if {@link Spotfire.Dxp.Application.Visuals.KpiChart.NewRowPerKpi} is false.
                 * Default value is true.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowTitlesForKpis(): JsType<System.Boolean>;
                set ShowTitlesForKpis(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the sort mode for the individual tiles for all KPIs in the {@link Spotfire.Dxp.Application.Visuals.KpiChart}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortMode(): KpiSortMode;
                set SortMode(value: KpiSortMode);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2452609679: null;
            }
            
            /**
             * Represents a collection of {@link Spotfire.Dxp.Application.Visuals.KpiContent} in the KpiChart.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<KpiContent>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of items in this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<KpiContent>;
                /**
                 * Duplicates a {@link Spotfire.Dxp.Application.Visuals.KpiContent} and adds it to the collection.
                 * @param kpiContent The {@link Spotfire.Dxp.Application.Visuals.KpiContent} to be duplicated.
                 * @returns The duplicated {@link Spotfire.Dxp.Application.Visuals.KpiContent}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddDuplicate(kpiContent: KpiContent): KpiContent;
                /**
                 * Adds a new {@link Spotfire.Dxp.Application.Visuals.KpiContent} containing an {@link Spotfire.Dxp.Application.Visuals.KpiVisualization} to the KPI collection.
                 * @returns The newly added {@link Spotfire.Dxp.Application.Visuals.KpiContent}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNew(): KpiContent;
                /**
                 * Removes all items from the KPI collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Returns an enumerator that iterates through the collection.
                 * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<KpiContent>;
                /**
                 * Determines the index of the specific item.
                 * @param item The item to locate.
                 * @returns The index of item if found; otherwise, -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(item: KpiContent): JsType<System.Int32>;
                /**
                 * Inserts a {@link Spotfire.Dxp.Application.Visuals.KpiContent} containing an auto configured {@link Spotfire.Dxp.Application.Visuals.KpiVisualization} at the specified index.
                 * @param index The index, where to insert the {@link Spotfire.Dxp.Application.Visuals.KpiContent}.
                 * @returns The created {@link Spotfire.Dxp.Application.Visuals.KpiContent}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                InsertNew(index: (JsType<System.Int32> | System.Int32)): KpiContent;
                /**
                 * Moves the item at the specified index to a new location in the collection.
                 * @param fromIndex The zero-based index specifying the location of the item to be moved.
                 * @param toIndex The zero-based index specifying the new location of the item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the first occurrence of the specified item from the KPI collection.
                 * @param item The item to remove.
                 * @returns true if item was removed;
                 * otherwise, false. This method also returns false if item was not found.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: KpiContent): JsType<System.Boolean>;
                /**
                 * Removes the item at the specified index.
                 * @param index The zero-based index of the item to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<KpiContent>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the item at the specified index.
                 * @param index The zero-based index for the item to retrieve.
                 * @returns The item at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), KpiContent>;
                private __type_3555332809: null;
            }
            
            /**
             * Represents an axis used to define a comparative value for a KPI.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiComparativeAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the formatting for this comparative axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Formatting(): Formatting;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_930861729: null;
            }
            
            /**
             * Represents a {@link Spotfire.Dxp.Application.Visuals.KpiVisualization} and its title in a {@link Spotfire.Dxp.Application.Visuals.KpiCollection}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiContent extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the title of the {@link Spotfire.Dxp.Application.Visuals.KpiVisualization} held by this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                set Title(value: JsType<System.String>);
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.KpiVisualization} held by this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visualization(): KpiVisualization;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1767077360: null;
            }
            
            /**
             * Represents an {@link Spotfire.Dxp.Application.Visuals.ExpressionColumn} used for sorting of KPIs.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiSortColumn extends ExpressionColumn implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_487881059: null;
            }
            
            /**
             * Represents sort modes for the {@link Spotfire.Dxp.Application.Visuals.KpiChart}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiSortMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * The KPI tiles are shown in alphabetical order
                 * based firstly on the expressions on their tile axes and secondly on
                 * the expressions on their Y axes.
                 */
                static readonly Alphabetical: KpiSortMode;
                /**
                 * The KPI tiles are sorted with respect to the value on their
                 * {@link Spotfire.Dxp.Application.Visuals.SortColumn} with the tile with highest value coming first.
                 * A {@link Spotfire.Dxp.Application.Visuals.KpiVisualization} with nothing set on the {@link Spotfire.Dxp.Application.Visuals.SortColumn}
                 * will be displayed in {@link Spotfire.Dxp.Application.Visuals.KpiSortMode.None} order after the ones that
                 * have the {@link Spotfire.Dxp.Application.Visuals.SortColumn} set.
                 */
                static readonly HighestFirst: KpiSortMode;
                /**
                 * The KPI tiles are sorted with respect to the value on their
                 * {@link Spotfire.Dxp.Application.Visuals.SortColumn} with the tile with the lowest value coming first.
                 * A {@link Spotfire.Dxp.Application.Visuals.KpiVisualization} with nothing set on the {@link Spotfire.Dxp.Application.Visuals.SortColumn}
                 * will be displayed in {@link Spotfire.Dxp.Application.Visuals.KpiSortMode.None} order after the ones that
                 * have the {@link Spotfire.Dxp.Application.Visuals.SortColumn} set.
                 */
                static readonly LowestFirst: KpiSortMode;
                /**
                 * The KPI tiles are shown in the order defined by the items in
                 * {@link Spotfire.Dxp.Application.Visuals.KpiCollection} and the sort order of the expressions on their
                 * tile axes.
                 */
                static readonly None: KpiSortMode;
                /**
                 * The KPI tiles are shown in reversed alphabetical
                 * order based firstly on the expressions on their tile axes and secondly on
                 * the expressions on their Y axes.
                 */
                static readonly ReverseAlphabetical: KpiSortMode;
                private __type_35552680: null;
            }
            
            /**
             * A visualization that can render key performance indicators (KPIs) within a {@link Spotfire.Dxp.Application.Visuals.KpiChart}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiVisualization extends Visualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets the comparative axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ComparativeAxis(): KpiComparativeAxis;
                /**
                 * Gets or sets the color of tiles when there is no data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EmptyTileColor(): Framework.Styles.ColorInfo;
                set EmptyTileColor(value: Framework.Styles.ColorInfo);
                /**
                 * Gets or sets the text to display when there is no data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EmptyTileText(): JsType<System.String>;
                set EmptyTileText(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether to include the origin in the sparkline.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IncludeOrigin(): JsType<System.Boolean>;
                set IncludeOrigin(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show the sparkline.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowSparkline(): JsType<System.Boolean>;
                set ShowSparkline(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show the sparkline scale.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowSparklineScale(): JsType<System.Boolean>;
                set ShowSparklineScale(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show x labels in the KPI tiles.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowXLabelInTile(): JsType<System.Boolean>;
                set ShowXLabelInTile(value: JsType<System.Boolean>);
                /**
                 * Gets the sort column. This column is used to calculate the value to be used in the
                 * comparison between tiles when the {@link Spotfire.Dxp.Application.Visuals.KpiChart.SortMode} is {@link Spotfire.Dxp.Application.Visuals.KpiSortMode.HighestFirst}
                 * or {@link Spotfire.Dxp.Application.Visuals.KpiSortMode.LowestFirst}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortColumn(): KpiSortColumn;
                /**
                 * Gets the tile axis. This axis is used to split up a KPI into tiles.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TileAxis(): Axis;
                /**
                 * Gets the X axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): KpiXAxis;
                /**
                 * Gets the Y axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): KpiYAxis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1796667849: null;
            }
            
            /**
             * Holds context information for an action invoked on a KPI visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiVisualizationActionContext extends Object {
                /**
                 * Gets the comparative value of the KPI visualization tile for which an action is invoked.
                 * May be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ComparativeValue(): unknown;
                /**
                 * Gets the path of values identifying the leaf in a hierarchy for which an action is invoked.
                 * May be null or empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HierarchyPathValues(): System.Collections.Generic.IList<JsType<System.Object>>;
                /**
                 * Gets the value of the KPI visualization tile for which an action is invoked.
                 * May be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Value(): unknown;
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.KpiVisualization} for which an action is invoked.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visualization(): KpiVisualization;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4038597558: null;
            }
            
            /**
             * The X axis of a KPI visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiXAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1739616452: null;
            }
            
            /**
             * The Y axis of a KPI visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class KpiYAxis extends Miniatures.SparklineYAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1739617477: null;
            }
            
            /**
             * LabelColumn class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LabelColumn extends ExpressionColumn implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1119546245: null;
            }
            
            /**
             * LabelInformationType enumeration.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LabelInformationType extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Show information as a percentage. */
                static readonly Percentage: LabelInformationType;
                /** Show information as a value. */
                static readonly Value: LabelInformationType;
                private __type_933330503: null;
            }
            
            /**
             * The orientation of a label on a scale.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LabelOrientation extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The label is placed horizontally. */
                static readonly Horizontal: LabelOrientation;
                /** The label is placed vertically. */
                static readonly Vertical: LabelOrientation;
                private __type_2697239517: null;
            }
            
            /**
             * LabelPosition enumeration.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LabelPosition extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The label is placed inside the marker. */
                static readonly Inside: LabelPosition;
                /** The label is placed outside the marker. */
                static readonly Outside: LabelPosition;
                private __type_1408296828: null;
            }
            
            /**
             * LabelVisibility enumeration.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LabelVisibility extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Show labels for all markers. */
                static readonly All: LabelVisibility;
                /** Show labels for marked markers. */
                static readonly Marked: LabelVisibility;
                /** Do not show any label. */
                static readonly None: LabelVisibility;
                private __type_2671952145: null;
            }
            
            /**
             * Representation of a plot legend. The legend is a key to the features
             * (that is, symbols or pictures) used in the plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Legend extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the docking of the legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Dock(): LegendDock;
                set Dock(value: LegendDock);
                /**
                 * Gets or sets the font of this legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontMetadata(): Framework.Styles.FontMetadata;
                set FontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets the collection of legend items in this legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Items(): Legend.LegendItemCollection;
                /**
                 * Gets or sets the max values per legend item. This value controls how many legend items are shown before the list is truncated.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxValuesPerLegendItem(): JsType<System.Int32>;
                set MaxValuesPerLegendItem(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether or not this
                 * {@link Spotfire.Dxp.Application.Visuals.Legend} is visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the width, in pixels, of the legend as it is displayed in the user interface.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Width(): JsType<System.Int32>;
                set Width(value: JsType<System.Int32>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2090202094: null;
            }
            
            /**
             * Represents axis information in a legend.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendAxisItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether the axis selector of this
                 * {@link Spotfire.Dxp.Application.Visuals.LegendAxisItem} is shown.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowAxisSelector(): JsType<System.Boolean>;
                set ShowAxisSelector(value: JsType<System.Boolean>);
                /** Gets the title of this legend item. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1963126124: null;
            }
            
            /**
             * Represents coloring information in the {@link Spotfire.Dxp.Application.Visuals.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendColorItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether this item can be placed in the horizontal legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CanBeHorizontal(): JsType<System.Boolean>;
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3544877918: null;
            }
            
            /**
             * Represents combination chart series information in the {@link Spotfire.Dxp.Application.Visuals.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendCombinationChartSeriesItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether this item can be placed in the horizontal legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CanBeHorizontal(): JsType<System.Boolean>;
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3632780267: null;
            }
            
            /**
             * Represents data table information in the {@link Spotfire.Dxp.Application.Visuals.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendDataTableItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the title of this legend item. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3732316815: null;
            }
            
            /**
             * Represent a legend item with the plot description.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendDescriptionItem extends LegendTextItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the text contained in this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Text(): JsType<System.String>;
                /**
                 * Gets the title.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3603162483: null;
            }
            
            /**
             * Represents the legend docking placement.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendDock extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * The legend is docked to the left.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Left: LegendDock;
                /**
                 * The legend is docked to the right.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Right: LegendDock;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1323106875: null;
            }
            
            /**
             * Represents a legend item with text describing {@link Spotfire.Dxp.Application.Visuals.ErrorBars} configuration.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendErrorBarsItem extends LegendTextItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the text contained in this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Text(): JsType<System.String>;
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2056698795: null;
            }
            
            /**
             * Represents {@link Spotfire.Dxp.Application.Visuals.Legend} information about a
             * visualization's {@link Spotfire.Dxp.Application.Visuals.VisualizationData.Filterings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendFilteringsItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_922936870: null;
            }
            
            /**
             * Represents {@link Spotfire.Dxp.Application.Visuals.Legend} information about a
             * visualization's {@link Spotfire.Dxp.Application.Visuals.FilterRuleCollection}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendFilterRuleItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3140176363: null;
            }
            
            /**
             * Represents fitting model information in the {@link Spotfire.Dxp.Application.Visuals.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendFittingModelCollectionItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3307209891: null;
            }
            
            /**
             * Represents group by information in a legend.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendGroupByItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the title.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_72751757: null;
            }
            
            /**
             * Base class for legend items contained in a {@link Spotfire.Dxp.Application.Visuals.LegendItem.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendItem extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether this item can be placed in the horizontal legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CanBeHorizontal(): JsType<System.Boolean>;
                /**
                 * Gets or sets a value whether the sub items will be displayed in the horizontal legend or in the vertical legend.
                 * Only sub items that return true for CanBeHorizontal will show up in the horizontal legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowSubItemsInHorizontalLegend(): JsType<System.Boolean>;
                set ShowSubItemsInHorizontalLegend(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether the title of this
                 * {@link Spotfire.Dxp.Application.Visuals.LegendItem} is shown.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowTitle(): JsType<System.Boolean>;
                set ShowTitle(value: JsType<System.Boolean>);
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * Gets or sets a value indicating whether this
                 * {@link Spotfire.Dxp.Application.Visuals.LegendItem} is visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2351650649: null;
            }
            
            /**
             * A stand-in class replacing missing objects that inherit {@link Spotfire.Dxp.Application.Visuals.LegendItem}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendItemStandIn extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2558363860: null;
            }
            
            /**
             * Represents line connection information in the {@link Spotfire.Dxp.Application.Visuals.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendLineConnectionItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3772499101: null;
            }
            
            /**
             * Represents marker rotation information in a legend.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendMarkerRotationItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the title. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2695146595: null;
            }
            
            /**
             * Represents marker shape information in a {@link Spotfire.Dxp.Application.Visuals.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendMarkerShapeItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether this item can be placed in the horizontal legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CanBeHorizontal(): JsType<System.Boolean>;
                /** Gets the title. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_518691150: null;
            }
            
            /**
             * Represents marking information in a {@link Spotfire.Dxp.Application.Visuals.Legend}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendMarkingItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the title of this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4069329118: null;
            }
            
            /**
             * Represents sector size information in a legend.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendSectorSizeItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the title. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3715955454: null;
            }
            
            /**
             * Legend item representing marker shape information in the legend of a 3D scatter plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendShape3DItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether this item can be placed in the horizontal legend.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CanBeHorizontal(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_722100893: null;
            }
            
            /**
             * Represents marker size information in a legend.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendSizeItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the title. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4126687072: null;
            }
            
            /**
             * Represents a legend item with text.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendTextItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the text contained in this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Text(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1612434742: null;
            }
            
            /**
             * Represents a legend item with the title of the plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendTitleItem extends LegendTextItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the text contained in this legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Text(): JsType<System.String>;
                /**
                 * Gets the title.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1545007481: null;
            }
            
            /**
             * Legend item for the {@link Spotfire.Dxp.Application.Visuals.TreemapHierarchyAxis}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendTreemapHierarchyItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the title. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1248228480: null;
            }
            
            /**
             * Represents size information in a legend for a treemap.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendTreemapSizeItem extends LegendAxisItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the title. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2205495730: null;
            }
            
            /**
             * Represents a legend item for the Trellis settings of a visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LegendTrellisItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /** Gets the title of this legend item. */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_75539816: null;
            }
            
            /**
             * LineChart class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LineChart extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether the lines break on empty values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BreakOnEmpty(): JsType<System.Boolean>;
                set BreakOnEmpty(value: JsType<System.Boolean>);
                /**
                 * Gets the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets or sets a value indicating whether the visualization should inject empty values for missing time series data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CompensateForMissingTimeSeriesValues(): JsType<System.Boolean>;
                set CompensateForMissingTimeSeriesValues(value: JsType<System.Boolean>);
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): LineChartDetails;
                /**
                 * Gets the fitting models.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FittingModels(): FittingModels.FittingModelCollection;
                /**
                 * Gets or sets the font used for the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets a value indicating label visibility.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelVisibility(): LabelVisibility;
                set LabelVisibility(value: LabelVisibility);
                /**
                 * Gets the line by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LineByAxis(): GroupByAxis;
                /**
                 * Gets or sets the width of the lines.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LineWidth(): JsType<System.Int32>;
                set LineWidth(value: JsType<System.Int32>);
                /**
                 * Gets or sets the size of the markers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerSize(): JsType<System.Single>;
                set MarkerSize(value: JsType<System.Single>);
                /**
                 * Gets or sets a value indicating max number of drawn labels. Values must not be negative.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxNumberOfLabels(): JsType<System.Int32>;
                set MaxNumberOfLabels(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether the lines are individually scaled.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowIndividualScaling(): JsType<System.Boolean>;
                set ShowIndividualScaling(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show line labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowLineLabels(): JsType<System.Boolean>;
                set ShowLineLabels(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show marker labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowMarkerLabels(): JsType<System.Boolean>;
                set ShowMarkerLabels(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether markers are displayed or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowMarkers(): JsType<System.Boolean>;
                set ShowMarkers(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether lines are drawn in steps or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SteppedLines(): JsType<System.Boolean>;
                set SteppedLines(value: JsType<System.Boolean>);
                /**
                 * Gets the X axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): ScaleAxis;
                /**
                 * Gets the Y axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): ScaleAxis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3005338731: null;
            }
            
            /**
             * Class representing line detail information, typically displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LineChartDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item associated line by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Line(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the X axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the Y axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2666589593: null;
            }
            
            /**
             * Representation of the Line Connection properties for a {@link Spotfire.Dxp.Application.Visuals.ScatterPlot}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LineConnection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the color of lines.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): JsType<System.Drawing.Color>;
                set Color(value: JsType<System.Drawing.Color>);
                /**
                 * Gets the connection axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ConnectionAxis(): CategoricalAxisBase;
                /**
                 * Gets or sets a value controlling if lines are rendered behind
                 * other features in the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsBackground(): JsType<System.Boolean>;
                set IsBackground(value: JsType<System.Boolean>);
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendLineConnectionItem;
                /**
                 * Gets the order axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OrderAxis(): ContinuousAxisBase;
                /**
                 * Gets or sets a value indicating whether arrows indicating connection order should be drawn.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowArrows(): JsType<System.Boolean>;
                set ShowArrows(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether lines should use the color of markers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UseMarkerColor(): JsType<System.Boolean>;
                set UseMarkerColor(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the width of lines.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Width(): JsType<System.Single>;
                set Width(value: JsType<System.Single>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1874618349: null;
            }
            
            /**
             * Specifies different line styles available for use in visualizations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LineStyle extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** A dashed line. */
                static readonly Dash: LineStyle;
                /** A dotted line. */
                static readonly Dot: LineStyle;
                /** A double solid line. */
                static readonly Double: LineStyle;
                /** A single line. */
                static readonly Single: LineStyle;
                private __type_1432538822: null;
            }
            
            /**
             * Specifies the marker appearance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class MarkerClass extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Separate charts are used as markers. */
                static readonly Chart: MarkerClass;
                /** Simple shapes are used as markers. */
                static readonly Simple: MarkerClass;
                /** Tiled rectangles are used as markers. */
                static readonly Tile: MarkerClass;
                private __type_2550592973: null;
            }
            
            /**
             * Specifies the layout of a label in relation to its marker.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class MarkerLabelLayout extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Positioned automatic according to the algorithm used. */
                static readonly Auto: MarkerLabelLayout;
                /** Positioned in the center. */
                static readonly Center: MarkerLabelLayout;
                private __type_3850606935: null;
            }
            
            /**
             * Axis controlling the rotation of markers in a {@link Spotfire.Dxp.Application.Visuals.ScatterPlot} or {@link Spotfire.Dxp.Application.Visuals.Maps.MarkerLayerVisualization}.
             * The expression set on this axis is expected to return an angle in degrees.
             * The direction of the rotation is controlled by the {@link Spotfire.Dxp.Application.Visuals.MarkerRotationAxis.RotateClockwise} property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class MarkerRotationAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendMarkerRotationItem;
                /**
                 * Gets or sets a value indicating whether rotation is clockwise, or counter clockwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RotateClockwise(): JsType<System.Boolean>;
                set RotateClockwise(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_167002230: null;
            }
            
            /**
             * Class for marker shapes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class MarkerShape extends Object {
                /**
                 * Gets the type of the marker.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerType(): MarkerType;
                /**
                 * Initializes a new instance of the {@link MarkerShape} class.
                 * @param type The marker shape type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(type: MarkerType);
                /**
                 * Creates a copy of this marker shape.
                 * @returns A new instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clone(): MarkerShape;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3619610642: null;
            }
            
            /**
             * Specifies supported marker types.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class MarkerType extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Circular marker. */
                static readonly Circle: MarkerType;
                /** Outlined circular marker. */
                static readonly CircleOutline: MarkerType;
                /** Cross shaped marker. */
                static readonly Cross: MarkerType;
                /** Lined cross shaped marker. */
                static readonly CrossLine: MarkerType;
                /** Outlined cross shaped marker. */
                static readonly CrossOutline: MarkerType;
                /** Custom marker type. */
                static readonly Custom: MarkerType;
                /** Diamond shaped marker. */
                static readonly Diamond: MarkerType;
                /** Outlined diamond shaped marker. */
                static readonly DiamondOutline: MarkerType;
                /** Down pointing arrow shaped marker. */
                static readonly DownPointingArrow: MarkerType;
                /** Lined down pointing arrow shaped marker. */
                static readonly DownPointingArrowLine: MarkerType;
                /** Outlined down pointing arrow shaped marker. */
                static readonly DownPointingArrowOutline: MarkerType;
                /** Lined horizontal marker. */
                static readonly HorizontalLine: MarkerType;
                /** Horizontal rectangle shaped marker. */
                static readonly HorizontalRectangle: MarkerType;
                /** Outlined horizontal rectangle shaped marker. */
                static readonly HorizontalRectangleOutline: MarkerType;
                /** Left pointing arrow shaped marker. */
                static readonly LeftPointingArrow: MarkerType;
                /** Lined left pointing arrow shaped marker. */
                static readonly LeftPointingArrowLine: MarkerType;
                /** Outlined left pointing arrow shaped marker. */
                static readonly LeftPointingArrowOutline: MarkerType;
                /** Pentagon. */
                static readonly Pentagon: MarkerType;
                /** Outlined pentagon. */
                static readonly PentagonOutline: MarkerType;
                /** Plus shaped marker. */
                static readonly Plus: MarkerType;
                /** Lined plus shaped marker. */
                static readonly PlusLine: MarkerType;
                /** Outlined plus shaped marker. */
                static readonly PlusOutline: MarkerType;
                /** Right pointing arrow shaped marker. */
                static readonly RightPointingArrow: MarkerType;
                /** Lined right pointing arrow shaped marker. */
                static readonly RightPointingArrowLine: MarkerType;
                /** Outlined right pointing arrow shaped marker. */
                static readonly RightPointingArrowOutline: MarkerType;
                /** Square marker. */
                static readonly Square: MarkerType;
                /** Outlined square marker. */
                static readonly SquareOutline: MarkerType;
                /** Star with five corners. */
                static readonly StarFive: MarkerType;
                /** Outlined star with five corners. */
                static readonly StarFiveOutline: MarkerType;
                /** Star with four corners. */
                static readonly StarFour: MarkerType;
                /** Outlined star with four corners. */
                static readonly StarFourOutline: MarkerType;
                /** Lined star shaped marker with six points. */
                static readonly StarSixLine: MarkerType;
                /** Triangle pointing downwards. */
                static readonly TriangleDown: MarkerType;
                /** Outlined triangle pointing downwards. */
                static readonly TriangleDownOutline: MarkerType;
                /** Triangle pointing to the left. */
                static readonly TriangleLeft: MarkerType;
                /** Outlined triangle pointing to the left. */
                static readonly TriangleLeftOutline: MarkerType;
                /** Triangle pointing to the right. */
                static readonly TriangleRight: MarkerType;
                /** Outlined triangle pointing to the right. */
                static readonly TriangleRightOutline: MarkerType;
                /** Triangle pointing upwards. */
                static readonly TriangleUp: MarkerType;
                /** Outlined triangle pointing upwards. */
                static readonly TriangleUpOutline: MarkerType;
                /** Up pointing arrow shaped marker. */
                static readonly UpPointingArrow: MarkerType;
                /** Lined up pointing arrow shaped marker. */
                static readonly UpPointingArrowLine: MarkerType;
                /** Outlined up arrow shaped marker. */
                static readonly UpPointingArrowOutline: MarkerType;
                /** Lined vertical marker. */
                static readonly VerticalLine: MarkerType;
                /** Vertical rectangle shaped marker. */
                static readonly VerticalRectangle: MarkerType;
                /** Outlined vertical rectangle shaped marker. */
                static readonly VerticalRectangleOutline: MarkerType;
                private __type_56323787: null;
            }
            
            /**
             * A detail item that can be referenced by name.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class NamedDetailItem extends DetailItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the name that identifies this detail (tooltip) item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1284054734: null;
            }
            
            /**
             * Axis used to control drawing order of the markers within a visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class OrderByAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.OrderByAxis} is reversed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Reversed(): JsType<System.Boolean>;
                set Reversed(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3082207011: null;
            }
            
            /**
             * Representation of a Parallel Coordinate Plot.
             * A PCP displays data using lines, where each record (in the unaggregated case)
             * is represented by a profile, or line, through the graph.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ParallelCoordinatePlot extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the bottom scale (the plot's columns).
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BottomScale(): ParallelCoordinatePlotColumnScale;
                /**
                 * Gets or sets a value indicating whether the lines break on empty values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BreakOnEmpty(): JsType<System.Boolean>;
                set BreakOnEmpty(value: JsType<System.Boolean>);
                /**
                 * Gets the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets the columns for the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Columns(): ParallelCoordinatePlotColumnCollection;
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): ParallelCoordinatePlotDetails;
                /**
                 * Gets or sets the font used for the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets a value indicating label visibility.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelVisibility(): LabelVisibility;
                set LabelVisibility(value: LabelVisibility);
                /**
                 * Gets the left scale (the percentage axis).
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LeftScale(): Scale;
                /**
                 * Gets the line by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LineByAxis(): GroupByAxis;
                /**
                 * Gets or sets the width of the lines. Allowed values are 1-10.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LineWidth(): JsType<System.Int32>;
                set LineWidth(value: JsType<System.Int32>);
                /**
                 * Gets or sets the maximum number of drawn labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxNumberOfLabels(): JsType<System.Int32>;
                set MaxNumberOfLabels(value: JsType<System.Int32>);
                /**
                 * Gets the right scale (the selected column's scale).
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RightScale(): Scale;
                /**
                 * Gets or sets a value indicating whether to show line labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowLineLabels(): JsType<System.Boolean>;
                set ShowLineLabels(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to show marker labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowMarkerLabels(): JsType<System.Boolean>;
                set ShowMarkerLabels(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3784113559: null;
            }
            
            /**
             * This class represents a column in a {@link Spotfire.Dxp.Application.Visuals.ParallelCoordinatePlot}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ParallelCoordinatePlotColumn extends ExpressionColumn implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the name of the data column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataColumnName(): JsType<System.String>;
                /**
                 * Gets the name of the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Application.Visuals.ParallelCoordinatePlotColumn} class.
                 * @param expression The expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(expression: (JsType<System.String> | System.String));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3086011585: null;
            }
            
            /**
             * A collection of {@link Spotfire.Dxp.Application.Visuals.ParallelCoordinatePlotColumn} objects.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ParallelCoordinatePlotColumnCollection extends Framework.DocumentModel.DocumentNodeList<ParallelCoordinatePlotColumn> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<ParallelCoordinatePlotColumn>>, Explicit<System.Collections.IEnumerable>, Explicit<System.Collections.Generic.IList<ParallelCoordinatePlotColumn>>, Explicit<System.Collections.Generic.ICollection<ParallelCoordinatePlotColumn>> {
                /**
                 * Gets or sets the active plot column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ActivePlotColumnReference(): ParallelCoordinatePlotColumn;
                set ActivePlotColumnReference(value: ParallelCoordinatePlotColumn);
                /**
                 * Gets or sets a value indicating whether zooming is enabled.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ManualZoom(): JsType<System.Boolean>;
                set ManualZoom(value: JsType<System.Boolean>);
                /**
                 * Zoom range expressed in column indexes.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ZoomRange(): Data.Range;
                set ZoomRange(value: Data.Range);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<ParallelCoordinatePlotColumn>;
                /**
                 * Add a subset of columns.
                 * @param columns The names of the columns to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddSubset(columns: OrExplicit<System.Collections.Generic.IList<(JsType<System.String> | System.String)>>): void;
                /**
                 * Get column by name.
                 * @param name Name of column.
                 * @returns ParallelCoordinatePlot column; otherwise null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetColumnByName(name: (JsType<System.String> | System.String)): ParallelCoordinatePlotColumn;
                /**
                 * Moves a subset of columns down.
                 * @param columnsIndexes The indexes of the columns to move down.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                MoveDown(columnsIndexes: OrExplicit<System.Collections.Generic.IList<(JsType<System.Int32> | System.Int32)>>): void;
                /**
                 * Moves a subset of columns up.
                 * @param columnsIndexes The indexes of the columns to move up.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                MoveUp(columnsIndexes: OrExplicit<System.Collections.Generic.IList<(JsType<System.Int32> | System.Int32)>>): void;
                /**
                 * Remove a subset of columns.
                 * @param columnsIndexes The indexes of the columns to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveSubset(columnsIndexes: OrExplicit<System.Collections.Generic.IList<(JsType<System.Int32> | System.Int32)>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<ParallelCoordinatePlotColumn>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<ParallelCoordinatePlotColumn>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<ParallelCoordinatePlotColumn>>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), ParallelCoordinatePlotColumn> & PropertySet<(JsType<System.Int32> | System.Int32), ParallelCoordinatePlotColumn>);
                private __type_4285452147: null;
            }
            
            /**
             * The bottom scale in a parallel coordinate plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ParallelCoordinatePlotColumnScale extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontMetadata(): Framework.Styles.FontMetadata;
                set FontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets the label orientation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelOrientation(): LabelOrientation;
                set LabelOrientation(value: LabelOrientation);
                /**
                 * Gets or sets the maximum number of ticks. Allowed values 2-1000.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaximumNumberOfTicks(): JsType<System.Int32>;
                set MaximumNumberOfTicks(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.Scale} is reversed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Reverse(): JsType<System.Boolean>;
                set Reverse(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether to render gridlines or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowGridlines(): JsType<System.Boolean>;
                set ShowGridlines(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.Scale} renders the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowLabels(): JsType<System.Boolean>;
                set ShowLabels(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the absolute span of the scale area, for example the space available for the axis and its labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Span(): JsType<System.Single>;
                set Span(value: JsType<System.Single>);
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.ParallelCoordinatePlotColumnScale} is visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2224613313: null;
            }
            
            /**
             * Class representing parallel coordinate plot detail information, typically displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ParallelCoordinatePlotDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the line by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Line(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2554291277: null;
            }
            
            /**
             * PieChart class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PieChart extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): PieDetails;
                /**
                 * Gets or sets the size of pies.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerSize(): JsType<System.Single>;
                set MarkerSize(value: JsType<System.Single>);
                /**
                 * Controls the size of the pie sectors.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SectorSizeAxis(): SectorSizeAxis;
                /**
                 * Gets the size axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SizeAxis(): SizeAxis;
                /**
                 * Gets the visual attributes.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get VisualAttributes(): PieChartVisualAttributes;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2305006393: null;
            }
            
            /**
             * Visual attributes used when rendering pie charts.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PieChartVisualAttributes extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating if the label contains the category.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelCategory(): JsType<System.Boolean>;
                set LabelCategory(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the font used for the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets a value indicating if the label contains the percentage.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelPercentage(): JsType<System.Boolean>;
                set LabelPercentage(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the number of decimal digits for percentages.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelPercentageDecimalDigits(): JsType<System.Int32>;
                set LabelPercentageDecimalDigits(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating the limit for label percentage.
                 * Labels with a percentage above this value will be rendered.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelPercentageLimit(): JsType<System.Int32>;
                set LabelPercentageLimit(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating label position.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelPosition(): LabelPosition;
                set LabelPosition(value: LabelPosition);
                /**
                 * Gets or sets a value indicating if the label contains the value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelValue(): JsType<System.Boolean>;
                set LabelValue(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating label visibility.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelVisibility(): LabelVisibility;
                set LabelVisibility(value: LabelVisibility);
                /**
                 * Gets or sets a value indicating max number of drawn labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxNumberOfLabels(): JsType<System.Int32>;
                set MaxNumberOfLabels(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating if sectors are drawn sorted by size.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortSectorsBySize(): JsType<System.Boolean>;
                set SortSectorsBySize(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1557435872: null;
            }
            
            /**
             * Class representing pie detail information, typically displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PieDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item that controls the display of ratios.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Ratio(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the sector size axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SectorSize(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2259211587: null;
            }
            
            /**
             * A marker that is a pie.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PieMarker extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the details.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): PieDetails;
                /**
                 * Gets the sector size axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SectorSizeAxis(): SectorSizeAxis;
                /**
                 * Gets the visual attributes.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get VisualAttributes(): PieChartVisualAttributes;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1516107427: null;
            }
            
            /**
             * Options for positioning.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PositioningMethod extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Positioning using identifiers (geocoding). */
                static readonly Identifier: PositioningMethod;
                /** Positioning using longitude/latitude values. */
                static readonly LongitudeLatitude: PositioningMethod;
                private __type_1326764707: null;
            }
            
            /**
             * Represents a range condition in a conditional rule.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class RangeRuleCondition extends RuleCondition implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the end value for this rule.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EndValue(): ConditionalColoring.ConditionValue;
                set EndValue(value: ConditionalColoring.ConditionValue);
                /**
                 * Gets or sets the user set display name for the ending value.
                 * If set to null, the end value will be represented with an auto-generated name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EndValueManualDisplayName(): JsType<System.String>;
                set EndValueManualDisplayName(value: JsType<System.String>);
                /**
                 * Gets or sets the start value for this rule.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get StartValue(): ConditionalColoring.ConditionValue;
                set StartValue(value: ConditionalColoring.ConditionValue);
                /**
                 * Gets or sets the user set display name for the starting value.
                 * If set to null, the start value will be represented with an auto-generated name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get StartValueManualDisplayName(): JsType<System.String>;
                set StartValueManualDisplayName(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4026801159: null;
            }
            
            /**
             * Represents the result from {@link Spotfire.Dxp.Application.Visual.RenderAsync|RenderAsync(resultSettings, visualSettings, cancellationToken)} or {@link Spotfire.Dxp.Application.Page.RenderAsync|RenderAsync(resultSettings, pageSettings, cancellationToken)}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class RenderResult extends Object {
                /**
                 * Gets a value indicating whether the result contains a valid image.
                 * If the rendering has been canceled or failed, this property will be false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsValid(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Writes the PNG data to the specified outputStream.
                 * If {@link Spotfire.Dxp.Application.Visuals.RenderResult.IsValid} is false, nothing is done.
                 * @param outputStream The output stream.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                WriteTo(outputStream: (JsType<System.IO.Stream> | System.IO.Stream)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1976283722: null;
            }
            
            /**
             * Represents the condition in a conditional rule.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class RuleCondition extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2213227394: null;
            }
            
            /**
             * A Scale.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Scale extends ScaleBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Controls where the scale is displayed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Dock(): ScaleDock;
                set Dock(value: ScaleDock);
                /**
                 * Controls the size of the right/top scale area, when using multiple scales by color or dual scales.
                 * If setting -1, then a default span is used.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FarSpan(): JsType<System.Single>;
                set FarSpan(value: JsType<System.Single>);
                /**
                 * Controls where an individual scale is displayed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedDock(): IndexedScaleDock;
                /**
                 * Controls the method used for generating ticks and labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedScaleLabelLayout(): IndexedScaleLabelLayout;
                /**
                 * Gets or sets the method used for generating ticks and labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelLayout(): ScaleLabelLayout;
                set LabelLayout(value: ScaleLabelLayout);
                /**
                 * Controls the size of the left/bottom scale area, when using multiple scales by color or dual scales.
                 * If setting -1, then a default span is used.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get NearSpan(): JsType<System.Single>;
                set NearSpan(value: JsType<System.Single>);
                /**
                 * Gets or sets the span of the area.
                 * If setting -1, then a default span is used.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Span(): JsType<System.Single>;
                set Span(value: JsType<System.Single>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1857075825: null;
            }
            
            /**
             * A Scale used by 3D Scatter Plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Scale3D extends ScaleBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2034434540: null;
            }
            
            /**
             * Represents an X or Y axis in a visualization. It is used to map values
             * to an axis, typically by applying a range. When mapping, the scale axis
             * can transform the values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScaleAxis extends ScaleAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the error bars.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ErrorBars(): ErrorBars;
                /**
                 * Gets the scale properties.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Scale(): Scale;
                /**
                 * Gets the scale labels object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ScaleLabels(): ScaleLabels;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2921025634: null;
            }
            
            /**
             * Represents an X, Y or Z axis in a 3D Scatter Plot. It is used to map values
             * to an axis, typically by applying a range. When mapping, the scale axis
             * can transform the values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScaleAxis3D extends ScaleAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the scale properties.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Scale(): Scale3D;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2785039869: null;
            }
            
            /**
             * Base class for Scale axes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScaleAxisBase extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the categorical axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Categorical(): ScaleAxisBase.CategoricalScaleAxis;
                /**
                 * Gets the continuous axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Continuous(): ScaleAxisBase.ContinuousScaleAxis;
                /**
                 * Controls if zero should be included on numeric range when auto zooming.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IncludeZeroInAutoZoom(): JsType<System.Boolean>;
                set IncludeZeroInAutoZoom(value: JsType<System.Boolean>);
                /**
                 * Controls the IncludeZeroInAutoZoom for individual scales.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedIncludeZeroInAutoZoom(): IndexedBool;
                /**
                 * Controls the Range for individual scales.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedRange(): IndexedAxisRange;
                /**
                 * Reverses the axis for individual scales. The returned indexedBool can
                 * be used to set and get reverse for individual scales.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedReversed(): IndexedBool;
                /**
                 * Represents the axis transformation type for individual scales.
                 * The returned indexedTransformType can be used to set and get the
                 * axisTransformType for individual scales.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedTransformType(): IndexedAxisTransformType;
                /**
                 * Enables individual scaling.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndividualScaling(): JsType<System.Boolean>;
                set IndividualScaling(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the scaling mode that defines what the individual scaling is based on.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndividualScalingMode(): IndividualScalingMode;
                set IndividualScalingMode(value: IndividualScalingMode);
                /**
                 * Controls whether this axis automatically zooms to show the filtered data,
                 * or zooms manually using the {@link Spotfire.Dxp.Application.Visuals.ScaleAxisBase.ZoomRange}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ManualZoom(): JsType<System.Boolean>;
                set ManualZoom(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the overall range of this axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Range(): AxisRange;
                set Range(value: AxisRange);
                /**
                 * Gets or sets the value indicating whether the axis is reversed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Reversed(): JsType<System.Boolean>;
                set Reversed(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether an axis selector should be shown for this axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowAxisSelector(): JsType<System.Boolean>;
                set ShowAxisSelector(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the title font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TitleFontMetadata(): Framework.Styles.FontMetadata;
                set TitleFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Represents the axis transformation type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TransformType(): AxisTransformType;
                set TransformType(value: AxisTransformType);
                /**
                 * Get or sets the visible range of the axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ZoomRange(): AxisRange;
                set ZoomRange(value: AxisRange);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1530176159: null;
            }
            
            /**
             * Base class for Scales.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScaleBase extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontMetadata(): Framework.Styles.FontMetadata;
                set FontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets the formatting for this scale.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Formatting(): Formatting;
                /**
                 * Controls the label orientation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedLabelOrientation(): IndexedLabelOrientation;
                /**
                 * Controls maximum number of ticks for dual scales. Use a {@link Spotfire.Dxp.Application.Visuals.ScaleDock} value to specify which scale to access.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedMaximumNumberOfTicks(): IndexedInt;
                /**
                 * Controls whether to render gridlines or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedShowGridlines(): IndexedBool;
                /**
                 * Controls whether this {@link Spotfire.Dxp.Application.Visuals.ScaleBase} renders the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IndexedShowLabels(): IndexedBool;
                /**
                 * Gets or sets the label orientation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelOrientation(): LabelOrientation;
                set LabelOrientation(value: LabelOrientation);
                /**
                 * Gets or sets the maximum number of ticks.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaximumNumberOfTicks(): JsType<System.Int32>;
                set MaximumNumberOfTicks(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether to render gridlines or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowGridlines(): JsType<System.Boolean>;
                set ShowGridlines(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.ScaleBase} renders the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowLabels(): JsType<System.Boolean>;
                set ShowLabels(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the span of the area.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Span(): JsType<System.Single>;
                set Span(value: JsType<System.Single>);
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.ScaleBase} is visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2934063598: null;
            }
            
            /**
             * Scale placements.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScaleDock extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Right or top. */
                static readonly Far: ScaleDock;
                /** Left or bottom. */
                static readonly Near: ScaleDock;
                private __type_2974469592: null;
            }
            
            /**
             * Algorithm used for visiblity of scale labels.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScaleLabelLayout extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Automatic label count. */
                static readonly Automatic: ScaleLabelLayout;
                /** Label count is limited by the property {@link Spotfire.Dxp.Application.Visuals.ScaleBase.MaximumNumberOfTicks}. */
                static readonly MaximumNumberOfTicks: ScaleLabelLayout;
                private __type_3843398469: null;
            }
            
            /**
             * Represents properties such as renderer which apply to scale labels.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScaleLabels extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Clears all values except the default value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearLevelSettings(): void;
                /**
                 * Checks if there are settings for the indicated expression.
                 * @param expressionDisplayName The display name of an expression on the {@link Spotfire.Dxp.Application.Visuals.ScaleAxis} which owns this setting.
                 * @returns true if the the indicated expression exists; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ContainsLevelSettings(expressionDisplayName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Removes the {@link Spotfire.Dxp.Application.Visuals.ScaleLabelsLevelSettings} corresponding to the indicated expression.
                 * @param expressionDisplayName The display name of an expression on the {@link Spotfire.Dxp.Application.Visuals.ScaleAxis} which owns this setting.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveLevelSettings(expressionDisplayName: (JsType<System.String> | System.String)): void;
                /**
                 * Sets the scale value renderer type for a hierarchy level on a categorical axis.
                 * @param expressionDisplayName The display name of the expression to be rendered.
                 * @param typeId The type id for the renderer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetLevelSettings(expressionDisplayName: (JsType<System.String> | System.String), typeId: Framework.DocumentModel.TypeIdentifier): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.ScaleLabelsLevelSettings} corresponding to the indicated expression.
                 * @param expressionDisplayName The display name of an expression on the {@link Spotfire.Dxp.Application.Visuals.ScaleAxis} which owns this setting.
                 * @returns The {@link Spotfire.Dxp.Application.Visuals.ScaleLabelsLevelSettings} corresponding to the indicated expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.String> | System.String), ScaleLabelsLevelSettings> & PropertySet<(JsType<System.String> | System.String), ScaleLabelsLevelSettings>);
                private __type_1198862556: null;
            }
            
            /**
             * Class containing settings for how to render images used as labels on scale axes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScaleLabelsLevelSettings extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the value renderer settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RendererSettings(): ValueRenderers.ValueRendererSettings;
                /**
                 * Gets or sets the maximum side length in pixels of the square within which each image label
                 * is rendered on the axis and in its default tooltip.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Size(): JsType<System.Single>;
                set Size(value: JsType<System.Single>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1715533459: null;
            }
            
            /**
             * Representation of a Scatter Plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScatterPlot extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the axis object representing the coloring of markers in this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): ScatterPlotDetails;
                /**
                 * Gets the drawing order axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DrawingOrderAxis(): OrderByAxis;
                /**
                 * Gets the fitting models.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FittingModels(): FittingModels.FittingModelCollection;
                /**
                 * Gets the label column, that is, the column to label the features in the
                 * plot by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelColumn(): LabelColumn;
                /**
                 * Gets or sets the font used for the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets the size of labels showing images.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelImageSize(): JsType<System.Single>;
                set LabelImageSize(value: JsType<System.Single>);
                /**
                 * Gets the label renderer settings. To set the renderer used for labels, use {@link Spotfire.Dxp.Application.Visuals.ScatterPlot.SetLabelRenderer|SetLabelRenderer(typeId)}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelRenderer(): ValueRenderers.ValueRendererSettings;
                /**
                 * Gets or sets a value indicating the visibility of labels in this scatter plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelVisibility(): LabelVisibility;
                set LabelVisibility(value: LabelVisibility);
                /**
                 * Gets the line connection properties of this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LineConnection(): LineConnection;
                /**
                 * Gets the axis object which can be used to alter the expression by
                 * which the plot is marked.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerByAxis(): GroupByAxis;
                /**
                 * Gets or sets the class type of the markers in this scatter plot.
                 * Using this property the markers can be switched between simple
                 * markers, tiled markers and separate charts (for example pie charts).
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerClass(): MarkerClass;
                set MarkerClass(value: MarkerClass);
                /**
                 * Gets or sets the label layout. See {@link Spotfire.Dxp.Application.Visuals.ScatterPlot.MarkerLabelLayout} for more details.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerLabelLayout(): MarkerLabelLayout;
                set MarkerLabelLayout(value: MarkerLabelLayout);
                /**
                 * Gets or sets the size of the markers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerSize(): JsType<System.Single>;
                set MarkerSize(value: JsType<System.Single>);
                /**
                 * Gets or sets a value indicating max number of drawn labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxNumberOfLabels(): JsType<System.Int32>;
                set MaxNumberOfLabels(value: JsType<System.Int32>);
                /**
                 * Gets the pie marker settings to use when this plot is configured to show pies.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PieMarker(): PieMarker;
                /**
                 * Gets the marker rotation axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RotationAxis(): MarkerRotationAxis;
                /**
                 * Gets the axis object which can be used to alter the expression by
                 * which marker shape is chosen.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShapeAxis(): ShapeAxis;
                /**
                 * Gets or sets a value indicating whether a label with empty content should be shown or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowEmptyLabels(): JsType<System.Boolean>;
                set ShowEmptyLabels(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a flag indicating if a straight line fit should be drawn.
                 * Obsolete. Add a straight line fit using FittingModels instead.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowStraightLineFit(): JsType<System.Boolean>;
                set ShowStraightLineFit(value: JsType<System.Boolean>);
                /**
                 * Gets the axis object representing the size of markers in this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SizeAxis(): SizeAxis;
                /**
                 * Gets the X axis of this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): ScaleAxis;
                /**
                 * Gets or sets the amount of jittering in the x direction.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XJitter(): JsType<System.Double>;
                set XJitter(value: JsType<System.Double>);
                /**
                 * Gets the Y axis of this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): ScaleAxis;
                /**
                 * Gets or sets the amount of jittering in the y direction.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YJitter(): JsType<System.Double>;
                set YJitter(value: JsType<System.Double>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Sets the label renderer.
                 * @param typeId The type id of the renderer.
                 * @returns The label renderer settings associated with the type id.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetLabelRenderer(typeId: Framework.DocumentModel.TypeIdentifier): ValueRenderers.ValueRendererSettings;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2991449304: null;
            }
            
            /**
             * Representation of a 3D Scatter Plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScatterPlot3D extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the camera.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Camera(): Camera;
                /**
                 * Gets the axis that varies the color of markers based on an expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): ScatterPlot3DDetails;
                /**
                 * Gets the label column, that is, an object whose expression controls what is
                 * displayed in the marker labels in the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelColumn(): LabelColumn;
                /**
                 * Gets or sets the font used for marker labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets a value controlling which subset of the markers to label.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelVisibility(): LabelVisibility;
                set LabelVisibility(value: LabelVisibility);
                /**
                 * Gets the axis that controls aggregation of markers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerByAxis(): GroupByAxis;
                /**
                 * Gets or sets the size of the markers. Allowed values are 0-100.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkerSize(): JsType<System.Single>;
                set MarkerSize(value: JsType<System.Single>);
                /**
                 * Gets or sets a value indicating max number of drawn marker labels. Valid range is 0 through 200.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxNumberOfLabels(): JsType<System.Int32>;
                set MaxNumberOfLabels(value: JsType<System.Int32>);
                /**
                 * Gets the axis that varies the shape of markers based on an expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShapeAxis(): ShapeAxis3D;
                /**
                 * Gets or sets a value indicating whether to show the 3D navigation controls not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowNavigationControls(): JsType<System.Boolean>;
                set ShowNavigationControls(value: JsType<System.Boolean>);
                /**
                 * Gets the axis that varies the size of markers based on an expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SizeAxis(): SizeAxis;
                /**
                 * Gets the X axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): ScaleAxis3D;
                /**
                 * Gets or sets the amount of jittering in the x direction.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XJitter(): JsType<System.Double>;
                set XJitter(value: JsType<System.Double>);
                /**
                 * Gets the Y axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): ScaleAxis3D;
                /**
                 * Gets or sets the amount of jittering in the y direction.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YJitter(): JsType<System.Double>;
                set YJitter(value: JsType<System.Double>);
                /**
                 * Gets the Z axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ZAxis(): ScaleAxis3D;
                /**
                 * Gets or sets the amount of jittering in the z direction.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ZJitter(): JsType<System.Double>;
                set ZJitter(value: JsType<System.Double>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_814053687: null;
            }
            
            /**
             * Class representing marker detail information for 3D scatter plot, typically displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScatterPlot3DDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the marker by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Marker(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the shape axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Shape(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the size axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Size(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the X axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the Y axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the Z axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Z(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3048497477: null;
            }
            
            /**
             * Representation of {@link Spotfire.Dxp.Application.Visuals.ScatterPlot} marker detail information,
             * typically displayed in tooltips. The details object of a Scatter Plot
             * can be accessed through its {@link Spotfire.Dxp.Application.Visuals.ScatterPlot.Details} property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ScatterPlotDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the marker by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Marker(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the rotation by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Rotation(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the shape by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Shape(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the size by axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Size(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the X axis of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the Y axis of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1651869098: null;
            }
            
            /**
             * Sector size axis class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SectorSizeAxis extends ContinuousAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendSectorSizeItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_653156267: null;
            }
            
            /**
             * Class representing a marker shape in a {@link Spotfire.Dxp.Application.Visuals.ScatterPlot3D | 3D scatter plot}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Shape3D extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2034444377: null;
            }
            
            /**
             * ShapeAxis class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ShapeAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the default shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultShape(): MarkerShape;
                set DefaultShape(value: MarkerShape);
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendMarkerShapeItem;
                /**
                 * Returns the {@link Spotfire.Dxp.Application.Visuals.ShapeAxis.ShapeMap} of the axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShapeMap(): ShapeMap;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2921351117: null;
            }
            
            /**
             * Axis that controls the shape of markers in a {@link Spotfire.Dxp.Application.Visuals.ScatterPlot3D | 3D scatter plot}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ShapeAxis3D extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Sets or gets the default shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultShape(): Shape3D;
                set DefaultShape(value: Shape3D);
                /**
                 * Gets the legend item associated with this axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendShape3DItem;
                /**
                 * Controls the shape for a specific data value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShapeMap(): ShapeMap3D;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2795780778: null;
            }
            
            /**
             * Class used to map data values to {@link Spotfire.Dxp.Application.Visuals.MarkerShape | shapes} in a {@link Spotfire.Dxp.Application.Visuals.ScatterPlot | scatter plot}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ShapeMap extends Object {
                /**
                 * Gets the number of categories.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Determines whether the {@link Spotfire.Dxp.Application.Visuals.ShapeMap} contains a shape for a specific category.
                 * @param category A {@link Spotfire.Dxp.Application.Visuals.CategoryKey} object identifying the category.
                 * @returns true if there is a shape for the given category; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(category: CategoryKey): JsType<System.Boolean>;
                /**
                 * Gets all categories, sorted according to the category.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetCategories(): System.Collections.Generic.IList<CategoryKey>;
                /**
                 * Tries to get the shape for a given category, returning true upon success.
                 * @param category A {@link Spotfire.Dxp.Application.Visuals.CategoryKey} object identifying the category.
                 * @param shape When this method returns, contains the shape associated with
                 * the specified category, if one is found; otherwise null.
                 * @returns true if this instance contains a shape for the specified category; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetShape(category: CategoryKey, shape: OutParam<MarkerShape>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the shape for a category.
                 * @param category The category.
                 * @returns The shape for the category.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, MarkerShape> & PropertySet<TypedArray<System.Object>, MarkerShape>) & PropertyGet<CategoryKey, MarkerShape>) & PropertySet<CategoryKey, MarkerShape>);
                private __type_3359138: null;
            }
            
            /**
             * Class used to map data values to shapes in a {@link Spotfire.Dxp.Application.Visuals.ScatterPlot3D | 3D scatter plot}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ShapeMap3D extends Object {
                /**
                 * Gets all categories.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Categories(): System.Collections.Generic.IEnumerable<CategoryKey>;
                /**
                 * Gets the number of categories.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Determines whether the {@link Spotfire.Dxp.Application.Visuals.ShapeMap3D} contains a shape for a specific category.
                 * @param category A {@link Spotfire.Dxp.Application.Visuals.CategoryKey} object identifying the category.
                 * @returns true if there is a shape for the given category; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(category: CategoryKey): JsType<System.Boolean>;
                /**
                 * Tries to get the shape for a given category, returning true upon success.
                 * @param category A {@link Spotfire.Dxp.Application.Visuals.CategoryKey} object identifying the category.
                 * @param shape When this method returns, contains the shape associated with
                 * the specified category, if one is found; otherwise null.
                 * @returns true if this instance contains a shape for the specified category; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetShape(category: CategoryKey, shape: OutParam<Shape3D>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                /**
                 * Gets or sets the shape for a category.
                 * @param category The category.
                 * @returns The shape for the category.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (((PropertyGet<TypedArray<System.Object>, Shape3D> & PropertySet<TypedArray<System.Object>, Shape3D>) & PropertyGet<CategoryKey, Shape3D>) & PropertySet<CategoryKey, Shape3D>);
                private __type_3552195689: null;
            }
            
            /**
             * Static class holding the standard shapes used by the 3D scatter plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Shapes3D extends Object {
                /**
                 * Gets a cube shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Cube(): Shape3D;
                /**
                 * Gets a diamond shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Diamond(): Shape3D;
                /**
                 * Gets a dodecahedron shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Dodecahedron(): Shape3D;
                /**
                 * Gets a horizontal bar shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get HorizontalBar(): Shape3D;
                /**
                 * Gets a 3D plus sign shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Plus(): Shape3D;
                /**
                 * Gets a sphere shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Sphere(): Shape3D;
                /**
                 * Gets a tetrahedron shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Tetrahedron(): Shape3D;
                /**
                 * Gets a vertical bar shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get VerticalBar(): Shape3D;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1898823090: null;
            }
            
            /**
             * SizeAxis class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SizeAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendSizeItem;
                /**
                 * Gets or sets the range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Range(): AxisRange;
                set Range(value: AxisRange);
                /**
                 * Gets or sets the type of the scale.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ScaleType(): ContinuousScaleType;
                set ScaleType(value: ContinuousScaleType);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2746641275: null;
            }
            
            /**
             * Enum controlling stacking in visualizations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class StackMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** No stacking. */
                static readonly None: StackMode;
                /** Stack elements on top of each other. */
                static readonly Stack: StackMode;
                /** Stack elements on top of each other using a relative scale. */
                static readonly Stack100Percent: StackMode;
                private __type_2863482286: null;
            }
            
            /**
             * Represents a string condition in a conditional rule.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class StringRuleCondition extends RuleCondition implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the comparison operator for this rule.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ComparisonOperator(): ConditionalColoring.StringComparisonOperator;
                set ComparisonOperator(value: ConditionalColoring.StringComparisonOperator);
                /**
                 * Gets or sets the string value for this rule.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get StringValue(): ConditionalColoring.ConditionValue;
                set StringValue(value: ConditionalColoring.ConditionValue);
                /**
                 * Gets or sets the manual display name for the value of this StringRuleCondition.
                 * If set to null, the value will be represented with an auto-generated name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get StringValueManualDisplayName(): JsType<System.String>;
                set StringValueManualDisplayName(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2196942405: null;
            }
            
            /**
             * Summary table class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SummaryTable extends Visualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the collection of aggregation methods used in the Summary Table, for example "Sum, Avg, Max".
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Aggregations(): SummaryTableAggregationCollection;
                /**
                 * Gets or sets a value controlling if columns added to the data table rendered by this SummaryTable should automatically be shown.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AutoAddNewColumns(): JsType<System.Boolean>;
                set AutoAddNewColumns(value: JsType<System.Boolean>);
                /**
                 * Gets the row axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CategoryAxis(): CategoricalAxisBase;
                /**
                 * Gets the collection of table columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Columns(): SummaryTableVisibleColumnCollection;
                /**
                 * Gets or sets a value indicating whether or not to export
                 * summary table data in the Web Player.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ExportDataEnabled(): JsType<System.Boolean>;
                set ExportDataEnabled(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the width of first column, the header.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FirstColumnWidth(): JsType<System.Int32>;
                set FirstColumnWidth(value: JsType<System.Int32>);
                /**
                 * Gets or sets the height of column headers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FirstRowHeight(): JsType<System.Int32>;
                set FirstRowHeight(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether to show gridlines.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowGridlines(): JsType<System.Boolean>;
                set ShowGridlines(value: JsType<System.Boolean>);
                /**
                 * Gets the collection of columns to sort by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortColumns(): SummaryTableSortColumnCollection;
                /**
                 * Gets or sets the table font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableFontMetadata(): Framework.Styles.FontMetadata;
                set TableFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets the table header font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableHeaderFontMetadata(): Framework.Styles.FontMetadata;
                set TableHeaderFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a layout object that can be used to access the values in the table.
                 * @returns A {@link Spotfire.Dxp.Application.Visuals.TableLayout} object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CreateLayout(): TableLayout;
                /**
                 * Exports the content of the summary table as tab separated text.
                 * @param writer The text writer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExportText(writer: (JsType<System.IO.TextWriter> | System.IO.TextWriter)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1773938911: null;
            }
            
            /**
             * A collection of {@link Spotfire.Dxp.Application.Visuals.SummaryTableAggregationColumn} objects.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SummaryTableAggregationCollection extends Framework.DocumentModel.DocumentNodeList<SummaryTableAggregationColumn> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<SummaryTableAggregationColumn>>, Explicit<System.Collections.IEnumerable>, Explicit<System.Collections.Generic.IList<SummaryTableAggregationColumn>>, Explicit<System.Collections.Generic.ICollection<SummaryTableAggregationColumn>> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<SummaryTableAggregationColumn>;
                /**
                 * Add a aggregation method to the aggregations shown
                 * in the {@link Spotfire.Dxp.Application.Visuals.SummaryTable} that owns this collection.
                 * @param methodName The method name to add.
                 * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.SummaryTableAggregationColumn} resulting from the addition.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNew(methodName: (JsType<System.String> | System.String)): SummaryTableAggregationColumn;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<SummaryTableAggregationColumn>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<SummaryTableAggregationColumn>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<SummaryTableAggregationColumn>>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), SummaryTableAggregationColumn> & PropertySet<(JsType<System.Int32> | System.Int32), SummaryTableAggregationColumn>);
                private __type_2654050685: null;
            }
            
            /**
             * An aggregation method in a SummaryTable.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SummaryTableAggregationColumn extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the display name of this aggregation method.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the identifying name of this aggregation method.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MethodName(): JsType<System.String>;
                /**
                 * Gets or sets the column width. Width is negative if no width has been set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Width(): JsType<System.Int32>;
                set Width(value: JsType<System.Int32>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2124900197: null;
            }
            
            /**
             * Defines sort order for the Summary Table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SummaryTableSortColumn extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the column the table is sorted by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortColumn(): SummaryTableAggregationColumn;
                /**
                 * Gets the sort order.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortOrder(): Data.SortOrder;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_116637679: null;
            }
            
            /**
             * A collection of columns to sort a Summary Table by.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SummaryTableSortColumnCollection extends Framework.DocumentModel.DocumentNodeListBase<SummaryTableSortColumn> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<SummaryTableSortColumn>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<SummaryTableSortColumn>;
                /**
                 * Clears any previous sort columns and adds the new sort column specified by the parameters.
                 * @param colToSortBy The column to sort by.
                 * @param sortOrder The {@link Spotfire.Dxp.Data.SortOrder} to use.
                 * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.SummaryTableSortColumn}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Set(colToSortBy: SummaryTableAggregationColumn, sortOrder: Data.SortOrder): SummaryTableSortColumn;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<SummaryTableSortColumn>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), SummaryTableSortColumn>;
                private __type_1879653789: null;
            }
            
            /**
             * A visible summary table column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SummaryTableVisibleColumn extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the data column name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataColumnName(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3613286423: null;
            }
            
            /**
             * Collection of columns used in the plot.
             * This collection contains the columns visible in a {@link Spotfire.Dxp.Application.Visuals.SummaryTable}.
             * The collection is synchronized with changes in the underlying data, such
             * as remove, add and rename of columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SummaryTableVisibleColumnCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<SummaryTableVisibleColumn>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of {@link Spotfire.Dxp.Application.Visuals.SummaryTableVisibleColumn}s in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<SummaryTableVisibleColumn>;
                /**
                 * Add an existing data column by name.
                 * @param dataColumnName The name of the data column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddNew(dataColumnName: (JsType<System.String> | System.String)): SummaryTableVisibleColumn;
                /**
                 * Clears the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines whether this
                 * {@link Spotfire.Dxp.Application.Visuals.SummaryTableVisibleColumnCollection} contains the specified column.
                 * @param column The column.
                 * @returns true if this instance contains the specified column; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(column: SummaryTableVisibleColumn): JsType<System.Boolean>;
                /**
                 * Checks if columnName is contained in this collection.
                 * @param columnName The name of the column to look for.
                 * @returns true if the column is part of the collection; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(columnName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Gets an enumerator.
                 * @returns The enumerator.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<SummaryTableVisibleColumn>;
                /**
                 * Returns the index in the collection that the column has.
                 * @param column The column to look for.
                 * @returns The index of the column if it exists, otherwise -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(column: SummaryTableVisibleColumn): JsType<System.Int32>;
                /**
                 * Move the item at fromIndex to toIndex where both
                 * indexes are prior to any insertion and removal operations.
                 * @param fromIndex From index.
                 * @param toIndex To index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the column named columnName from the collection if it exists.
                 * @param columnName The name of the column to be removed.
                 * @returns true if the column was found and removed; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(columnName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Removes a column from the collection.
                 * @param item The {@link Spotfire.Dxp.Application.Visuals.SummaryTableVisibleColumn} to remove.
                 * @returns true if the column was found and removed; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: SummaryTableVisibleColumn): JsType<System.Boolean>;
                /**
                 * Remove the {@link Spotfire.Dxp.Application.Visuals.SummaryTableVisibleColumn} located at index.
                 * @param index The index of the column to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<SummaryTableVisibleColumn>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Returns the {@link Spotfire.Dxp.Application.Visuals.SummaryTableVisibleColumn} for the data column named columnName.
                 * @param columnName The name of the column to find.
                 * @returns The {@link Spotfire.Dxp.Application.Visuals.SummaryTableVisibleColumn}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), SummaryTableVisibleColumn> & PropertyGet<(JsType<System.String> | System.String), SummaryTableVisibleColumn>);
                private __type_2263470777: null;
            }
            
            /**
             * Represents a cell in a tabular visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableCell extends Object {
                /**
                 * Gets the color of the background.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BackgroundColor(): JsType<System.Drawing.Color>;
                /**
                 * Gets the border color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderColor(): JsType<System.Drawing.Color>;
                /**
                 * Gets the border style.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderStyle(): TableCellBorderStyle;
                /**
                 * Gets the bounds of the cell. The point (0,0)
                 * represents the upper left corner of whole layout.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Bounds(): JsType<System.Drawing.Rectangle>;
                /**
                 * Gets a value indicating whether this instance can have image.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CanHaveImage(): JsType<System.Boolean>;
                /**
                 * Gets the type of a cell.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CellType(): TableCellType;
                /**
                 * Gets the index of the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnIndex(): JsType<System.Int32>;
                /**
                 * Gets the data value of this cell. Can be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataValue(): Data.DataValue;
                /**
                 * Gets metadata for the data value of this cell. Can be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataValueProperties(): Data.DataValueProperties;
                /**
                 * Gets the font used for text in the cell.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontMetadata(): Framework.Styles.FontMetadata;
                /**
                 * Gets the horizontal alignment of text in the cell.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HorizontalTextAlignment(): Framework.Styles.TextAlign;
                /**
                 * Gets a value indicating whether this instance is upper left in range.
                 * This will always be true for cells that do not span over multiple columns or rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsUpperLeftInRange(): JsType<System.Boolean>;
                /**
                 * Gets a string representing a link url. If the cell does not have a link, this property returns String.Empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Link(): JsType<System.String>;
                /**
                 * Gets the extent of the cell expressed as a {@link Spotfire.Dxp.Application.Visuals.CellRange}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Range(): CellRange;
                /**
                 * Gets the row index of the cell.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowIndex(): JsType<System.Int32>;
                /**
                 * Gets the text.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Text(): JsType<System.String>;
                /**
                 * Gets the text color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TextColor(): JsType<System.Drawing.Color>;
                /**
                 * Gets the tooltip for this cell.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Tooltip(): JsType<System.String>;
                /**
                 * Gets a value indicating whether cell text can be drawn on muliple lines or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get WordWrap(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Gets the image displayed in the cell. The image is written in PNG format to the provided stream.
                 * @param outputStream The stream to write output data to.
                 * @returns true if the cell contains an image and it has been written to the provided stream. Otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetImageData(outputStream: (JsType<System.IO.Stream> | System.IO.Stream)): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2142493909: null;
            }
            
            /**
             * Specifies the border style of {@link Spotfire.Dxp.Application.Visuals.TableCell}
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableCellBorderStyle extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** No border at all will be drawn */
                static readonly None: TableCellBorderStyle;
                /** Standard solid thin border around entire cell. */
                static readonly Solid: TableCellBorderStyle;
                private __type_2794877360: null;
            }
            
            /**
             * Delegate used to supply a suitable size for images in table cells.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableCellImageSizeProvider extends Object {
                /**
                 * Delegate used to supply a suitable size for images in table cells.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(callback: (cell: TableCell) => System.Drawing.Size);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_585882290: null;
            }
            
            /**
             * Specifies the type of a {@link Spotfire.Dxp.Application.Visuals.TableCell}
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableCellType extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The cell represents a header. */
                static readonly Header: TableCellType;
                /** The cell is a value cell. */
                static readonly Value: TableCellType;
                private __type_1995473749: null;
            }
            
            /**
             * Represents a column visible in a table plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableColumn extends Object {
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.TableColumn.DataColumn} associated with this object. This property is null for virtual columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataColumn(): (Data.DataColumn | null);
                /**
                 * The name of the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets the column's value renderer model/settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ValueRendererSettings(): ValueRenderers.ValueRendererSettings;
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.TableColumn.VirtualColumn} associated with this object.
                 * This property is null if this table column is based on a {@link Spotfire.Dxp.Application.Visuals.TableColumn.DataColumn}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get VirtualColumn(): (Data.VirtualColumns.VirtualColumn | null);
                /**
                 * Gets or sets the width.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Width(): JsType<System.Int32>;
                set Width(value: JsType<System.Int32>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3210622273: null;
            }
            
            /**
             * TableColumnCollection class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableColumnCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<TableColumn>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the count.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<TableColumn>;
                /**
                 * Adds a table plot column for the specified data column.
                 * @param dataColumn The data column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(dataColumn: Data.DataColumn): void;
                /**
                 * Adds a table plot column for the specified virtual column.
                 * @param virtualColumn The virtual column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(virtualColumn: Data.VirtualColumns.VirtualColumn): void;
                /**
                 * Adds a table plot column with a value renderer for the specified data
                 * column.
                 * @param dataColumn The data column.
                 * @param rendererIdentifier The type identifier of the value
                 * renderer that the plot column should have.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(dataColumn: Data.DataColumn, rendererIdentifier: Framework.DocumentModel.TypeIdentifier): void;
                /**
                 * Adds a table plot column with a value
                 * renderer for the specified virtual column.
                 * @param virtualColumn The virtual column.
                 * @param rendererIdentifier The type identifier of the
                 * value renderer that the plot column should have.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(virtualColumn: Data.VirtualColumns.VirtualColumn, rendererIdentifier: Framework.DocumentModel.TypeIdentifier): void;
                /**
                 * Adds multiple data columns to the table plot.
                 * @param dataColumns The data columns to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddRange(dataColumns: OrExplicit<System.Collections.Generic.IEnumerable<Data.DataColumn>>): void;
                /**
                 * Adds multiple virtual columns to the table plot.
                 * @param virtualColumns The virtual columns to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddRange(virtualColumns: OrExplicit<System.Collections.Generic.IEnumerable<Data.VirtualColumns.VirtualColumn>>): void;
                /**
                 * Clears the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines if a data column is present in the collection.
                 * @param dataColumn The column to look for.
                 * @returns True if the column was present, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(dataColumn: Data.DataColumn): JsType<System.Boolean>;
                /**
                 * Determines if a virtual column is present in the collection.
                 * @param virtualColumn The column to look for.
                 * @returns True if the column was present, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(virtualColumn: Data.VirtualColumns.VirtualColumn): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through the collection.
                 * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<TableColumn>;
                /**
                 * Removes a data column from the table plot.
                 * @param dataColumn The column to remove.
                 * @returns True if the column was present in the collection, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(dataColumn: Data.DataColumn): JsType<System.Boolean>;
                /**
                 * Removes a virtual column from the table plot.
                 * @param virtualColumn The column to remove.
                 * @returns True if the column was present in the collection, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(virtualColumn: Data.VirtualColumns.VirtualColumn): JsType<System.Boolean>;
                /**
                 * Sets the value renderer for the plot column corresponding
                 * to a given data column.
                 * @param dataColumn The data column to set the renderer for.
                 * @param rendererIdentifier The type identifier of the value renderer to set.
                 * ValueRendererTypeIdentifiers.VirtualValueRenderer cannot be used, use {@link Spotfire.Dxp.Application.Visuals.TablePlotBase.VirtualColumnProducers} to add virtual values to the table plot.
                 * @returns The newly created value renderer settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetValueRenderer(dataColumn: Data.DataColumn, rendererIdentifier: Framework.DocumentModel.TypeIdentifier): ValueRenderers.ValueRendererSettings;
                /**
                 * Sets the value renderer for the plot column corresponding to a
                 * given virtual column.
                 * @param virtualColumn The virtual column to set the renderer for.
                 * @param rendererIdentifier The type identifier of the value renderer to set.
                 * ValueRendererTypeIdentifiers.VirtualValueRenderer cannot be used, use {@link Spotfire.Dxp.Application.Visuals.TablePlotBase.VirtualColumnProducers} to add virtual values to the table plot.
                 * @returns The newly created value renderer settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetValueRenderer(virtualColumn: Data.VirtualColumns.VirtualColumn, rendererIdentifier: Framework.DocumentModel.TypeIdentifier): ValueRenderers.ValueRendererSettings;
                /**
                 * Gets the table column for a given data column provided it is present in the collection.
                 * @param dataColumn The data column to get a table column for.
                 * @param tableColumn If successful returns the table column for the data column.
                 * @returns True if the data column was present in the collection, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetTableColumn(dataColumn: Data.DataColumn, tableColumn: OutParam<TableColumn>): JsType<System.Boolean>;
                /**
                 * Gets the table column for a given virtual column provided it is present in the collection.
                 * @param virtualColumn The virtual column to get a table column for.
                 * @param tableColumn If successful returns the table column for the data column.
                 * @returns True if the virtual column was present in the collection, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetTableColumn(virtualColumn: Data.VirtualColumns.VirtualColumn, tableColumn: OutParam<TableColumn>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<TableColumn>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_2660032623: null;
            }
            
            /**
             * Represents table header behavior when scrolling.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableHeaderScrollBehavior extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Always scroll the headers when the table is scrolled. */
                static readonly Always: TableHeaderScrollBehavior;
                /**
                 * Switch automatically between frozen and scrollable headers.
                 * When the headers cover almost all of the available table width,
                 * the scrolling behaviour changes automatically from frozen to scrollable headers.
                 */
                static readonly Automatic: TableHeaderScrollBehavior;
                /** Never scroll the headers. Headers are always frozen. */
                static readonly Never: TableHeaderScrollBehavior;
                private __type_1872131273: null;
            }
            
            /**
             * Class describing the layout of the table in tabular visualizations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableLayout extends Object {
                /**
                 * Gets the number of columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnCount(): JsType<System.Int32>;
                /**
                 * Gets the font used in the table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontMetadata(): Framework.Styles.FontMetadata;
                /**
                 * Gets the number of frozen columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FrozenColumnCount(): JsType<System.Int32>;
                /**
                 * The width of the frozen columns, including any row headers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FrozenColumnsWidth(): JsType<System.Int32>;
                /**
                 * Gets the number of frozen rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FrozenRowCount(): JsType<System.Int32>;
                /**
                 * The height of the frozen rows, including column headers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FrozenRowsHeight(): JsType<System.Int32>;
                /**
                 * The total height of the layout.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Height(): JsType<System.Int32>;
                /**
                 * Gets the number of rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowCount(): JsType<System.Int32>;
                /**
                 * The current scroll position in the view. This point is expressed as an offset into the area of
                 * the non-frozen rows and columns. The value Point.Empty signals that no scrolling has taken place.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ScrollPosition(): JsType<System.Drawing.Point>;
                /**
                 * The total width of the layout.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Width(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Implements {@link System.IDisposable}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Dispose(): void;
                /**
                 * Gets the cell at a given point.
                 * @param point The point.
                 * @returns A cell range. This cell range can be {@link Spotfire.Dxp.Application.Visuals.CellRange.Empty} if the point is outside of the bounds of the layout.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetCellRange(point: (JsType<System.Drawing.Point> | System.Drawing.Point)): CellRange;
                /**
                 * Gets the cell range for a given rectangle.
                 * @param rectangle The rectangle.
                 * @returns A cell range. If the rectangle doesn't have a width or height, an empty cell range is returned.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetCellRange(rectangle: (JsType<System.Drawing.Rectangle> | System.Drawing.Rectangle)): CellRange;
                /**
                 * Gets an iterator to all cells in the table.
                 * @returns An iterator.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetCells(): System.Collections.Generic.IEnumerable<TableCell>;
                /**
                 * Gets an iterator to the cells in the table.
                 * @param cellRange The range of the cells to iterate over.
                 * @returns An iterator.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetCells(cellRange: CellRange): System.Collections.Generic.IEnumerable<TableCell>;
                /**
                 * Gets an iterator to the cells in the table.
                 * @param range The range of the cells to iterate over.
                 * @param sizeProvider Delegate used to calculate a suitable size for an image that is to be rendered in a cell.
                 * @returns An iterator.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetCells(range: CellRange, sizeProvider: TableCellImageSizeProvider): System.Collections.Generic.IEnumerable<TableCell>;
                /**
                 * Gets the bounding rectangle for a range of cells.
                 * @param cellRange A cell range.
                 * @returns The bounding rectangle.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetCellsBounds(cellRange: CellRange): JsType<System.Drawing.Rectangle>;
                /**
                 * Gets the offset of a column.
                 * @param columnIndex A column index.
                 * @returns The offset to the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetColumnOffset(columnIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
                /**
                 * Gets the width of column.
                 * @param columnIndex A column index.
                 * @returns The width of the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetColumnWidth(columnIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
                /**
                 * Gets the height of a row.
                 * @param rowIndex The row index.
                 * @returns The height of the row.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetRowHeight(rowIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
                /**
                 * Gets the offset to a row.
                 * @param rowIndex The row index.
                 * @returns The offset to the row.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetRowOffset(rowIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_260453801: null;
            }
            
            /**
             * TablePlot class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TablePlot extends TablePlotBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the ColoringCollection for this plot. The ColoringCollection contains {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}
                 * objects, and has methods to apply them to parts of the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Colorings(): ConditionalColoring.ColoringCollection;
                /**
                 * Gets or sets a value indicating whether or not to export
                 * table data in web player.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ExportDataEnabled(): JsType<System.Boolean>;
                set ExportDataEnabled(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Exports the visualization data.
                 * @param typeIdentifier The type identifier.
                 * @param stream The stream.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExportData(typeIdentifier: Framework.DocumentModel.TypeIdentifier, stream: (JsType<System.IO.Stream> | System.IO.Stream)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1611602010: null;
            }
            
            /**
             * This class is an implementation detail and should never be used directly.
             * Instead, always use the {@link Spotfire.Dxp.Application.Visuals.TablePlot}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TablePlotBase extends Visualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value controlling if columns added to the data table rendered by this TablePlot should automatically be shown.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AutoAddNewColumns(): JsType<System.Boolean>;
                set AutoAddNewColumns(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the cell border style.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CellBorderStyle(): TablePlotBase.BorderStyle;
                set CellBorderStyle(value: TablePlotBase.BorderStyle);
                /**
                 * Gets or sets the number of frozen columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FrozenCount(): JsType<System.Int32>;
                set FrozenCount(value: JsType<System.Int32>);
                /**
                 * Gets or sets the height of the header in number of standard row heights.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HeaderHeight(): JsType<System.Int32>;
                set HeaderHeight(value: JsType<System.Int32>);
                /**
                 * Gets or sets the height of a row in number of standard row heights.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowHeight(): JsType<System.Int32>;
                set RowHeight(value: JsType<System.Int32>);
                /**
                 * Gets a collection with any columns that defines a sortorder for the table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortInfos(): TableSortInfoCollection;
                /**
                 * Gets the collection of columns included in this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableColumns(): TableColumnCollection;
                /**
                 * Gets or sets the table font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableFontMetadata(): Framework.Styles.FontMetadata;
                set TableFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets the table header font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TableHeaderFontMetadata(): Framework.Styles.FontMetadata;
                set TableHeaderFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets the virtual column producers collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get VirtualColumnProducers(): Data.VirtualColumns.VirtualColumnProducerCollection;
                /**
                 * Gets or sets a value indicating whether to wrap a cells text or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get WrapCellText(): JsType<System.Boolean>;
                set WrapCellText(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether or not to wrap header text.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get WrapHeaderText(): JsType<System.Boolean>;
                set WrapHeaderText(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a layout object that can be used to access the values in the table.
                 * @returns A {@link Spotfire.Dxp.Application.Visuals.TableLayout} object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CreateLayout(): TableLayout;
                /**
                 * Exports the content of the table plot as tab separated text.
                 * @param writer The text writer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExportText(writer: (JsType<System.IO.TextWriter> | System.IO.TextWriter)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2545479901: null;
            }
            
            /**
             * Specify column sort order.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TablePlotColumnSortMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Ascending sort order. */
                static readonly Ascending: TablePlotColumnSortMode;
                /** Descending sort order. */
                static readonly Descending: TablePlotColumnSortMode;
                private __type_3119280591: null;
            }
            
            /**
             * Represents info about how a specific column is used to sort by.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableSortInfo extends Object {
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.TableSortInfo.DataColumn} associated with this object, or null if there is none.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataColumn(): Data.DataColumn;
                /**
                 * Gets or sets the sort mode of the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortMode(): TablePlotColumnSortMode;
                set SortMode(value: TablePlotColumnSortMode);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3003298879: null;
            }
            
            /**
             * Contains info on how to sort the table plot.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableSortInfoCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<TableSortInfo>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * The number of items in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<TableSortInfo>;
                /**
                 * Adds a column that will be used to sort the table plot after.
                 * @param dataColumn The data column to sort by.
                 * @param sortMode Determines how to sort
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(dataColumn: Data.DataColumn, sortMode: TablePlotColumnSortMode): void;
                /**
                 * Removes all items in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines if a column is present in the collection.
                 * @param dataColumn The column to look for.
                 * @returns True if the column was present in the collection, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(dataColumn: Data.DataColumn): JsType<System.Boolean>;
                /**
                 * Gets an enumerator over the items in the collection.
                 * @returns The enumerator.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<TableSortInfo>;
                /**
                 * Removes a data column from the colleciton.
                 * @param dataColumn The data column to remove.
                 * @returns True if the column was present in the collection, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(dataColumn: Data.DataColumn): JsType<System.Boolean>;
                /**
                 * Gets the sort info corresponding to a given data column if it exists.
                 * @param dataColumn The data column to look for.
                 * @param sortInfo Contains info about how a given column is sorted if it is sorted.
                 * @returns True if the dataColumn was present in the collection, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetSortInfo(dataColumn: Data.DataColumn, sortInfo: OutParam<TableSortInfo>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<TableSortInfo>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_968769513: null;
            }
            
            /**
             * Represents a threshold condition in a conditional rule.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ThresholdRuleCondition extends RuleCondition implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the comparison operator for this rule.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ComparisonOperator(): ConditionalColoring.RuleComparisonOperator;
                set ComparisonOperator(value: ConditionalColoring.RuleComparisonOperator);
                /**
                 * Gets or sets the threshold value for this rule.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Threshold(): ConditionalColoring.ConditionValue;
                set Threshold(value: ConditionalColoring.ConditionValue);
                /**
                 * Gets or sets the manual display name for the value of this ThresholdRuleCondition.
                 * If set to null, the threshold value will be represented with an auto-generated name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ThresholdManualDisplayName(): JsType<System.String>;
                set ThresholdManualDisplayName(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1448553755: null;
            }
            
            /**
             * Represents a condition that matches the top or bottom n values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TopBottomRuleCondition extends RuleCondition implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets a value indicating whether this rule ranks bottom or top values. Default is false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsBottom(): JsType<System.Boolean>;
                set IsBottom(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the rank value for this rule.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Rank(): ConditionalColoring.ConditionValue;
                set Rank(value: ConditionalColoring.ConditionValue);
                /**
                 * Gets or sets the manual display name for the rank value of this TopBottomRuleCondition.
                 * If set to null, the rank value will be represented with an auto-generated name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RankManualDisplayName(): JsType<System.String>;
                set RankManualDisplayName(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_58651668: null;
            }
            
            /**
             * Class representing a treemap.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Treemap extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets the details displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): TreemapDetails;
                /**
                 * Gets the hierarchy axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HierarchyAxis(): TreemapHierarchyAxis;
                /**
                 * Gets or sets the font used for hierarchy headers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HierarchyHeaderFontMetadata(): Framework.Styles.FontMetadata;
                set HierarchyHeaderFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets the label font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets a value indicating if hierarchy headers should be shown or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowHierarchyHeaders(): JsType<System.Boolean>;
                set ShowHierarchyHeaders(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating if leaf node labels should be shown or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowLabels(): JsType<System.Boolean>;
                set ShowLabels(value: JsType<System.Boolean>);
                /**
                 * Gets the size axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SizeAxis(): TreemapSizeAxis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4162464355: null;
            }
            
            /**
             * Class representing detail information for a Treemap, typically displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TreemapDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the hierarchy axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Hierarchy(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the size axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Size(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3511429697: null;
            }
            
            /**
             * Axis used to represent the hierarchy in a {@link Spotfire.Dxp.Application.Visuals.Treemap}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TreemapHierarchyAxis extends CategoricalAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendTreemapHierarchyItem;
                /**
                 * Set of gets the zoom path.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ZoomPath(): CategoryKey;
                set ZoomPath(value: CategoryKey);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_4201349395: null;
            }
            
            /**
             * Axis controlling the size of areas in a {@link Spotfire.Dxp.Application.Visuals.Treemap}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TreemapSizeAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendTreemapSizeItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2054968989: null;
            }
            
            /**
             * Trellis class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Trellis extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the active page index, expressed as a zero-based index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ActivePageIndex(): JsType<System.Int32>;
                set ActivePageIndex(value: JsType<System.Int32>);
                /**
                 * Gets the active page index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ActivePageIndexRuntime(): JsType<System.Int32>;
                /**
                 * Gets the column axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnAxis(): TrellisAxis;
                /**
                 * Gets or sets the font used for the headers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HeaderFontMetadata(): Framework.Styles.FontMetadata;
                set HeaderFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets a value indicating whether trellising is active.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsTrellising(): JsType<System.Boolean>;
                /**
                 * Gets the legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LegendItem(): LegendTrellisItem;
                /**
                 * Gets or sets the number of trellis columns to display.
                 * Note that this property is only used when
                 * {@link Spotfire.Dxp.Application.Visuals.Trellis.TrellisMode} is {@link Spotfire.Dxp.Application.Visuals.TrellisMode.Panels}
                 * and {@link Spotfire.Dxp.Application.Visuals.Trellis.ManualLayout} is true.
                 * Setting this property will also set {@link Spotfire.Dxp.Application.Visuals.Trellis.ManualLayout} to true.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ManualColumnCount(): JsType<System.Int32>;
                set ManualColumnCount(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether the number
                 * of rows and columns are set manually or automatically.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ManualLayout(): JsType<System.Boolean>;
                set ManualLayout(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the number of trellis rows to display.
                 * Note that this property is only used when
                 * {@link Spotfire.Dxp.Application.Visuals.Trellis.TrellisMode} is {@link Spotfire.Dxp.Application.Visuals.TrellisMode.Panels}
                 * and {@link Spotfire.Dxp.Application.Visuals.Trellis.ManualLayout} is true.
                 * Setting this property will also set {@link Spotfire.Dxp.Application.Visuals.Trellis.ManualLayout} to true.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ManualRowCount(): JsType<System.Int32>;
                set ManualRowCount(value: JsType<System.Int32>);
                /**
                 * Gets the page axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PageAxis(): TrellisAxis;
                /**
                 * Gets the current number of trellis pages.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PageCount(): JsType<System.Int32>;
                /**
                 * Gets the panel axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PanelAxis(): TrellisAxis;
                /**
                 * Gets the row axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowAxis(): TrellisAxis;
                /**
                 * Gets or sets the trellis mode.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TrellisMode(): TrellisMode;
                set TrellisMode(value: TrellisMode);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_129619564: null;
            }
            
            /**
             * TrellisAxis class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TrellisAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3103499687: null;
            }
            
            /**
             * TrellisMode enumeration.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TrellisMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** By panel flow. */
                static readonly Panels: TrellisMode;
                /** By rows, columns, and pages. */
                static readonly RowsColumns: TrellisMode;
                private __type_193306339: null;
            }
            
            /**
             * This class is an implementation detail and should never be used directly.
             * Instead, always use the concrete visualization classes, such as {@link Spotfire.Dxp.Application.Visuals.BarChart}, directly.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TrellisVisualization extends Visualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the default font for the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultFontMetadata(): Framework.Styles.FontMetadata;
                set DefaultFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets the trellis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Trellis(): Trellis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1420137800: null;
            }
            
            /**
             * Class representing a point or vector in 3D space.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Tuple3D extends Object {
                /**
                 * Gets the x component.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): JsType<System.Double>;
                /**
                 * Gets the y component.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): JsType<System.Double>;
                /**
                 * Gets the z component.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Z(): JsType<System.Double>;
                /**
                 * Initializes a new instance of the Tuple3D structure.
                 * @param x x component.
                 * @param y y component.
                 * @param z z component.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(x: (JsType<System.Double> | System.Double), y: (JsType<System.Double> | System.Double), z: (JsType<System.Double> | System.Double));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3606855060: null;
            }
            
            /**
             * This class is an implementation detail and should never be used directly.
             * Instead, always use the concrete visualization classes, such as {@link Spotfire.Dxp.Application.Visuals.BarChart}, directly.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualContent extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the Visual's title.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Title(): JsType<System.String>;
                set Title(value: JsType<System.String>);
                /**
                 * Gets the type identifier for the visual.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * Gets the visual instance, or null if this instance is not owned by a visual.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visual(): (Visual | null);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Applies user preferences to a newly created visual.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ApplyUserPreferences(): void;
                /**
                 * Configures a newly created visual with reasonable default
                 * values given the current data set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AutoConfigure(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1485782956: null;
            }
            
            /**
             * Common base class for all visualizations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Visualization extends VisualContent implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the plot data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Data(): VisualizationData;
                /**
                 * Gets or sets the plot description.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                set Description(value: JsType<System.String>);
                /**
                 * Gets the horizontal legend object for this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HorizontalLegend(): HorizontalLegend;
                /**
                 * Gets the legend object for this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Legend(): Legend;
                /**
                 * Gets or sets a flag indicating whether to show the description or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowDescription(): JsType<System.Boolean>;
                set ShowDescription(value: JsType<System.Boolean>);
                /**
                 * Gets a value indicating whether transparency is supported.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SupportsTransparency(): JsType<System.Boolean>;
                /**
                 * Gets or sets the transparency for the plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Transparency(): JsType<System.Double>;
                set Transparency(value: JsType<System.Double>);
                /**
                 * Gets or sets a value indicating whether to use a separate color for marked items.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UseSeparateColorForMarkedItems(): JsType<System.Boolean>;
                set UseSeparateColorForMarkedItems(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Determines whether the current plot configuration is valid.
                 * @returns true if the current plot configuration is valid; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsConfigurationValid(): JsType<System.Boolean>;
                /**
                 * Refreshes data in data tables that depends on other data and is not automatically updated.
                 * This includes on-demand data with manual refresh, data functions with update behavior Manual
                 * and calculations with update behavior Invalidate.
                 * Only data tables used by this visualization will be included.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RefreshOnDemandData(): void;
                /**
                 * Try to get the filter rules for the plot.
                 * @param filterRules The FilterRuleCollection or null if filter rules are not supported
                 * @returns false if this visualization does not support filter,
                 * rules, otherwise true.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetFilterRules(filterRules: OutParam<FilterRuleCollection>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1560661591: null;
            }
            
            /**
             * Visualization data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualizationData extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the legend item for the data table.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableLegendItem(): LegendDataTableItem;
                /**
                 * Gets or sets the data table reference.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableReference(): (Data.DataTable | null);
                set DataTableReference(value: (Data.DataTable | null));
                /**
                 * A collection of auxilliary selections to filter the visualization data by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Filterings(): VisualizationFilteringCollection;
                /**
                 * Gets the legend item for the filterings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FilteringsLegendItem(): LegendFilteringsItem;
                /**
                 * Gets or sets the behavior for when the limiting markings are empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LimitingMarkingsEmptyBehavior(): Data.LimitingMarkingsEmptyBehavior;
                set LimitingMarkingsEmptyBehavior(value: Data.LimitingMarkingsEmptyBehavior);
                /**
                 * Gets or sets the message to show when the limiting markings are empty.
                 * This message is used when {@link Spotfire.Dxp.Application.Visuals.VisualizationData.LimitingMarkingsEmptyBehavior} is set to ShowMessage.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LimitingMarkingsEmptyMessage(): JsType<System.String>;
                set LimitingMarkingsEmptyMessage(value: JsType<System.String>);
                /**
                 * Gets or sets the font to use when the limiting markings are empty.
                 * This font is used when {@link Spotfire.Dxp.Application.Visuals.VisualizationData.LimitingMarkingsEmptyBehavior} is set to ShowMessage.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LimitingMarkingsEmptyMessageFontMetadata(): Framework.Styles.FontMetadata;
                set LimitingMarkingsEmptyMessageFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets a value indicating how the data marking selections shall be combined to limit
                 * the data show by the visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkingCombinationMethod(): Data.DataSelectionCombinationMethod;
                set MarkingCombinationMethod(value: Data.DataSelectionCombinationMethod);
                /**
                 * Gets the legend item for the marking.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkingLegendItem(): LegendMarkingItem;
                /**
                 * Gets or sets the marking selection used to mark markers in the visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarkingReference(): (Data.DataMarkingSelection | null);
                set MarkingReference(value: (Data.DataMarkingSelection | null));
                /**
                 * Gets the preferred {@link Spotfire.Dxp.Data.ColumnRelation}s for the visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Relations(): VisualizationRelations;
                /**
                 * Gets the collection of subsets displayed in the visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Subsets(): VisualizationSubsetCollection;
                /**
                 * Gets or sets a value indicating whether to use the filtering from the page's filter panel or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UseActiveFiltering(): JsType<System.Boolean>;
                set UseActiveFiltering(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the where clause (a boolean expression) that limits the data shown by
                 * the visualization, or null. Setting the expression to the empty string will set it to null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get WhereClauseExpression(): JsType<System.String>;
                set WhereClauseExpression(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Configures with reasonable default values given the
                 * current data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AutoConfigure(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3715091079: null;
            }
            
            /**
             * A list of data selections that are used to filter the data used in the visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualizationFilteringCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Data.DataSelection>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of items in this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<Data.DataSelection>;
                /**
                 * Adds the specified data selection to the collection if it doesn't already exists in the collection.
                 * @param dataSelection The data selection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(dataSelection: Data.DataSelection): void;
                /**
                 * Determines whether the specified data selection is part of the collection.
                 * @param dataSelection The data selection.
                 * @returns true if the specified data selection is part of the collection; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(dataSelection: Data.DataSelection): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through the collection.
                 * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<Data.DataSelection>;
                /**
                 * Returns the index of the item in the collection.
                 * @param dataSelection The data selection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(dataSelection: Data.DataSelection): JsType<System.Int32>;
                /**
                 * Removes the specified data selection from the collection.
                 * @param dataSelection The data selection.
                 * @returns true if the selection was removed; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(dataSelection: Data.DataSelection): JsType<System.Boolean>;
                /**
                 * Removes the data selection item at the specified index.
                 * @param index The index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Replaces the contents of this collection with the elements in the
                 * specified dataSelectionscollection.
                 * @param dataSelections The collection of {@link Spotfire.Dxp.Data.DataSelection}s.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceAll(dataSelections: OrExplicit<System.Collections.Generic.IEnumerable<Data.DataSelection>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Data.DataSelection>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataSelection} at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), Data.DataSelection>;
                private __type_1973466093: null;
            }
            
            /**
             * This class is used to set which column relation to use when there are more than one column relation in the data manager
             * that matches an expression.
             * The {@link Spotfire.Dxp.Data.ColumnRelation} must exist in the {@link Spotfire.Dxp.Data.ColumnRelationCollection} in the data manager in order
             * to be set as preferred.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualizationRelations extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Reset all preferred column relations and use the default column relations instead.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ResetAllPreferred(): void;
                /**
                 * Reset the preferred column relation and use the default column relation instead.
                 * @param relation The column relation to reset to default.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ResetPreferred(relation: Data.ColumnRelation): void;
                /**
                 * Sets the preferred column relation. The relation must be a reference to a column relation in the data manager.
                 * @param relation The column relation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetPreferred(relation: Data.ColumnRelation): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_544866622: null;
            }
            
            /**
             * Base class for subsets that can be visualized separately in a visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualizationSubset extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the display name. If ManualDisplayName is not null or empty, it is returned. Otherwise an automatically generated name is returned.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.VisualizationSubset} is enabled.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Enabled(): JsType<System.Boolean>;
                set Enabled(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.VisualizationSubset} is interactive.
                 * That is, if is should participate in marking and highlighting operations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Interactive(): JsType<System.Boolean>;
                set Interactive(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the manual display name. If this property is not null or an empty string, it will be used as the value for the DisplayName property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ManualDisplayName(): JsType<System.String>;
                set ManualDisplayName(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2972294161: null;
            }
            
            /**
             * Represents a collection of subsets that can be visualized next to each other in a visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualizationSubsetCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<VisualizationSubset>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the subset referring to all data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get All(): DefaultVisualizationSubset;
                /**
                 * Gets the number of items in this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * Gets the subset referring to the default filtering in the visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Default(): DefaultVisualizationSubset;
                /**
                 * Gets the subset referring to the complement of the default filtering in the visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultComplement(): DefaultVisualizationSubset;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<VisualizationSubset>;
                /**
                 * Adds a new subset based on a data selection.
                 * @param selection The data selection. This can be either a {@link Spotfire.Dxp.Data.DataMarkingSelection} or a {@link Spotfire.Dxp.Data.DataFilteringSelection}
                 * @returns The new subset.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddDataSelection(selection: Data.DataSelection): DataSelectionVisualizationSubset;
                /**
                 * Adds a subset based on a where clause expression.
                 * @param whereClause The where clause.
                 * @returns The newly added where clause subset.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddWhereClauseExpression(whereClause: (JsType<System.String> | System.String)): WhereClauseVisualizationSubset;
                /**
                 * Removes all items but the default ones from this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines whether this collection contains a specific value.
                 * @param item The subset.
                 * @returns true if item is found in the {@link System.Collections.Generic.ICollection}; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(item: VisualizationSubset): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through the collection.
                 * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<VisualizationSubset>;
                /**
                 * Determines the index of a specific item.
                 * @param item The object to locate.
                 * @returns The index of item if found; otherwise, -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(item: VisualizationSubset): JsType<System.Int32>;
                /**
                 * Moves the item at the specified index to a new location in the collection.
                 * @param fromIndex The zero-based index specifying the location of the item to be moved.
                 * @param toIndex The zero-based index specifying the new location of the item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the occurrence of the specified subset from this instance.
                 * @param item The subset to remove.
                 * @returns true if item was removed;
                 * otherwise, false. This method also returns false if item is not found.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: VisualizationSubset): JsType<System.Boolean>;
                /**
                 * Removes the item at the specified index.
                 * @param index The zero-based index of the item to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<VisualizationSubset>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the subset at the specified index.
                 * @param index The zero-based index of the subset to get.
                 * @returns The subset at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), VisualizationSubset>;
                private __type_1879943739: null;
            }
            
            /**
             * Defines the type identifiers for
             * built-in visuals.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VisualTypeIdentifiers extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.BarChart} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly BarChart: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.BoxPlot} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly BoxPlot: Framework.DocumentModel.TypeIdentifier;
                /**
                 * BulletGraphMiniatureVisualization identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly BulletGraphMiniatureVisualization: Framework.DocumentModel.TypeIdentifier;
                /**
                 * CalculatedValueMiniatureVisualization identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly CalculatedValueMiniatureVisualization: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.CombinationChart} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly CombinationChart: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.CrossTable} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly CrossTable: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Graphical Table identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly GraphicalTable: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.HeatMap} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly HeatMap: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.HtmlTextArea} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly HtmlTextArea: Framework.DocumentModel.TypeIdentifier;
                /**
                 * IconMiniatureVisualization identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly IconMiniatureVisualization: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.KpiChart} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly KpiChart: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.KpiVisualization} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly KpiVisualization: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.LineChart} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly LineChart: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.Maps.MapChart} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly MapChart2: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.ParallelCoordinatePlot} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly ParallelCoordinatePlot: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.PieChart} identifier
                 * .
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly PieChart: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.ScatterPlot} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly ScatterPlot: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.ScatterPlot3D} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly ScatterPlot3D: Framework.DocumentModel.TypeIdentifier;
                /**
                 * SparklineMiniatureVisualization identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SparklineMiniatureVisualization: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.SummaryTable} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SummaryTable: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.TablePlot | Table} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Table: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.Treemap} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Treemap: Framework.DocumentModel.TypeIdentifier;
                /**
                 * {@link Spotfire.Dxp.Application.Visuals.VisualTypeIdentifiers.WaterfallChart} identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly WaterfallChart: Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_989501613: null;
            }
            
            /**
             * Representation of a waterfall chart.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class WaterfallChart extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the width of the bars.
                 * Allowed values are in the range [0, 100].
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BarWidth(): JsType<System.Single>;
                set BarWidth(value: JsType<System.Single>);
                /**
                 * Gets the {@link Spotfire.Dxp.Application.Visuals.Axis} by which coloring in the plot is made.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColorAxis(): ColorAxis;
                /**
                 * Gets or sets a value indicating whether the visualization should inject empty values for missing time series data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CompensateForMissingTimeSeriesValues(): JsType<System.Boolean>;
                set CompensateForMissingTimeSeriesValues(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the color of the lines that connect waterfall blocks. A value of null
                 * means the color of the connection lines is decided by the current theme.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ConnectingLinesColor(): (Framework.Styles.ColorInfo | null);
                set ConnectingLinesColor(value: (Framework.Styles.ColorInfo | null));
                /**
                 * Gets the details object that controls how tooltips are displayed in this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Details(): WaterfallChartDetails;
                /**
                 * Gets the fitting models.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FittingModels(): FittingModels.FittingModelCollection;
                /**
                 * Gets or sets a value indicating whether or not blocks should be
                 * labeled.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelBlocks(): JsType<System.Boolean>;
                set LabelBlocks(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the font used for the labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelFontMetadata(): Framework.Styles.FontMetadata;
                set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                /**
                 * Gets or sets label orientation of this plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelOrientation(): LabelOrientation;
                set LabelOrientation(value: LabelOrientation);
                /**
                 * Gets or sets a value indicating whether running total labels should be shown or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelRunningTotals(): JsType<System.Boolean>;
                set LabelRunningTotals(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating label visibility.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LabelVisibility(): LabelVisibility;
                set LabelVisibility(value: LabelVisibility);
                /**
                 * Gets or sets a value indicating max number of drawn labels.
                 * Allowed values are 0 to 200.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MaxNumberOfLabels(): JsType<System.Int32>;
                set MaxNumberOfLabels(value: JsType<System.Int32>);
                /**
                 * Gets or sets the orientation of the bars.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Orientation(): WaterfallChartOrientation;
                set Orientation(value: WaterfallChartOrientation);
                /**
                 * Gets or sets a value indicating whether the waterfall blocks should be shown in reverse order within each category on x when split on color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ReverseBlockOrder(): JsType<System.Boolean>;
                set ReverseBlockOrder(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the name of the total bar for the root level.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RootLevelTotalBarName(): JsType<System.String>;
                set RootLevelTotalBarName(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether to show connecting lines between blocks.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShowConnectingLines(): JsType<System.Boolean>;
                set ShowConnectingLines(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether the waterfall blocks should be ordered within each category on x when split on color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SortBlocksByValue(): JsType<System.Boolean>;
                set SortBlocksByValue(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the color of the total bars.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TotalBarColor(): Framework.Styles.ColorInfo;
                set TotalBarColor(value: Framework.Styles.ColorInfo);
                /**
                 * Gets or sets the hierarchy level at which to (try) to show total bars.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TotalBarLevel(): JsType<System.Int32>;
                set TotalBarLevel(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating whether total bars should be visible.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TotalBarVisibility(): JsType<System.Boolean>;
                set TotalBarVisibility(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the axes the waterfall is stacked over.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get WaterfallOver(): WaterfallOver;
                set WaterfallOver(value: WaterfallOver);
                /**
                 * Gets the X-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get XAxis(): ScaleAxis;
                /**
                 * Gets the Y-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get YAxis(): ScaleAxis;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3867062631: null;
            }
            
            /**
             * Representation of bar detail information for a {@link Spotfire.Dxp.Application.Visuals.WaterfallChart}.
             * The information contained in this class is displayed in tooltips.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class WaterfallChartDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the detail item associated with the color axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the X-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): NamedDetailItem;
                /**
                 * Gets the detail item associated with the Y-axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): NamedDetailItem;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2192941469: null;
            }
            
            /**
             * The orientation of the bars and blocks in a waterfall chart.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class WaterfallChartOrientation extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Horizontal orientation of the bars and blocks in a waterfall chart. */
                static readonly Horizontal: WaterfallChartOrientation;
                /** Vertical orientation of the bars and blocks in a waterfall chart. */
                static readonly Vertical: WaterfallChartOrientation;
                private __type_3415020633: null;
            }
            
            /**
             * Determines over which axes the waterfall is stacked.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class WaterfallOver extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The color */
                static readonly Color: WaterfallOver;
                /** The columns */
                static readonly Columns: WaterfallOver;
                /** The pages */
                static readonly Pages: WaterfallOver;
                /** The panels */
                static readonly Panels: WaterfallOver;
                /** The rows */
                static readonly Rows: WaterfallOver;
                /** The trellis */
                static readonly Trellis: WaterfallOver;
                /** The x */
                static readonly X: WaterfallOver;
                private __type_2320089549: null;
            }
            
            /**
             * Represents a subset defined by a where clause (a boolean expression).
             * This class is instantiated by the {@link Spotfire.Dxp.Application.Visuals.VisualizationSubsetCollection.AddWhereClauseExpression|AddWhereClauseExpression} method on {@link Spotfire.Dxp.Application.Visuals.VisualizationSubsetCollection}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class WhereClauseVisualizationSubset extends VisualizationSubset implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the where clause (a boolean expression) that limits the data shown by
                 * the visualization, or null. Setting the expression to the empty string will set it to null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get WhereClauseExpression(): JsType<System.String>;
                set WhereClauseExpression(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_667078441: null;
            }
            
            namespace BoxPlotStatisticsTable {
                /**
                 * MeasureCollection class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MeasureCollection extends Framework.DocumentModel.DocumentNodeList<System.String> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<System.String>>, Explicit<System.Collections.IEnumerable>, Explicit<System.Collections.Generic.IList<System.String>>, Explicit<System.Collections.Generic.ICollection<System.String>> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<JsType<System.String>>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<System.String>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                        System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<System.String>>,
                        System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<System.String>>,
                    };
                    /**
                     * Gets or sets the element at the specified index.
                     * @param index The zero-based index of the element to get.
                     * @returns The element at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), JsType<System.String>> & PropertySet<(JsType<System.Int32> | System.Int32), (JsType<System.String> | System.String)>);
                    private __type_4004742550: null;
                }
            }
            
            namespace ColorAxis {
                /**
                 * Class containing properties and methods used for continuous coloring within a visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CategoricalColorAxis extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1996424609: null;
                }
                
                /**
                 * Class containing properties and methods used for continuous coloring within a visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ContinuousColorAxis extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_304772298: null;
                }
            }
            
            namespace ConditionalColoring {
                /**
                 * Represents a color rule for categorical coloring.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CategoricalColorRule extends ColorRule implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the number of explicitly mapped categories.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Gets all explicitly mapped categories.
                     * @returns All explicitly mapped categories.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetExplicitCategories(): System.Collections.Generic.IList<CategoryKey>;
                    /**
                     * Sets the colors to be used in this categorical color rule.
                     * This resets this CategoricalColorRule to only use the given colors.
                     * @param colors The colors to use in this categorical color rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetColors(colors: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Drawing.Color> | System.Drawing.Color)>>): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    /**
                     * Gets or sets the color for a category.
                     * @param category The category.
                     * @returns The color for the category.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: (((PropertyGet<TypedArray<System.Object>, JsType<System.Drawing.Color>> & PropertySet<TypedArray<System.Object>, (JsType<System.Drawing.Color> | System.Drawing.Color)>) & PropertyGet<CategoryKey, JsType<System.Drawing.Color>>) & PropertySet<CategoryKey, (JsType<System.Drawing.Color> | System.Drawing.Color)>);
                    private __type_3757895629: null;
                }
                
                /**
                 * A ColorBreakPoint is a breakpoint in a gradient or segmented continuous scale.
                 * Instances of class ColorBreakpoint are contained in a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorBreakpointCollection},
                 * and are used by a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ContinuousColorRule}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ColorBreakpoint extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the color of this breakpoint.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): JsType<System.Drawing.Color>;
                    set Color(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the user set display name for this breakpoint. When set to null, a display name
                     * will be generated automatically.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ManualDisplayName(): JsType<System.String>;
                    set ManualDisplayName(value: JsType<System.String>);
                    /**
                     * Gets or sets the value of this breakpoint.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Value(): ConditionValue;
                    set Value(value: ConditionValue);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3632853882: null;
                }
                
                /**
                 * Class ColorBreakpointCollection represents a set of breakpoints in a gradient or segmented continuous scale.
                 * A ColorBreakPointCollection contains instanses of class {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorBreakpoint}, and is used to
                 * define a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ContinuousColorRule}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ColorBreakpointCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<ColorBreakpoint>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of items in this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorBreakpointCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<ColorBreakpoint>;
                    /**
                     * Adds a new breakpoint to this collection using the specified value and color.
                     * @param value The value tied to the breakpoint to be created.
                     * @param color The color tied to the breakpoint to be created.
                     * @returns The added breakpoint.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Add(value: ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color)): ColorBreakpoint;
                    /**
                     * Removes all breakpoints from this collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Returns an enumerator that iterates through the collection.
                     * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<ColorBreakpoint>;
                    /**
                     * Determines the index of a specific item in the collection.
                     * @param breakpoint The object to locate in the collection.
                     * @returns The index of breakpoint if found in the list; otherwise, -1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    IndexOf(breakpoint: ColorBreakpoint): JsType<System.Int32>;
                    /**
                     * Moves the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorBreakpoint} at the specified index to a new location in the collection.
                     * @param fromIndex The zero-based index specifying the location of the item to be moved.
                     * @param toIndex The zero-based index specifying the new location of the item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Removes the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorBreakpoint} from the collection.
                     * @param breakpoint The breakpoint to remove.
                     * @returns true if the breakpoint was successfully removed, otherwise false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(breakpoint: ColorBreakpoint): JsType<System.Boolean>;
                    /**
                     * Removes the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorBreakpoint} at the specified index.
                     * @param index The zero-based index of the item to remove.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<ColorBreakpoint>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorBreakpoint} at the specified index.
                     * @param index The index of the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorBreakpoint} to get.
                     * @returns The value.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), ColorBreakpoint>;
                    private __type_1041843898: null;
                }
                
                /**
                 * Class containing expression used to override default coloring expression.
                 * Implements the {@link Spotfire.Dxp.Application.Visuals.ExpressionColumn}
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ColorByOtherExpression extends ExpressionColumn implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorByOtherExpression} is enabled.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Enabled(): JsType<System.Boolean>;
                    set Enabled(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2791265100: null;
                }
                
                /**
                 * Represents a color scheme used to color a visualization.
                 * The Coloring class is a list of {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule}s.
                 * A Coloring will assign colors to values using first its rules, and if none of them match
                 * either the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring.DefaultColor} or {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring.EmptyColor} will be used.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class Coloring extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<ColorRule>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets an object that enables coloring by another expression than the default.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ColorByOther(): ColorByOtherExpression;
                    /**
                     * Gets the number of {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule} instances in this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * Gets or sets the default color. This color is used for values that are non-empty and
                     * are not colored by any {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DefaultColor(): JsType<System.Drawing.Color>;
                    set DefaultColor(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the display name of this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DisplayName(): JsType<System.String>;
                    set DisplayName(value: JsType<System.String>);
                    /**
                     * Gets or sets color used for empty values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get EmptyColor(): JsType<System.Drawing.Color>;
                    set EmptyColor(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} should be evaluated per column.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get EvaluatePerColumn(): JsType<System.Boolean>;
                    set EvaluatePerColumn(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} should be evaluated per trellis panel.
                     * @remark This setting will only affect the color assignment when the plot is currently trellising.
                     * When set to true, each trellis panel where the Coloring is applied is treated as an individual subset, meaning that
                     * statistical calculations will be calculated individually for each panel (i.e. each panel will have their
                     * own min and max value).
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get EvaluatePerTrellis(): JsType<System.Boolean>;
                    set EvaluatePerTrellis(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether to set color on cell text or on cell background.
                     * This property is used by tabular visualizations.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SetColorOnText(): JsType<System.Boolean>;
                    set SetColorOnText(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<ColorRule>;
                    /**
                     * Adds a bottom N rule to the end of the collection.
                     * @param rank An integer specifying the rank of the added TopBottomColorRule.
                     * @param color The color of the added TopBottomColorRule.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddBottomNRule(rank: (JsType<System.Int32> | System.Int32), color: (JsType<System.Drawing.Color> | System.Drawing.Color)): TopBottomColorRule;
                    /**
                     * Adds a bottom N rule to the end of the collection.
                     * @param value A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}, that has to evaluate to an integer.
                     * @param color The color.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddBottomNRule(value: ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color)): TopBottomColorRule;
                    /**
                     * Adds a new categorical color rule with default configuration to the end of the collection.
                     * @returns The categorical color rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddCategoricalColorRule(): CategoricalColorRule;
                    /**
                     * Adds a new empty continuous rule to the end of the collection.
                     * @returns The continuous color rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddContinuousColorRule(): ContinuousColorRule;
                    /**
                     * Adds a new expression rule to the end of the collection.
                     * @param booleanExpression The boolean expression.
                     * @param color The color.
                     * @returns The ExpressionColorRule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddExpressionRule(booleanExpression: (JsType<System.String> | System.String), color: (JsType<System.Drawing.Color> | System.Drawing.Color)): ExpressionColorRule;
                    /**
                     * Adds a range rule to the end of the collection.
                     * @param startValue The start value.
                     * @param endValue The end value.
                     * @param color The color.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddRangeRule(startValue: ConditionValue, endValue: ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color)): RangeColorRule;
                    /**
                     * Adds a string color rule to the end of the collection.
                     * @param comparisonOperator The comparison operator.
                     * @param value The value.
                     * @param color The color.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddStringColorRule(comparisonOperator: StringComparisonOperator, value: ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color)): StringColorRule;
                    /**
                     * Adds a threshold color rule to the end of the collection.
                     * @param comparisonOperator The comparison operator.
                     * @param value The threshold value.
                     * @param color The color.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddThresholdColorRule(comparisonOperator: RuleComparisonOperator, value: ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color)): ThresholdColorRule;
                    /**
                     * Adds a top N rule to the end of the collection.
                     * @param rank An integer specifying the rank of the added TopBottomColorRule.
                     * @param color The color.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddTopNRule(rank: (JsType<System.Int32> | System.Int32), color: (JsType<System.Drawing.Color> | System.Drawing.Color)): TopBottomColorRule;
                    /**
                     * Adds a top N rule to the end of the collection.
                     * @param value A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}, that has to evaluate to an integer.
                     * @param color The color.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddTopNRule(value: ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color)): TopBottomColorRule;
                    /**
                     * Applies the given {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} as a template. This will clear the current settings and replace
                     * them with the settings from the template.
                     * @param template The template to apply.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Apply(template: Coloring): void;
                    /**
                     * Applies the template named templateName from the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringTemplateCollection} to this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * @param templateName Name of the template to apply.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Apply(templateName: (JsType<System.String> | System.String)): void;
                    /**
                     * Clears this collection, removing all {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule | ColorRules}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Determines whether the collection contains a specified rule.
                     * @param rule The rule to locate in the collection.
                     * @returns True if the collection contains the specified rule; otherwise, false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Contains(rule: ColorRule): JsType<System.Boolean>;
                    /**
                     * Gets the categorical color for the given category. The color is taken from the current {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.CategoricalColorRule},
                     * or if no such rule is available the DefaultColor of this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} is returned.
                     * @param category The category to get a color for.
                     * @returns A Color for the given category.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetColorForCategory(category: CategoryKey): JsType<System.Drawing.Color>;
                    /**
                     * Returns an enumerator that iterates through the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule}s in this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * @returns An {@link System.Collections.Generic.IEnumerator} for this Coloring.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<ColorRule>;
                    /**
                     * Determines the index of a specific rule in the collection.
                     * @param rule The rule to locate in the collection.
                     * @returns The index of the rule if found in the list; otherwise, -1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    IndexOf(rule: ColorRule): JsType<System.Int32>;
                    /**
                     * Moves a rule at the specified index to another location in the collection.
                     * @param fromIndex The zero-based index specifying the location of the item to be moved.
                     * @param toIndex The zero-based index specifying the new location of the item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Removes the specified rule from the collection.
                     * @param rule The rule to remove.
                     * @returns True if the rule was removed; otherwise false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(rule: ColorRule): JsType<System.Boolean>;
                    /**
                     * Saves the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} to a stream.
                     * @param stream The stream to write to.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SaveAs(stream: (JsType<System.IO.Stream> | System.IO.Stream)): void;
                    /**
                     * Saves the coloring as a new item in the library.
                     * @param folder The library folder in which to save the coloring to.
                     * @param title The title of the library item.
                     * @param keywords The keywords.
                     * @returns The new library item.
                     * 
                     * @since 2.0
                     * 
                     * @group Extended capability 'LibraryWrite'
                     */
                    SaveAs(folder: Framework.Library.LibraryItem, title: (JsType<System.String> | System.String), keywords: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.String> | System.String)>>): Framework.Library.LibraryItem;
                    /**
                     * Sets a color for the given category in this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}. This will be set in a
                     * {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.CategoricalColorRule} in this collection. If no such rule is available when this methods is run,
                     * it will be added.
                     * @param category The category to set a color for.
                     * @param color The color to set for the category.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetColorForCategory(category: CategoryKey, color: (JsType<System.Drawing.Color> | System.Drawing.Color)): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<ColorRule>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule} at the specified index.
                     * @param index The index.
                     * @returns The {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule} at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), ColorRule>;
                    private __type_3057715949: null;
                }
                
                /**
                 * Manages a set of {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instances, and mappings
                 * between {@link Spotfire.Dxp.Application.Visuals.CategoryKey} values and {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instances.
                 * {@link Spotfire.Dxp.Application.Visuals.CrossTablePlot}, {@link Spotfire.Dxp.Application.Visuals.TablePlot} and {@link Spotfire.Dxp.Application.Visuals.HeatMap} uses a ColoringCollection
                 * to assign colors.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ColoringCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Coloring>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of items in the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * Gets or sets the default coloring for Boolean datatypes, the fallback if no mapping exists for an inquiry. When set, the
                     * given coloring must be owned by this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DefaultBooleanReference(): Coloring;
                    set DefaultBooleanReference(value: Coloring);
                    /**
                     * Gets or sets the default coloring for date datatypes, the fallback if no mapping exists for an inquiry. When set, the
                     * given coloring must be owned by this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DefaultDateReference(): Coloring;
                    set DefaultDateReference(value: Coloring);
                    /**
                     * Gets or sets the default coloring for date time datatypes, the fallback if no mapping exists for an inquiry. When set, the
                     * given coloring must be owned by this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DefaultDateTimeReference(): Coloring;
                    set DefaultDateTimeReference(value: Coloring);
                    /**
                     * Gets or sets the default coloring for numeric datatypes, the fallback if no mapping exists for an inquiry. When set, the
                     * given coloring must be owned by this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DefaultNumericReference(): Coloring;
                    set DefaultNumericReference(value: Coloring);
                    /**
                     * Gets or sets the default coloring for string datatypes, the fallback if no mapping exists for an inquiry. When set, the
                     * given coloring must be owned by this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DefaultStringReference(): Coloring;
                    set DefaultStringReference(value: Coloring);
                    /**
                     * Gets or sets the default coloring for time datatypes, the fallback if no mapping exists for an inquiry. When set, the
                     * given coloring must be owned by this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DefaultTimeReference(): Coloring;
                    set DefaultTimeReference(value: Coloring);
                    /**
                     * Gets or sets the default coloring for TimeSpan datatypes, the fallback if no mapping exists for an inquiry. When set, the
                     * given coloring must be owned by this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DefaultTimeSpanReference(): Coloring;
                    set DefaultTimeSpanReference(value: Coloring);
                    /**
                     * Gets the legend item used to display information about this ColoringCollection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LegendItem(): LegendColorItem;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<Coloring>;
                    /**
                     * Adds a copy of the given color rule collection with a new display name.
                     * @param coloring The coloring to copy.
                     * @returns A copy of the provided coloring that has been inserted to this collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddCopy(coloring: Coloring): Coloring;
                    /**
                     * Adds a mapping between the specified {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instance and the specified
                     * {@link Spotfire.Dxp.Application.Visuals.CategoryKey} value. This means that the specified category will be colored by the specified
                     * coloring.
                     * @param category The category.
                     * @param coloring The coloring.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddMapping(category: CategoryKey, coloring: Coloring): void;
                    /**
                     * Adds a new {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instance to this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNew(): Coloring;
                    /**
                     * Adds a new {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instance to this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * @param displayName A display name for the new coloring.
                     * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNew(displayName: (JsType<System.String> | System.String)): Coloring;
                    /**
                     * Clears all {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instances and mappings in this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Determines whether the given coloring exists in this collection.
                     * @param coloring The coloring to look for.
                     * @returns true if this collection contains the given coloring; otherwise, false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Contains(coloring: Coloring): JsType<System.Boolean>;
                    /**
                     * Gets all {@link Spotfire.Dxp.Application.Visuals.CategoryKey} values that are currently mapped to any
                     * {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} managed by this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringCollection}.
                     * @returns The {@link Spotfire.Dxp.Application.Visuals.CategoryKey} values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetCategories(): System.Collections.Generic.IList<CategoryKey>;
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.CategoryKey} values that are mapped to the specified
                     * {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}, otherwise an empty list.
                     * @param coloring The coloring to get categories for.
                     * @returns A list of the mapped {@link Spotfire.Dxp.Application.Visuals.CategoryKey} values, otherwise an empty list.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetCategoriesForColoring(coloring: Coloring): System.Collections.Generic.IList<CategoryKey>;
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instance that is mapped to the specified
                     * {@link Spotfire.Dxp.Application.Visuals.CategoryKey} value, otherwise the default coloring for the category's data type.
                     * If no type can be established for the given category, or if no default has been set, null is returned.
                     * @param category The category.
                     * @returns The mapped {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instance, the default, or null when no default can be established.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetColoringForCategory(category: CategoryKey): (Coloring | null);
                    /**
                     * Removes the specified {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instance and any mappings to it.
                     * @param coloring The coloring to remove.
                     * @returns true if the coloring is successfully removed, otherwise false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(coloring: Coloring): JsType<System.Boolean>;
                    /**
                     * Removes the item at the given index.
                     * @param index Index to remove.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Removes the mapping between the specified {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instance and the specified
                     * {@link Spotfire.Dxp.Application.Visuals.CategoryKey} value.
                     * @param category The category to remove the mapping for.
                     * @returns true if the mapping is successfully removed, otherwise false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    RemoveMapping(category: CategoryKey): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Coloring>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} at the given index.
                     * @param index Index in collection.
                     * @returns The Coloring at the given index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), Coloring>;
                    private __type_2379729475: null;
                }
                
                /**
                 * Collection class used to store templates used for coloring in visualizations. In a document, the template collection
                 * can be accessed at {@link Spotfire.Dxp.Application.Document.ColoringTemplates}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ColoringTemplateCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<Coloring>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of items in the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<Coloring>;
                    /**
                     * Adds a copy of the given {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * @param template Template to copy.
                     * @returns A copy of the provided template that has been inserted to this collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddCopy(template: Coloring): Coloring;
                    /**
                     * Adds a copy of the given {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} with a new display name.
                     * @param template Template to copy.
                     * @param preferredName The preferred display name that the copy should have.
                     * If this name is not unique withing the collection, the added {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}
                     * will have a name that is slightly modified.
                     * @returns A copy of the provided template that has been inserted to this collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddCopy(template: Coloring, preferredName: (JsType<System.String> | System.String)): Coloring;
                    /**
                     * Adds the specified color scheme from the library to this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColoringTemplateCollection}.
                     * @param colorLibraryItem The library item for the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} to get.
                     * @returns The added {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * 
                     * @since 2.0
                     * 
                     * @group Extended capability 'LibraryRead'
                     */
                    AddFromLibrary(colorLibraryItem: Framework.Library.LibraryItem): Coloring;
                    /**
                     * Adds a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} to this collection by reading from the given stream. The content of the stream
                     * must be a dxpcolor file.
                     * @param stream The stream to read from.
                     * @returns The added {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddFromStream(stream: (JsType<System.IO.Stream> | System.IO.Stream)): Coloring;
                    /**
                     * Creates a new {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} and adds it to this collection.
                     * @param preferredName The preferred display name. If this name is not unique withing
                     * the collection, the created color collection will have a name that is slightely modified.
                     * @returns The newly added {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNew(preferredName: (JsType<System.String> | System.String)): Coloring;
                    /**
                     * Clears the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Determines whether a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} with the given name exists in this collection.
                     * @param name The name to check.
                     * @returns true if this collection contains a Coloring with the given name; otherwise, false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Contains(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                    /**
                     * Removes the item at the given index.
                     * @param index Index to remove.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Tries to get the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} with the specified name, returning true upon success.
                     * @param name The name to look for.
                     * @param value An item with specified name, if found; otherwise, null.
                     * @returns true if this instance contains an item with the specified name; otherwise, false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    TryGetValue(name: (JsType<System.String> | System.String), value: OutParam<Coloring>): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<Coloring>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} with the given name.
                     * @param name The name to lookup.
                     * @returns The item with the given name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), Coloring> & PropertyGet<(JsType<System.String> | System.String), Coloring>);
                    private __type_2111920975: null;
                }
                
                /**
                 * Class ColorRule is an abstract base class for rules used to modify the color of visualization items.
                 * ColorRules are contained within a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring} instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ColorRule extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the display name. If set to null, the ColorRule will be represented with an auto-generated name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ManualDisplayName(): JsType<System.String>;
                    set ManualDisplayName(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_337858431: null;
                }
                
                /**
                 * ConditionalColorRule is a base class for rules that use a boolean condition to determine color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ConditionalColorRule extends ColorRule implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the color for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): JsType<System.Drawing.Color>;
                    set Color(value: JsType<System.Drawing.Color>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3029244433: null;
                }
                
                /**
                 * ConditionValue is used to specify values used in conditional coloring.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ConditionValue extends Object {
                    /**
                     * Gets the type of this ConditionValue.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Type(): ConditionValueType;
                    /**
                     * Gets the value of this ConditionValue.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Value(): unknown;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Creates a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} containing the specified expression.
                     * @param expression The expression.
                     * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static CreateExpression(expression: (JsType<System.String> | System.String)): ConditionValue;
                    /**
                     * Creates a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} containing the specified literal.
                     * @param literal The literal.
                     * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static CreateLiteral(literal: any): ConditionValue;
                    /**
                     * Creates a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} containing the specified literal.
                     * @param literal The literal.
                     * @param dataType The data type for the literal.
                     * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static CreateLiteral(literal: any, dataType: Data.DataType): ConditionValue;
                    /**
                     * Creates a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} containing the specified percentile value.
                     * @param percentile The percentile value. The value should be between 0 and 100.
                     * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static CreatePercentileValue(percentile: (JsType<System.Double> | System.Double)): ConditionValue;
                    /**
                     * Creates a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} containing the specified percent value.
                     * @param percent The percent value. The value should be between 0 and 100.
                     * @returns The newly created {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static CreatePercentValue(percent: (JsType<System.Double> | System.Double)): ConditionValue;
                    /**
                     * Indicates whether this instance and a specified object are equal.
                     * @param obj Another object to compare to.
                     * @returns true if obj and this instance are the same type and represent the same value; otherwise, false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Equals(obj: any): JsType<System.Boolean>;
                    /**
                     * Returns the hash code for this instance.
                     * @returns A 32-bit signed integer that is the hash code for this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetHashCode(): JsType<System.Int32>;
                    /**
                     * A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} of type {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValueType.AverageValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly AverageValue: ConditionValue;
                    /**
                     * A empty {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly Empty: ConditionValue;
                    /**
                     * A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} of type {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValueType.MaxValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly MaxValue: ConditionValue;
                    /**
                     * A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} of type {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValueType.MedianValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly MedianValue: ConditionValue;
                    /**
                     * A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue} of type {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValueType.MinValue}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly MinValue: ConditionValue;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_1826962592: null;
                }
                
                /**
                 * The ConditionValueType describes the type of a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ConditionValueType extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Represents the average value of the current data range. */
                    static readonly AverageValue: ConditionValueType;
                    /** Value is to be interpreted as an expression (string). */
                    static readonly Expression: ConditionValueType;
                    /** Value is to be interpreted as a literal. */
                    static readonly Literal: ConditionValueType;
                    /** Represents the maximum value in the current data range. */
                    static readonly MaxValue: ConditionValueType;
                    /** Represents the median value in the current data range. */
                    static readonly MedianValue: ConditionValueType;
                    /** Represents the minimum value in the current data range. */
                    static readonly MinValue: ConditionValueType;
                    /** Value is to be interpreted as a percentage. */
                    static readonly Percent: ConditionValueType;
                    /** Value is to be interpreted as a percentile. */
                    static readonly Percentile: ConditionValueType;
                    private __type_3863483688: null;
                }
                
                /**
                 * Represents a color rule with gradients or fixed color intervals.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ContinuousColorRule extends ColorRule implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the break points for this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ContinuousColorRule}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Breakpoints(): ColorBreakpointCollection;
                    /**
                     * Gets or sets the interval mode of this rule, decides how colors are assigned between break points.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IntervalMode(): IntervalMode;
                    set IntervalMode(value: IntervalMode);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2606584530: null;
                }
                
                /**
                 * ExpressionColorRule represents a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule} that uses a custom expression to define where it is applied.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ExpressionColorRule extends ConditionalColorRule implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the expression for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Expression(): JsType<System.String>;
                    set Expression(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3099526685: null;
                }
                
                /**
                 * Appearance of the intervals between break points.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class IntervalMode extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Show as gradient, i.e. interpolate between the break points. */
                    static readonly Gradient: IntervalMode;
                    /** Show as single-colored segments. */
                    static readonly Segments: IntervalMode;
                    private __type_1099433732: null;
                }
                
                /**
                 * RangeColorRule represents a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule} that is used to color all values within a range.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class RangeColorRule extends ConditionalColorRule implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the end value for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get EndValue(): ConditionValue;
                    set EndValue(value: ConditionValue);
                    /**
                     * Gets or sets the user set displayname for the ending value.
                     * If set to null, the end value will be represented with an auto-generated name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get EndValueManualDisplayName(): JsType<System.String>;
                    set EndValueManualDisplayName(value: JsType<System.String>);
                    /**
                     * Gets or sets the start value for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get StartValue(): ConditionValue;
                    set StartValue(value: ConditionValue);
                    /**
                     * Gets or sets the user set displayname for the starting value.
                     * If set to null, the start value will be represented with an auto-generated name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get StartValueManualDisplayName(): JsType<System.String>;
                    set StartValueManualDisplayName(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1338666260: null;
                }
                
                /**
                 * Comparison operator for usage with {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ThresholdColorRule} instances.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class RuleComparisonOperator extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Equal to the threshold value. */
                    static readonly Equal: RuleComparisonOperator;
                    /** Greater than the threshold value. */
                    static readonly Greater: RuleComparisonOperator;
                    /** Greater than or equal to the threshold value. */
                    static readonly GreaterOrEqual: RuleComparisonOperator;
                    /** Less than the threshold value. */
                    static readonly Less: RuleComparisonOperator;
                    /** Less than or equal to the threshold value. */
                    static readonly LessOrEqual: RuleComparisonOperator;
                    /** Not equal to the threshold value. */
                    static readonly NotEqual: RuleComparisonOperator;
                    private __type_4098454675: null;
                }
                
                /**
                 * StringColorRule represents a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule} that is used to color strings by comparing them to another string.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class StringColorRule extends ConditionalColorRule implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the comparison operator for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ComparisonOperator(): StringComparisonOperator;
                    set ComparisonOperator(value: StringComparisonOperator);
                    /**
                     * Gets or sets the string value for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get StringValue(): ConditionValue;
                    set StringValue(value: ConditionValue);
                    /**
                     * Gets or sets the manual display name for the value of this StringColorRule.
                     * If set to null, the value will be represented with an auto-generated name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get StringValueManualDisplayName(): JsType<System.String>;
                    set StringValueManualDisplayName(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2784855176: null;
                }
                
                /**
                 * Comparison operator for usage with {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.StringColorRule} instances.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class StringComparisonOperator extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Checks if a string contains a given sequence. */
                    static readonly Contains: StringComparisonOperator;
                    /** Checks if a string ends with a given sequence. */
                    static readonly EndsWith: StringComparisonOperator;
                    /** Checks for equality. */
                    static readonly Equal: StringComparisonOperator;
                    /** Checks for inequality. */
                    static readonly NotEqual: StringComparisonOperator;
                    /** Checks if a string starts with a given sequence. */
                    static readonly StartsWith: StringComparisonOperator;
                    private __type_3849617634: null;
                }
                
                /**
                 * ThresholdColorRule represents a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule} that is used to color all values by
                 * how they relate to a specified threshold.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ThresholdColorRule extends ConditionalColorRule implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the comparison operator for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ComparisonOperator(): RuleComparisonOperator;
                    set ComparisonOperator(value: RuleComparisonOperator);
                    /**
                     * Gets or sets the threshold value for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Threshold(): ConditionValue;
                    set Threshold(value: ConditionValue);
                    /**
                     * Gets or sets the manual display name for the value of this ThresholdColorRule.
                     * If set to null, the threshold value will be represented with an auto-generated name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ThresholdManualDisplayName(): JsType<System.String>;
                    set ThresholdManualDisplayName(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2325480510: null;
                }
                
                /**
                 * TopBottomColorRule represents a {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ColorRule} that colors the top or bottom n values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class TopBottomColorRule extends ConditionalColorRule implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this rule ranks bottom or top values. Default is false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IsBottom(): JsType<System.Boolean>;
                    set IsBottom(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the rank value for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Rank(): ConditionValue;
                    set Rank(value: ConditionValue);
                    /**
                     * Gets or sets the manual display name for the rank value of this TopBottomColorRule.
                     * If set to null, the rank value will be represented with an auto-generated name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get RankManualDisplayName(): JsType<System.String>;
                    set RankManualDisplayName(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_643996615: null;
                }
            }
            
            namespace CrossTablePlot {
                /**
                 * Class that represent sizes for headers in the CrossTablePlot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class HeaderSizeCollection extends Framework.DocumentModel.DocumentNodeListBase<System.Int32> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<System.Int32>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<JsType<System.Int32>>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<System.Int32>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the element at the specified index.
                     * @param index The zero-based index of the element to get.
                     * @returns The element at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: ((PropertyGet<(JsType<System.Int32> | System.Int32), JsType<System.Int32>> & PropertySet<(JsType<System.Int32> | System.Int32), (JsType<System.Int32> | System.Int32)>) & PropertyGet<(JsType<System.Int32> | System.Int32), JsType<System.Int32>>);
                    private __type_3039103958: null;
                }
                
                /**
                 * Defines if the sorting is on the leaf nodes of the hierarchy, or for all values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class SortMode extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Sort all values, without regard to the hierarchy. */
                    static readonly Global: SortMode;
                    /**
                     * Sort the leaf nodes of the hierarchy.
                     * Only the leaf nodes of the hierarchy are affected.
                     */
                    static readonly Leaf: SortMode;
                    private __type_2188521549: null;
                }
            }
            
            namespace CrossTableTotals {
                /**
                 * The calculation modes for cross table totals.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CalculationMode extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Specifies that totals should be calculated as the sum of cell values in the visualization. */
                    static readonly SumOfCellValues: CalculationMode;
                    /** Specifies that totals should be calculated using the underlying row values in the base table. */
                    static readonly UnderlyingRowValues: CalculationMode;
                    private __type_2739643876: null;
                }
            }
            
            namespace FittingModels {
                /**
                 * Represents a computer of multilines from a pair of data columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ColumnValuesLine extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this reference curve affects the axis ranges.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AffectAxisRanges(): JsType<System.Boolean>;
                    set AffectAxisRanges(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether the line should be split at empty values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get BreakOnEmpty(): JsType<System.Boolean>;
                    set BreakOnEmpty(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the data table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataTableReference(): Data.DataTable;
                    set DataTableReference(value: Data.DataTable);
                    /**
                     * Gets the ReferenceCurve representing the ColumnValuesLine.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Line(): ReferenceCurve;
                    /**
                     * Gets or sets the optional column used to sort the x- and y-values
                     * before conecting the points to a multiline.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SortColumnReference(): Data.DataColumn;
                    set SortColumnReference(value: Data.DataColumn);
                    /**
                     * Gets or sets the column containing the x-values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get XColumnReference(): Data.DataColumn;
                    set XColumnReference(value: Data.DataColumn);
                    /**
                     * Gets or sets the column containing the y-values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get YColumnReference(): Data.DataColumn;
                    set YColumnReference(value: Data.DataColumn);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_464398872: null;
                }
                
                /**
                 * The exponential fitting model defines an exponential curve that minimizes the sum-of-squares of the
                 * y-distances between the data and the curve.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ExponentialFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the exponential curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Curve(): ReferenceCurve;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1803692679: null;
                }
                
                /**
                 * Abstract base class for fitting models. See the {@link Spotfire.Dxp.Application.Extension.CustomFittingModel} class for
                 * creating custom fitting models.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class FittingModel extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModel} is enabled.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Enabled(): JsType<System.Boolean>;
                    set Enabled(value: JsType<System.Boolean>);
                    /**
                     * The visualization features to calculate curves for. Features may be combined,
                     * which will result in one curve per combination.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IndividualFittingModes(): IndividualFittingModes;
                    set IndividualFittingModes(value: IndividualFittingModes);
                    /**
                     * Gets or sets a value indicating whether to use manual updates.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ManualUpdate(): JsType<System.Boolean>;
                    set ManualUpdate(value: JsType<System.Boolean>);
                    /**
                     * Gets the type identifier for this fitting model. The type identifiers for the built-in fitting models are
                     * defined in {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TypeId(): Framework.DocumentModel.TypeIdentifier;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Gets the current results as a data source.
                     * @returns The data source.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetResultsDataSource(): Data.DataSource;
                    /**
                     * Forces an update of this fitting model. Only allowed if {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModel.ManualUpdate} is set to true.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Update(): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1587121534: null;
                }
                
                /**
                 * Collection of FittingModels. Contains methods to add and remove FittingModels and Curves.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class FittingModelCollection extends Framework.DocumentModel.DocumentNodeListBase<FittingModel> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<FittingModel>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets or sets the label font metadata for lines and curves.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelFontMetadata(): Framework.Styles.FontMetadata;
                    set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                    /**
                     * Gets the legend item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LegendItem(): LegendFittingModelCollectionItem;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<FittingModel>;
                    /**
                     * Adds a line or multiline. The points of the line are defined from the values of a pair of columns.
                     * @param dataTable The data table containing the columns
                     * @param xValuesColumn A column containing the x-values.
                     * @param yValuesColumn A column containing the y-values.
                     * @returns A {@link Spotfire.Dxp.Application.Visuals.FittingModels.ColumnValuesLine} fitting model.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddColumnValuesLine(dataTable: Data.DataTable, xValuesColumn: Data.DataColumn, yValuesColumn: Data.DataColumn): ColumnValuesLine;
                    /**
                     * Adds a curve. The curve is defined by the specified expression,
                     * for example "5.0*sin(x) + 2.5".
                     * @param expression The expression defining the curve.
                     * @returns A {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceCurveFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddCurve(expression: (JsType<System.String> | System.String)): ReferenceCurveFittingModel;
                    /**
                     * Adds a curve. The curve is defined by the specified expression,
                     * for example "a + b*x", where a and b are columns in the specified data table.
                     * @param dataTable The data table. May be null.
                     * @param expression The expression defining the curve.
                     * @returns A {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceCurveFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddCurve(dataTable: Data.DataTable, expression: (JsType<System.String> | System.String)): ReferenceCurveFittingModel;
                    /**
                     * Adds a Holt Winters forecast with default settings to the collection.
                     * @returns The newly added {@link Spotfire.Dxp.Application.Visuals.FittingModels.ForecastHoltWintersFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddForecastHoltWinters(): ForecastHoltWintersFittingModel;
                    /**
                     * Adds a horizontal reference line. The position of the line is defined by
                     * the specified expression, for example "Avg(y)" or "1000.0".
                     * @param expression The expression defining the position of the line.
                     * @returns A {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceLineFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddHorizontalLine(expression: (JsType<System.String> | System.String)): ReferenceLineFittingModel;
                    /**
                     * Adds a horizontal reference line. The position of the line is defined by the expression,
                     * for example "Avg(y)". The expression is evaluated using the columns in the specified data table.
                     * @param dataTable The data table. May be null.
                     * @param expression The expression defining the position of the line.
                     * @returns A {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceLineFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddHorizontalLine(dataTable: Data.DataTable, expression: (JsType<System.String> | System.String)): ReferenceLineFittingModel;
                    /**
                     * Adds a new fitting model of the specified type.
                     * @param fittingModelType The type of the fitting model.
                     * @returns The newly created fitting model.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNew(fittingModelType: (JsType<System.Type> | System.Type)): FittingModel;
                    /**
                     * Adds a new fitting model. The type identifiers for the built-in fitting models are
                     * defined in {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers}.
                     * @param typeIdentifier The type identifer of the fitting model.
                     * @returns The newly created fitting model.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNew(typeIdentifier: Framework.DocumentModel.TypeIdentifier): FittingModel;
                    /**
                     * Adds a new fitting model of the specified type.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     * @param typeT - @@Generic type argument
                     */
                    AddNew<T extends FittingModel>(typeT: TypeRefParam<T>): JsType<T>;
                    /**
                     * Adds a straight line that minimizes the sum-of-squares of the
                     * y-distances between the data and the line.
                     * @returns A {@link Spotfire.Dxp.Application.Visuals.FittingModels.StraightLineFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddStraightLineFit(): StraightLineFittingModel;
                    /**
                     * Adds a vertical reference line. The position of the line is defined by the expression,
                     * for example "Avg(x)" or "1000.0".
                     * @param expression The expression defining the position of the line.
                     * @returns A {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceLineFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddVerticalLine(expression: (JsType<System.String> | System.String)): ReferenceLineFittingModel;
                    /**
                     * Adds a vertical reference line. The position of the line is defined by the expression
                     * which is evaluated using the columns in the specified data table.
                     * @param dataTable The data table. May be null.
                     * @param expression The expression defining the position of the line with references to columns in the data table.
                     * @returns A {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceLineFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddVerticalLine(dataTable: Data.DataTable, expression: (JsType<System.String> | System.String)): ReferenceLineFittingModel;
                    /**
                     * Removes all fitting models from this collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Removes the specified fitting model from this collection.
                     * @param model The fitting model to remove.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(model: FittingModel): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<FittingModel>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the element at the specified index.
                     * @param index The zero-based index of the element to get.
                     * @returns The element at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), FittingModel>;
                    private __type_4027568482: null;
                }
                
                /**
                 * Provides methods for configuring the fitting model during the {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModel.ConfigureModelCore|ConfigureModelCore(configurator)}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class FittingModelConfigurator extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Adds a {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceDetailItem} for all result variables to the specified curve's details.
                     * @param curve The curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddDefaultDetails(curve: ReferenceCurve): void;
                    /**
                     * Adds a {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceDetailItem} for all result variables to the specified point's details.
                     * @param point The point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddDefaultDetails(point: ReferencePoint): void;
                    /**
                     * Adds a {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceDetailItem} to the specified curve's details.
                     * @param curve The curve.
                     * @param resultVariableName Name of the result variable.
                     * @param defaultFormatter The default formatter. Can be null.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddDetail(curve: ReferenceCurve, resultVariableName: (JsType<System.String> | System.String), defaultFormatter: Data.Formatters.IDataFormatter): void;
                    /**
                     * Adds a {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceDetailItem} to the specified point's details.
                     * @param point The point.
                     * @param resultVariableName Name of the result variable.
                     * @param defaultFormatter The default formatter. Can be null.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddDetail(point: ReferencePoint, resultVariableName: (JsType<System.String> | System.String), defaultFormatter: Data.Formatters.IDataFormatter): void;
                    /**
                     * Registers a new result variable with the fitting model.
                     * @param name The name.
                     * @param description The description.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    RegisterResultVariable(name: (JsType<System.String> | System.String), description: (JsType<System.String> | System.String)): void;
                    /**
                     * Sets the curve expression.
                     * @param curve The curve.
                     * @param expression The expression defining the curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetCurveExpression(curve: ReferenceCurve, expression: (JsType<System.String> | System.String)): void;
                    /**
                     * Sets the curve expressions, including begin and end expressions.
                     * @param curve The curve.
                     * @param expression The expression defining the curve.
                     * @param beginExpression The begin expression. Specifying the value where the reference curve should begin.
                     * @param endExpression The end expression. Specifying the value where the reference curve should end.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetCurveExpressions(curve: ReferenceCurve, expression: (JsType<System.String> | System.String), beginExpression: (JsType<System.String> | System.String), endExpression: (JsType<System.String> | System.String)): void;
                    /**
                     * Sets the point expressions.
                     * @param point The ReferencePoint on which to set the expressions.
                     * @param xExpression An expression that evaluates to the x coordinate of the point.
                     * @param yExpression An expression that evaluates to the y coordinate of the point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetPointExpressions(point: ReferencePoint, xExpression: (JsType<System.String> | System.String), yExpression: (JsType<System.String> | System.String)): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_15063713: null;
                }
                
                /**
                 * Handles the values to which a curve should be fitted by a {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModel}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class FittingModelData extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Creates a cursor for the x-values.
                     * @returns A value cursor for x-values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    CreateXCursor(): Data.DataValueCursorGeneric<JsType<System.Double>>;
                    /**
                     * Creates a cursor for the y-values.
                     * @returns A double value cursor for y-values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    CreateYCursor(): Data.DataValueCursorGeneric<JsType<System.Double>>;
                    /**
                     * Gets all rows for the cursors specified in valueCursors.
                     * @param valueCursors Specifies what cursors
                     * ({@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelData.CreateXCursor} and {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelData.CreateYCursor})
                     * to include in the enumeration, that are used to
                     * access the individual data values for each row.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetRows(...valueCursors: Data.DataValueCursor[]): System.Collections.Generic.IEnumerable<Data.DataRow>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_3511616014: null;
                }
                
                /**
                 * Handles results and errors from a fitting operation on a {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModel}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class FittingModelOutput extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Sets an error that is generated for this curve fit operation.
                     * @param message The message.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetError(message: (JsType<System.String> | System.String)): void;
                    /**
                     * Sets the result of this curve fit operation, containing the specified values.
                     * @param values The values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetResult(...values: ResultValue[]): void;
                    /**
                     * Sets the result of this curve fit operation, containing the specified values.
                     * @param values The values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetResult(...values: (JsType<System.Double> | System.Double)[]): void;
                    /**
                     * Sets the result of this curve fit operation, containing the specified values, and
                     * with the specified warning attached to each of them.
                     * @param warning The warning.
                     * @param values The values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetResult(warning: (JsType<System.String> | System.String), ...values: ResultValue[]): void;
                    /**
                     * Sets the result of this curve fit operation, containing the specified values, and
                     * with the specified warnings attached to each of them.
                     * @param warnings The warnings.
                     * @param values The values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetResult(warnings: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.String> | System.String)>>, ...values: ResultValue[]): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_3002339423: null;
                }
                
                /**
                 * Defines the type identifiers for
                 * built-in fitting models.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class FittingModelTypeIdentifiers extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.ColumnValuesLine} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly ColumnValuesLine: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.ExponentialFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly ExponentialFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * The TypeIdentifier for {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.ForecastHoltWintersFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly ForecastHoltWintersFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * The TypeIdentifier for {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.GaussianFittingModel}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly GaussianFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.LogarithmicFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly LogarithmicFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.LogisticRegressionFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly LogisticRegressionFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.PolynomialFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly PolynomialFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.PowerFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly PowerFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.ReferenceCurveFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly ReferenceCurveFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.ReferenceCurveFromTableFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly ReferenceCurveFromTableFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.ReferenceLineFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly ReferenceLineFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.ReferenceLineFromTableFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly ReferenceLineFromTableFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * {@link Spotfire.Dxp.Application.Visuals.FittingModels.FittingModelTypeIdentifiers.StraightLineFittingModel} identifier.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly StraightLineFittingModel: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_769556918: null;
                }
                
                /**
                 * A model contining the parameters for a Holt-Winters forecast. Usually applied to time series data,
                 * but it can be used with any discrete set of repeated measurements.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ForecastHoltWintersFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this Holt Winters model allows interpolation to replace missing values.
                     * Setting this to true will mean that an empty value in the time series will be replaced by linear interpolation between
                     * the values before and after it. If there are multiple empty values in a row then no curve fit is computed.
                     * Setting this value to false will mean that if empty values are found in the time series, no curve fit is computed.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AllowEmptyValueReplacement(): JsType<System.Boolean>;
                    set AllowEmptyValueReplacement(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether the frequency parameter is deduced from the visualization.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AutomaticFrequency(): JsType<System.Boolean>;
                    set AutomaticFrequency(value: JsType<System.Boolean>);
                    /**
                     * Gets the confidence curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ConfidenceCurve(): ReferenceCurve;
                    /**
                     * Gets or sets the confidence level for the prediction intervals. Must be within the half-open unit interval [0, 1),
                     * but is typically close to 1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ConfidenceLevel(): JsType<System.Double>;
                    set ConfidenceLevel(value: JsType<System.Double>);
                    /**
                     * Gets the fitted curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get FittedCurve(): ReferenceCurve;
                    /**
                     * Gets the forecast curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ForecastCurve(): ReferenceCurve;
                    /**
                     * Gets or sets the frequency (the number of observations per sampling period). For example, monthly data have frequency=12.
                     * This must be greater than 1 to fit a seasonal component.<br />
                     * This is a convenience wrapper of {@link Spotfire.Dxp.Application.Visuals.FittingModels.ForecastHoltWintersFittingModel.FrequencyExpression}. If this property is read when preprocessor expression
                     * does not evaluate to a positive integer, -1 is returned.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Frequency(): JsType<System.Int32>;
                    set Frequency(value: JsType<System.Int32>);
                    /**
                     * Gets or sets the frequency expression (the number of observations per sampling period). For example, monthly data have frequency=12.
                     * This string is preprocessed and should evaluate to a positive integer.
                     * This must be greater than 1 to fit a seasonal component.<br />
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get FrequencyExpression(): JsType<System.String>;
                    set FrequencyExpression(value: JsType<System.String>);
                    /**
                     * Gets or sets the level (alpha) parameter of Holt-Winters specifying how to smooth the level component. Must be within the half-open unit interval (0, 1].
                     * A small value means that older values in x are weighted more heavily. Values near 1.0 mean that the latest value has more weight.
                     * NULL means that the HoltWinters function should find the optimal value of alpha.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Level(): (JsType<System.Double> | null);
                    set Level(value: (JsType<System.Double> | null));
                    /**
                     * Gets or sets the seasonal (gamma) parameter of Holt-Winters specifying how to smooth the seasonal component.
                     * Must be within the unit interval [0, 1]. A small value means that older values in x are weighted more heavily.
                     * Values near 1.0 mean that the latest value has more weight.
                     * NULL means that the HoltWinters function should find the optimal value of gamma.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Seasonal(): (JsType<System.Double> | null);
                    set Seasonal(value: (JsType<System.Double> | null));
                    /**
                     * Gets or sets the seasonal parameter.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SeasonalModelType(): HoltWintersSeasonalModelType;
                    set SeasonalModelType(value: HoltWintersSeasonalModelType);
                    /**
                     * Gets or sets the number of time points in the future at which to predict the values of the time series.
                     * This is a convenience wrapper of {@link Spotfire.Dxp.Application.Visuals.FittingModels.ForecastHoltWintersFittingModel.TimePointsAheadExpression}. If this property is read when the preprocessor expression
                     * does not evaluate to a positive integer, -1 is returned.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TimePointsAhead(): JsType<System.Int32>;
                    set TimePointsAhead(value: JsType<System.Int32>);
                    /**
                     * Gets or sets the number of time points in the future at which to predict the values of the time series
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TimePointsAheadExpression(): JsType<System.String>;
                    set TimePointsAheadExpression(value: JsType<System.String>);
                    /**
                     * Gets or sets the trend (beta) parameter of Holt-Winters specifying how to smooth the trend component. Must be within the unit interval [0, 1].
                     * A small value means that older values in x are weighted more heavily. Values near 1.0 mean that the latest value has more weight.
                     * NULL means that the HoltWinters function should find the optimal value of beta.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Trend(): (JsType<System.Double> | null);
                    set Trend(value: (JsType<System.Double> | null));
                    /**
                     * Gets or sets a value indicating whether the seasonal component should be included or not.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get UseSeasonal(): JsType<System.Boolean>;
                    set UseSeasonal(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether the trend component should be included or not.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get UseTrend(): JsType<System.Boolean>;
                    set UseTrend(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1516087392: null;
                }
                
                /**
                 * Represents a Gausssian fitting model that defines a Gaussian curve that minimizes the sum-of-squares of the
                 * y-distances between the data and the curve.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GaussianFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the value of the Amplitude of the Gaussian curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Amplitude(): JsType<System.Double>;
                    set Amplitude(value: JsType<System.Double>);
                    /**
                     * Gets or sets a value indicating whether the Amplitude should be constant during the fitting calculation.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AmplitudeIsFixed(): JsType<System.Boolean>;
                    set AmplitudeIsFixed(value: JsType<System.Boolean>);
                    /**
                     * Gets the Gaussian curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Curve(): ReferenceCurve;
                    /**
                     * Gets or sets the value of the Position (mean) of the Gaussian curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Position(): JsType<System.Double>;
                    set Position(value: JsType<System.Double>);
                    /**
                     * Gets or sets a value indicating whether the Position should be constant during the fitting calculation.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get PositionIsFixed(): JsType<System.Boolean>;
                    set PositionIsFixed(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the value of the Width of the Gaussian curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Width(): JsType<System.Double>;
                    set Width(value: JsType<System.Double>);
                    /**
                     * Gets or sets a value indicating whether the Width should be constant during the fitting calculation.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get WidthIsFixed(): JsType<System.Boolean>;
                    set WidthIsFixed(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3654846953: null;
                }
                
                /**
                 * HoltWintersModelType lists the available options for the SeasonalModelType parameter for {@link Spotfire.Dxp.Application.Visuals.FittingModels.ForecastHoltWintersFittingModel}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class HoltWintersSeasonalModelType extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Additive model. */
                    static readonly Additive: HoltWintersSeasonalModelType;
                    /** Multiplicative model. */
                    static readonly Multiplicative: HoltWintersSeasonalModelType;
                    private __type_1784172156: null;
                }
                
                /**
                 * The visualization features to calculate curves for. Features may be combined,
                 * which will result in one curve per combination.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class IndividualFittingModes extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** One curve per color. */
                    static readonly Color: IndividualFittingModes;
                    /** One curve per line. */
                    static readonly Line: IndividualFittingModes;
                    /** One curve, regardless of visualization features. */
                    static readonly None: IndividualFittingModes;
                    /** One curve per shape. */
                    static readonly Shape: IndividualFittingModes;
                    /** One curve per trellis panel. */
                    static readonly Trellis: IndividualFittingModes;
                    private __type_3467267928: null;
                }
                
                /**
                 * The logarithmic fitting model defines a logarithmic curve that minimizes the sum-of-squares of the
                 * y-distances between the data and the curve.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LogarithmicFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the logarithmic curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Curve(): ReferenceCurve;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3539575337: null;
                }
                
                /**
                 * The logistic regression fitting model defines a logistic regression curve that minimizes the sum-of-squares of the
                 * y-distances between the data and the curve.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LogisticRegressionFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the assumed transformation on the x-axis. This will affect the
                     * expression on the reference curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AssumedXTransformType(): AxisTransformType;
                    set AssumedXTransformType(value: AxisTransformType);
                    /**
                     * Gets the logistic regression curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Curve(): ReferenceCurve;
                    /**
                     * Gets or sets the fixed max.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get FixedMax(): JsType<System.Double>;
                    set FixedMax(value: JsType<System.Double>);
                    /**
                     * Gets or sets the fixed min.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get FixedMin(): JsType<System.Double>;
                    set FixedMin(value: JsType<System.Double>);
                    /**
                     * Gets or sets whether fixed max should be used.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get HasFixedMax(): JsType<System.Boolean>;
                    set HasFixedMax(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets whether fixed min should be used.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get HasFixedMin(): JsType<System.Boolean>;
                    set HasFixedMin(value: JsType<System.Boolean>);
                    /**
                     * Gets the inflection point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get InflectionPoint(): ReferencePoint;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_590604947: null;
                }
                
                /**
                 * The polynomial fitting model defines a polynomial curve that minimizes the sum-of-squares of the
                 * y-distances between the data and the curve.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class PolynomialFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the polynomial curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Curve(): ReferenceCurve;
                    /**
                     * Gets or sets the degree of the polynomial.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Degree(): JsType<System.Int32>;
                    set Degree(value: JsType<System.Int32>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3704828548: null;
                }
                
                /**
                 * The power fitting model defines a power curve that minimizes the sum-of-squares of the
                 * y-distances between the data and the curve.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class PowerFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the power curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Curve(): ReferenceCurve;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1283202067: null;
                }
                
                /**
                 * A reference curve is used to visualize the results from a fitting model.
                 * There are expressions defining the shape of the curve and where it begins and ends.
                 * The expressions may reference the result variables defined by the fitting model.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ReferenceCurve extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the color by which this reference curve is rendered.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): JsType<System.Drawing.Color>;
                    set Color(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the custom display name of the reference curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get CustomDisplayName(): JsType<System.String>;
                    set CustomDisplayName(value: JsType<System.String>);
                    /**
                     * Gets the reference curve detail collection.
                     * The details are shown in tooltips or labels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Details(): ReferenceDetailItemCollection;
                    /**
                     * Gets the display name of the reference curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DisplayName(): JsType<System.String>;
                    /**
                     * Gets the expression defining this reference curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Expression(): JsType<System.String>;
                    /**
                     * Gets or sets a value controlling if this reference curve is
                     * rendered behind other visual elements in the visualization.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IsBackground(): JsType<System.Boolean>;
                    set IsBackground(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the line style by which this reference curve is rendered.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LineStyle(): LineStyle;
                    set LineStyle(value: LineStyle);
                    /**
                     * Gets the name of the reference curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Name(): JsType<System.String>;
                    /**
                     * Gets or sets a value indicating whether this reference curve is visible.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Visible(): JsType<System.Boolean>;
                    set Visible(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the width of this reference curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Width(): JsType<System.Int32>;
                    set Width(value: JsType<System.Int32>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3614518066: null;
                }
                
                /**
                 * Used to display a reference curve.
                 * The shape of the curve is defined by an expression.
                 * The expression may reference the variable x and column names in the data table
                 * defined by {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceCurveFittingModel.DataTableReference}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ReferenceCurveFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the expression defining where this reference curve begins.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get BeginExpression(): JsType<System.String>;
                    set BeginExpression(value: JsType<System.String>);
                    /**
                     * Gets the reference curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Curve(): ReferenceCurve;
                    /**
                     * Gets or sets an expression specifying which columns in the current data table to make available to labels and tooltips.
                     * When this property is set, the curve's {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceDetailItemCollection}will contain items corresponding to the
                     * columns specified by the expression.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataTableDetailItemsExpression(): JsType<System.String>;
                    set DataTableDetailItemsExpression(value: JsType<System.String>);
                    /**
                     * Gets a value indicating whether the reference curve model uses a data table for looking up values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataTableEnabled(): JsType<System.Boolean>;
                    /**
                     * Gets or sets the data table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataTableReference(): Data.DataTable;
                    set DataTableReference(value: Data.DataTable);
                    /**
                     * Gets or sets the expression defining where this reference curve ends.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get EndExpression(): JsType<System.String>;
                    set EndExpression(value: JsType<System.String>);
                    /**
                     * Gets or sets the expression defining this curve.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Expression(): JsType<System.String>;
                    set Expression(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3359456030: null;
                }
                
                /**
                 * Represents reference item details shown in tooltips or labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ReferenceDetailItem extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the display name of this label/tooltip detail.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DisplayName(): JsType<System.String>;
                    /**
                     * Gets or sets the formatter used to format this detail.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Formatter(): Data.Formatters.IDataFormatter;
                    set Formatter(value: Data.Formatters.IDataFormatter);
                    /**
                     * Gets the name of this label/tooltip detail.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Name(): JsType<System.String>;
                    /**
                     * Gets or sets a value indicating whether to show this detail in the label for the reference item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowInLabel(): JsType<System.Boolean>;
                    set ShowInLabel(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether to show this detail in the tooltip for the reference item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowInTooltip(): JsType<System.Boolean>;
                    set ShowInTooltip(value: JsType<System.Boolean>);
                    /**
                     * Gets a value indicating whether this detail supports setting a formatter.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SupportsFormatter(): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_4137725879: null;
                }
                
                /**
                 * A collection of {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceDetailItem} shown in tooltips or labels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ReferenceDetailItemCollection extends Framework.DocumentModel.DocumentNodeListBase<ReferenceDetailItem> implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<ReferenceDetailItem>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<ReferenceDetailItem>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<ReferenceDetailItem>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the element at the specified index.
                     * @param index The zero-based index of the element to get.
                     * @returns The element at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), ReferenceDetailItem>;
                    private __type_2219284449: null;
                }
                
                /**
                 * Represents a horizontal or vertical reference line.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ReferenceLineFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this reference line should affect the range of axes.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AffectAxisRanges(): JsType<System.Boolean>;
                    set AffectAxisRanges(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets an expression specifying which columns in the current data table to make available to labels and tooltips.
                     * When this property is set, the line's {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceDetailItemCollection} will contain items corresponding to the
                     * columns specified by the expression.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataTableDetailItemsExpression(): JsType<System.String>;
                    set DataTableDetailItemsExpression(value: JsType<System.String>);
                    /**
                     * Gets a value indicating whether this reference line uses a data table for looking up values.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataTableEnabled(): JsType<System.Boolean>;
                    /**
                     * Gets or sets the data table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataTableReference(): Data.DataTable;
                    set DataTableReference(value: Data.DataTable);
                    /**
                     * Gets or sets the expression used to calculate the value to draw at.
                     * This may also be a constant value.
                     * For a horizontal line, for example use "Avg(Y)". For a vertical line, for example use "Avg(X)".
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Expression(): JsType<System.String>;
                    set Expression(value: JsType<System.String>);
                    /**
                     * Gets or sets a value indicating whether this reference line is horizontal or vertical.
                     * The {@link Spotfire.Dxp.Application.Visuals.FittingModels.ReferenceLineFittingModel.Expression} property will be updated to reflect the new variable.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IsHorizontal(): JsType<System.Boolean>;
                    set IsHorizontal(value: JsType<System.Boolean>);
                    /**
                     * Gets the curve that renders this reference line.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Line(): ReferenceCurve;
                    /**
                     * Gets or sets a value indicating whether to use the axis
                     * transform in calculations for this reference line.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get UseAxisTransform(): JsType<System.Boolean>;
                    set UseAxisTransform(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3643669429: null;
                }
                
                /**
                 * A reference point is used to visualize the results from a fitting model.
                 * There are expressions defining the X and Y position of the point.
                 * The expressions may reference the result variables defined by the fitting model.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ReferencePoint extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this reference point affects the axis ranges.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AffectAxisRanges(): JsType<System.Boolean>;
                    set AffectAxisRanges(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the color by which this reference point is rendered.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): JsType<System.Drawing.Color>;
                    set Color(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the custom name of this reference point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get CustomDisplayName(): JsType<System.String>;
                    set CustomDisplayName(value: JsType<System.String>);
                    /**
                     * Gets the reference point detail collection.
                     * The details are shown in tooltips or labels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Details(): ReferenceDetailItemCollection;
                    /**
                     * Gets the display name of this reference point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DisplayName(): JsType<System.String>;
                    /**
                     * Gets or sets a value controlling whether this reference point is
                     * rendered behind other visual elements in the visualization.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IsBackground(): JsType<System.Boolean>;
                    set IsBackground(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the shape of this reference point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get MarkerShape(): MarkerShape;
                    set MarkerShape(value: MarkerShape);
                    /**
                     * Gets the name of this reference point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Name(): JsType<System.String>;
                    /**
                     * Gets or sets the size of this reference point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Size(): JsType<System.Single>;
                    set Size(value: JsType<System.Single>);
                    /**
                     * Gets or sets a value indicating whether this reference point is visible.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Visible(): JsType<System.Boolean>;
                    set Visible(value: JsType<System.Boolean>);
                    /**
                     * Gets the expression defining the horizontal position of this point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get XExpression(): JsType<System.String>;
                    /**
                     * Gets the expression defining the vertical position of this point.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get YExpression(): JsType<System.String>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2008274831: null;
                }
                
                /**
                 * Represents a result value for a result variable in a fitting operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ResultValue extends Object {
                    /**
                     * Gets the actual value of this result value.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Value(): Data.DistinctDataValue;
                    /**
                     * Gets the name of the result variable for which this result value is.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get VariableName(): JsType<System.String>;
                    /**
                     * Initializes a new result value for a result variable.
                     * @param variableName The name of the result variable for which the result value is.
                     * @param value The result value.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    constructor(variableName: (JsType<System.String> | System.String), value: (JsType<System.Double> | System.Double));
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_816648812: null;
                }
                
                /**
                 * The straight line fitting model defines a straight line that minimizes the sum-of-squares of the
                 * y-distances between the data and the line.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class StraightLineFittingModel extends FittingModel implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the straight line.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Line(): ReferenceCurve;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2998420778: null;
                }
            }
            
            namespace Legend {
                /**
                 * A read-only collection of {@link Spotfire.Dxp.Application.Visuals.LegendItem | Legend Items}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LegendItemCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<LegendItem>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of items in this collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<LegendItem>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<LegendItem>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.LegendItem} at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), LegendItem>;
                    private __type_1443763458: null;
                }
            }
            
            namespace Maps {
                /**
                 * The visualization for map chart feature layers (see {@link Spotfire.Dxp.Application.Visuals.Maps.MapChartDataLayer}).
                 * A feature in this context typically means a polygon, line, or point specified by a shape file.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class FeatureLayerVisualization extends LayerVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the color axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ColorAxis(): ColorAxis;
                    /**
                     * Gets the details.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Details(): FeatureLayerVisualizationDetails;
                    /**
                     * Gets the axis that specifies how geometries are enumerated.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get GeometryByAxis(): GroupByAxis;
                    /**
                     * Gets or sets the threshold for geometry simplification, geometries with as
                     * many points as this or more will be subject to simplification.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get GeometrySimplificationThreshold(): JsType<System.Int32>;
                    set GeometrySimplificationThreshold(value: JsType<System.Int32>);
                    /**
                     * Gets the label column.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelColumn(): LabelColumn;
                    /**
                     * Gets or sets the font metadata used for the labels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelFontMetadata(): Framework.Styles.FontMetadata;
                    set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                    /**
                     * Gets or sets a value indicating label visibility.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelVisibility(): LabelVisibility;
                    set LabelVisibility(value: LabelVisibility);
                    /**
                     * Gets the visual attributes for line features.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LineFeatureVisualAttributes(): LineFeatureVisualAttributes;
                    /**
                     * Gets the visual attributes for point features.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get PointFeatureVisualAttributes(): PointFeatureVisualAttributes;
                    /**
                     * Gets the visual attributes for polygon features.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get PolygonFeatureVisualAttributes(): PolygonFeatureVisualAttributes;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3318535673: null;
                }
                
                /**
                 * Class representing feature detail information, typically displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class FeatureLayerVisualizationDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the detail item associated with the color by axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): NamedDetailItem;
                    /**
                     * Gets the detail item associated with the geometry by axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Geometry(): NamedDetailItem;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1322201519: null;
                }
                
                /**
                 * Represents a geocoding table as a data table reference or library item reference.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GeocodingTableReference extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the data table reference.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataTableReference(): (Data.DataTable | null);
                    /**
                     * Gets the library item for this geocoding table reference. null if the item is not found or library is not reachable.
                     * 
                     * @since 2.0
                     * 
                     * @group Extended capability 'LibraryRead'
                     */
                    get LibraryItem(): (Framework.Library.LibraryItem | null);
                    /**
                     * Gets the title for this reference, if {@link Spotfire.Dxp.Application.Visuals.Maps.GeocodingTableReference.HasTableReference} is
                     * true the data table name is used; if {@link Spotfire.Dxp.Application.Visuals.Maps.GeocodingTableReference.HasLibraryReference} is true
                     * the {@link Spotfire.Dxp.Application.Visuals.Maps.GeocodingTableReference.LibraryTitle} is used; otherwise string.Empty is returned.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Title(): JsType<System.String>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_747766460: null;
                }
                
                /**
                 * Represents a collection of geocoding tables as data table references or library item references.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GeocodingTableReferenceCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<GeocodingTableReference>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of elements contained in the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<GeocodingTableReference>;
                    /**
                     * Adds a data table to the collection.
                     * @param dataTable The data table to add to this collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Add(dataTable: Data.DataTable): void;
                    /**
                     * Adds the specified library item to this collection.
                     * @param libraryItem The library item to add.
                     * 
                     * @since 2.0
                     * 
                     * @group Extended capability 'LibraryRead'
                     */
                    Add(libraryItem: Framework.Library.LibraryItem): void;
                    /**
                     * Adds a data table to this collection.
                     * @param dataTable The data table to add to this collection.
                     * @param libraryItem The corresponding library item that the data table was loaded from.
                     * 
                     * @since 2.0
                     * 
                     * @group Extended capability 'LibraryRead'
                     */
                    Add(dataTable: Data.DataTable, libraryItem: Framework.Library.LibraryItem): void;
                    /**
                     * Removes all items from the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Returns an enumerator that iterates through the collection.
                     * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<GeocodingTableReference>;
                    /**
                     * Removes the specified data table from this collection.
                     * @param dataTable The data table to remove from this collection.
                     * @returns true if dataTable was successfully removed from this collection, otherwise false.
                     * This method also returns false if dataTable is not found in the original collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(dataTable: Data.DataTable): JsType<System.Boolean>;
                    /**
                     * Removes the specified library item from this collection.
                     * @param libraryItem The library item to remove from the collection.
                     * @returns true if libraryItem was successfully removed from the collection, otherwise false.
                     * This method also returns false if libraryItem is not found in the original collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Extended capability 'LibraryRead'
                     */
                    Remove(libraryItem: Framework.Library.LibraryItem): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<GeocodingTableReference>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the element at the specified index.
                     * @param index The zero-based index of the element to get or set.
                     * @returns The element at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), GeocodingTableReference>;
                    private __type_3643997076: null;
                }
                
                /**
                 * Represents an extent in a map chart. This extent is generally geographical, but can also represent
                 * a non-geographical extent in the case of Projection.None.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GeographicExtent extends Object {
                    /**
                     * Gets the east value of the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get East(): JsType<System.Double>;
                    /**
                     * Gets the north value of the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get North(): JsType<System.Double>;
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.Maps.GeographicExtent.Projection} in which the extent limits are expressed.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Projection(): Projection;
                    /**
                     * Gets the south value of the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get South(): JsType<System.Double>;
                    /**
                     * Gets the west value of the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get West(): JsType<System.Double>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Creates an extent with the provided limiting ranges.
                     * @param projection The {@link Spotfire.Dxp.Application.Visuals.Maps.GeographicExtent.Projection} in which the limits are expressed.
                     * @param xRange The x-range.
                     * @param yRange The y-range.
                     * @returns The new extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static Create(projection: Projection, xRange: Data.Range, yRange: Data.Range): GeographicExtent;
                    /**
                     * Creates an extent with the provided limiting points.
                     * @param projection The {@link Spotfire.Dxp.Application.Visuals.Maps.GeographicExtent.Projection} in which the limits are expressed.
                     * @param west The west.
                     * @param south The south.
                     * @param east The east.
                     * @param north The north.
                     * @returns The new extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static Create(projection: Projection, west: (JsType<System.Double> | System.Double), south: (JsType<System.Double> | System.Double), east: (JsType<System.Double> | System.Double), north: (JsType<System.Double> | System.Double)): GeographicExtent;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_2934376281: null;
                }
                
                /**
                 * An image layer in a {@link Spotfire.Dxp.Application.Visuals.Maps.MapChart}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ImageLayer extends MapChartLayer implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Extent(): GeographicExtent;
                    /**
                     * Gets or sets a value indicating whether the sharp edges of this {@link Spotfire.Dxp.Application.Visuals.Maps.ImageLayer} should be preserved when it is up-scaled.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get PreserveSharpEdges(): JsType<System.Boolean>;
                    set PreserveSharpEdges(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Sets the extent.
                     * @param extent The extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetExtent(extent: GeographicExtent): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_929763488: null;
                }
                
                /**
                 * The map chart interaction mode.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class InteractionMode extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Default interaction, as in other visualizations. For example rectangle marking and lasso marking. */
                    static readonly Default: InteractionMode;
                    /** Pan interaction, as in map applications. */
                    static readonly Panning: InteractionMode;
                    private __type_1167007001: null;
                }
                
                /**
                 * The layer handler widget state.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LayerHandlerState extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Collapsed state of the layer handler widget. */
                    static readonly Collapsed: LayerHandlerState;
                    /** Expanded state of the layer handler widget. */
                    static readonly Expanded: LayerHandlerState;
                    private __type_1582892670: null;
                }
                
                /**
                 * Represents a {@link Spotfire.Dxp.Application.Visuals.Visualization} that is used as a layer in a {@link Spotfire.Dxp.Application.Visuals.Maps.MapChart}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LayerVisualization extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the active data table used for the current geocoding configuration.
                     * May return null.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ActiveGeocodingTableReference(): (Data.DataTable | null);
                    /**
                     * Gets the data tables to be used when geocoding.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get GeocodingTableReferences(): GeocodingTableReferenceCollection;
                    /**
                     * Gets the legend item for this layer visualization.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LegendItem(): LegendLayerTitleItem;
                    /**
                     * Gets or sets a value indicating whether this visualization should be trellised the same way
                     * as the main trellis layer in the map chart, see {@link Spotfire.Dxp.Application.Visuals.Maps.MapChart.TrellisLayerReference}.
                     * The default value is false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TrellisingFollowsMainLayer(): JsType<System.Boolean>;
                    set TrellisingFollowsMainLayer(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Automatically configures geocoding for this layer by (optionally) attempting to apply column classification,
                     * (optionally) changing the geocoding axis expression, and then applying automatic geocoding hierarchies.
                     * @param forceAutoload Force automatic loading of geocoding tables from the library.
                     * @param allowChangeAxisExpression truec&gt; if the geocoding axis expression is allowed to be changed by automatic geocoding.
                     * @param applyColumnClassification If set to true, automatic column classification is applied.
                     * @returns true if geocoding was applied to the layer, false otherwise.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AutoConfigureGeocoding(forceAutoload: (JsType<System.Boolean> | System.Boolean), allowChangeAxisExpression: (JsType<System.Boolean> | System.Boolean), applyColumnClassification: (JsType<System.Boolean> | System.Boolean)): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1223449793: null;
                }
                
                /**
                 * Represents a legend item containing the title of a layer visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LegendLayerTitleItem extends LegendTextItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the text contained in this legend item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Text(): JsType<System.String>;
                    /**
                     * Gets the title.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Title(): JsType<System.String>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_72982259: null;
                }
                
                /**
                 * Represents a web map style image from url legend item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LegendWmsStyleItem extends LegendItem implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the title of this legend item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Title(): JsType<System.String>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_494152722: null;
                }
                
                /**
                 * Visual attributes for lines in a {@link Spotfire.Dxp.Application.Visuals.Maps.FeatureLayerVisualization} in a {@link Spotfire.Dxp.Application.Visuals.Maps.MapChart}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LineFeatureVisualAttributes extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the width of the lines.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LineWidth(): JsType<System.Single>;
                    set LineWidth(value: JsType<System.Single>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1085653065: null;
                }
                
                /**
                 * Represents a map chart visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MapChart extends TrellisVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether to auto-zoom.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AutoZoom(): JsType<System.Boolean>;
                    set AutoZoom(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a the interaction mode.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get InteractionMode(): InteractionMode;
                    set InteractionMode(value: InteractionMode);
                    /**
                     * Gets or sets the interactive layer, that is, the data layer that will respond to user interaction like mark and highlight.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get InteractiveLayerReference(): (MapChartDataLayer | null);
                    set InteractiveLayerReference(value: (MapChartDataLayer | null));
                    /**
                     * Gets or sets the layer handler widget state.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LayerHandlerState(): LayerHandlerState;
                    set LayerHandlerState(value: LayerHandlerState);
                    /**
                     * Gets the map layers in the order back to front.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Layers(): MapChartLayerCollection;
                    /**
                     * Gets or sets a the marking mode.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get MarkingMode(): MarkingMode;
                    set MarkingMode(value: MarkingMode);
                    /**
                     * Gets or sets the display projection for the map chart, or null if this map chart is showing non-geographical data.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Projection(): Projection;
                    set Projection(value: Projection);
                    /**
                     * Gets or sets the font metadata used for the scale.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ScaleFontMetadata(): Framework.Styles.FontMetadata;
                    set ScaleFontMetadata(value: Framework.Styles.FontMetadata);
                    /**
                     * Gets or sets a value indicating whether to show interaction mode control.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowInteractionMode(): JsType<System.Boolean>;
                    set ShowInteractionMode(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether to show the layer handler.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowLayerHandler(): JsType<System.Boolean>;
                    set ShowLayerHandler(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether to show the navigation controls.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowNavigationControls(): JsType<System.Boolean>;
                    set ShowNavigationControls(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether to show the scale.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowScale(): JsType<System.Boolean>;
                    set ShowScale(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether to show the search field.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowSearchField(): JsType<System.Boolean>;
                    set ShowSearchField(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the transform for this map chart. This is used when the x and y in the data need to be displayed with scaling.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Transform(): MapChartTransform;
                    set Transform(value: MapChartTransform);
                    /**
                     * Gets or sets the trellis layer, that is, the data layer that will control trellising.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TrellisLayerReference(): (MapChartDataLayer | null);
                    set TrellisLayerReference(value: (MapChartDataLayer | null));
                    /**
                     * Gets or sets the view extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ViewExtent(): GeographicExtent;
                    set ViewExtent(value: GeographicExtent);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Loads the default layers for a Map Chart (e.g. base Map Layer, TMS Layer or Feature Layer) and causes the main thread to hang until these default layers are loaded.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AutoConfigureLayers(): void;
                    /**
                     * Sets the view extent to the union of all layers that have the property IncludeInResetViewExtent set to true.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    ResetViewExtent(): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_951142424: null;
                }
                
                /**
                 * Represents a data layer for map charts.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MapChartDataLayer extends MapChartLayer implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Extent(): GeographicExtent;
                    /**
                     * Gets the layer visualization for this data layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Visualization(): LayerVisualization;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Gets the layer visualization as the specified type, or null if the layer visualization is of another type.
                     * @returns The layer visualization as the specified type, or null if the layer visualization is of another type.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     * @param typeT - @@Generic type argument
                     */
                    As<T extends LayerVisualization>(typeT: TypeRefParam<T>): (JsType<T> | null);
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2494849139: null;
                }
                
                /**
                 * Base class for layers in the map chart.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MapChartLayer extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this {@link Spotfire.Dxp.Application.Visuals.Maps.MapChartLayer} is enabled.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Enabled(): JsType<System.Boolean>;
                    set Enabled(value: JsType<System.Boolean>);
                    /**
                     * Gets the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Extent(): GeographicExtent;
                    /**
                     * Gets or sets a value indicating whether this layer's extent should be taken into account when auto-zooming.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IncludeInAutoZoom(): JsType<System.Boolean>;
                    set IncludeInAutoZoom(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether this layer's extent should be taken into account when resetting view extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IncludeInResetViewExtent(): JsType<System.Boolean>;
                    set IncludeInResetViewExtent(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the projection for this layer, or {@link Spotfire.Dxp.Application.Visuals.Maps.Projection.None} if using non-geographical data.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Projection(): Projection;
                    set Projection(value: Projection);
                    /**
                     * Gets a value indicating whether the layer supports transparency or not.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SupportsTransparency(): JsType<System.Boolean>;
                    /**
                     * Gets or sets the title for this layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Title(): JsType<System.String>;
                    set Title(value: JsType<System.String>);
                    /**
                     * Gets or sets the transparency.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Transparency(): JsType<System.Double>;
                    set Transparency(value: JsType<System.Double>);
                    /**
                     * Gets or sets the zoom level range where this {@link Spotfire.Dxp.Application.Visuals.Maps.MapChartLayer} is visible.
                     * Use {@link Spotfire.Dxp.Application.Visuals.Maps.ZoomLevelRange.Unlimited} for unlimited zoom level range.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get VisibleZoomLevelRange(): ZoomLevelRange;
                    set VisibleZoomLevelRange(value: ZoomLevelRange);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Auto-configures the map chart layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AutoConfigure(): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1352283267: null;
                }
                
                /**
                 * Represents a collection of map chart layers in the order back to front.
                 * That is, the layer at index 0 is the rearmost layer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MapChartLayerCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<MapChartLayer>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of layers contained in this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<MapChartLayer>;
                    /**
                     * Adds a new {@link Spotfire.Dxp.Application.Visuals.Maps.MapChartDataLayer} to this collection.
                     * @param featureTable The data table to be used as feature table for the layer.
                     * @param featureLayerVisualization The newly created feature layer visualization.
                     * @returns The newly created layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNewFeatureLayer(featureTable: Data.DataTable, featureLayerVisualization: OutParam<FeatureLayerVisualization>): MapChartDataLayer;
                    /**
                     * Adds a new {@link Spotfire.Dxp.Application.Visuals.Maps.MapChartDataLayer} to this collection.
                     * @param dataTable The data table to be used for the layer.
                     * @param markerLayerVisualization The newly created marker layer visualization.
                     * @returns The newly created layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNewMarkerLayer(dataTable: Data.DataTable, markerLayerVisualization: OutParam<MarkerLayerVisualization>): MapChartDataLayer;
                    /**
                     * Adds a new standard tile layer.
                     * @returns The newly created standard tile layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNewStandardTileLayer(): StandardTileLayer;
                    /**
                     * Adds a new TMS layer.
                     * @returns The newly created TMS layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNewTmsLayer(): TmsLayer;
                    /**
                     * Adds a new WMS layer.
                     * @returns The newly created WMS layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNewWmsLayer(): WmsLayer;
                    /**
                     * Removes all items from this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Returns an enumerator that iterates through the collection.
                     * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<MapChartLayer>;
                    /**
                     * Determines the index of a specific item.
                     * @param item The object to locate.
                     * @returns The index of item if found; otherwise, -1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    IndexOf(item: MapChartLayer): JsType<System.Int32>;
                    /**
                     * Moves the item at the specified index to a new location in the collection.
                     * @param fromIndex The zero-based index specifying the location of the item to be moved.
                     * @param toIndex The zero-based index specifying the new location of the item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Removes the first occurrence of the specified layer from this instance.
                     * @param item The item to remove.
                     * @returns true if item was removed;
                     * otherwise, false. This method also returns false if item is not found.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(item: MapChartLayer): JsType<System.Boolean>;
                    /**
                     * Removes the item at the specified index.
                     * @param index The zero-based index of the item to remove.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<MapChartLayer>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the layer at the specified index.
                     * @param index The zero-based index of the layer to get.
                     * @returns The layer at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), MapChartLayer>;
                    private __type_2000144953: null;
                }
                
                /**
                 * Denotes a transformation that can be applied to a map chart.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MapChartTransform extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Creates a transform from the specified scale factors.
                     * @param x The x-scale factor.
                     * @param y The y-scale factor.
                     * @returns A transform that scales from the source ranges to the destination counterparts.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static FromScales(x: (JsType<System.Double> | System.Double), y: (JsType<System.Double> | System.Double)): MapChartTransform;
                    /**
                     * The identity transform, that is, without change.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly Identity: MapChartTransform;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_1299820924: null;
                }
                
                /**
                 * The visualization for map chart marker layers (see {@link Spotfire.Dxp.Application.Visuals.Maps.MapChartDataLayer}).
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MarkerLayerVisualization extends LayerVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether marker size should be adjusted to current zoom level.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AdjustMarkerSizeToZoomLevel(): JsType<System.Boolean>;
                    set AdjustMarkerSizeToZoomLevel(value: JsType<System.Boolean>);
                    /**
                     * Gets the color axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ColorAxis(): ColorAxis;
                    /**
                     * Gets the details.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Details(): MarkerLayerVisualizationDetails;
                    /**
                     * Gets the drawing order axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DrawingOrderAxis(): OrderByAxis;
                    /**
                     * Gets the label column.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelColumn(): LabelColumn;
                    /**
                     * Gets or sets the font metadata used for the labels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelFontMetadata(): Framework.Styles.FontMetadata;
                    set LabelFontMetadata(value: Framework.Styles.FontMetadata);
                    /**
                     * Gets or sets the size of labels showing images.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelImageSize(): JsType<System.Single>;
                    set LabelImageSize(value: JsType<System.Single>);
                    /**
                     * Gets or sets the label layout.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelLayout(): MarkerLabelLayout;
                    set LabelLayout(value: MarkerLabelLayout);
                    /**
                     * Gets the label renderer settings.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelRenderer(): ValueRenderers.ValueRendererSettings;
                    /**
                     * Gets or sets a value indicating label visibility.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LabelVisibility(): LabelVisibility;
                    set LabelVisibility(value: LabelVisibility);
                    /**
                     * Gets the line connection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LineConnection(): LineConnection;
                    /**
                     * Gets the axis to group markers by.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get MarkerByAxis(): GroupByAxis;
                    /**
                     * Gets or sets the class type of the markers in this marker layer visualization.
                     * Using this property the markers can be switched between simple
                     * markers, tiled markers and separate charts (for example pies).
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get MarkerClass(): MarkerClass;
                    set MarkerClass(value: MarkerClass);
                    /**
                     * Gets or sets the size of the markers.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get MarkerSize(): JsType<System.Single>;
                    set MarkerSize(value: JsType<System.Single>);
                    /**
                     * Gets or sets a value indicating max number of drawn labels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get MaxNumberOfLabels(): JsType<System.Int32>;
                    set MaxNumberOfLabels(value: JsType<System.Int32>);
                    /**
                     * Gets the pie marker settings to use when this plot is configured to show pies.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get PieMarker(): PieMarker;
                    /**
                     * Gets or sets the positioning method.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get PositioningMethod(): PositioningMethod;
                    set PositioningMethod(value: PositioningMethod);
                    /**
                     * Gets the marker rotation axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get RotationAxis(): MarkerRotationAxis;
                    /**
                     * Gets the axis that can be used to alter the expression by which marker shapes are chosen.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShapeAxis(): ShapeAxis;
                    /**
                     * Gets or sets a value indicating whether a label with empty content should be shown or not.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowEmptyLabels(): JsType<System.Boolean>;
                    set ShowEmptyLabels(value: JsType<System.Boolean>);
                    /**
                     * Gets the size axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SizeAxis(): SizeAxis;
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.ScaleAxis} for the x-axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get XAxis(): ScaleAxis;
                    /**
                     * Gets or sets the amount of jittering in the x-direction.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get XJitter(): JsType<System.Double>;
                    set XJitter(value: JsType<System.Double>);
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.ScaleAxis} for the y-axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get YAxis(): ScaleAxis;
                    /**
                     * Gets or sets the amount of jittering in the y-direction.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get YJitter(): JsType<System.Double>;
                    set YJitter(value: JsType<System.Double>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Sets the label renderer.
                     * @param typeId The type id.
                     * @returns The label renderer settings associated with the type id.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetLabelRenderer(typeId: Framework.DocumentModel.TypeIdentifier): ValueRenderers.ValueRendererSettings;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_200203075: null;
                }
                
                /**
                 * Class representing marker detail information, typically displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MarkerLayerVisualizationDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the detail item associated with the color by axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): NamedDetailItem;
                    /**
                     * Gets the detail item associated with the marker by axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Marker(): NamedDetailItem;
                    /**
                     * Gets the detail item associated with the rotation by axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Rotation(): NamedDetailItem;
                    /**
                     * Gets the detail item associated with the shape by axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Shape(): NamedDetailItem;
                    /**
                     * Gets the detail item associated with the size by axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Size(): NamedDetailItem;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1811939297: null;
                }
                
                /**
                 * The map chart marking mode.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MarkingMode extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Use a circle shape for marking markers or features on the map. The circle also displays its radius in map's units in a label. */
                    static readonly Circle: MarkingMode;
                    /** Use a lasso shape for marking markers or features on the map. */
                    static readonly Lasso: MarkingMode;
                    /** Use rectangle shape for marking markers or features on the map. */
                    static readonly Rectangle: MarkingMode;
                    private __type_930862318: null;
                }
                
                /**
                 * Visual attributes for points in a {@link Spotfire.Dxp.Application.Visuals.Maps.FeatureLayerVisualization} in a {@link Spotfire.Dxp.Application.Visuals.Maps.MapChart}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class PointFeatureVisualAttributes extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the size of the points.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get PointSize(): JsType<System.Single>;
                    set PointSize(value: JsType<System.Single>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_859538835: null;
                }
                
                /**
                 * Visual attributes for polygons in a {@link Spotfire.Dxp.Application.Visuals.Maps.FeatureLayerVisualization} in a {@link Spotfire.Dxp.Application.Visuals.Maps.MapChart}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class PolygonFeatureVisualAttributes extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the border color of polygons.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get BorderColor(): JsType<System.Drawing.Color>;
                    set BorderColor(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the border width of polygons.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get BorderWidth(): JsType<System.Single>;
                    set BorderWidth(value: JsType<System.Single>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1684792963: null;
                }
                
                /**
                 * Represents a projection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class Projection extends Object {
                    /**
                     * Gets the identifier for this projection, typically an EPSG code on the form "EPSG:1234". The empty string for {@link Spotfire.Dxp.Application.Visuals.Maps.Projection.None}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Identifier(): JsType<System.String>;
                    /**
                     * Initializes a new instance of the {@link Spotfire.Dxp.Application.Visuals.Maps.Projection} class.
                     * @param identifier The projection identifier, EPSG code on the form "EPSG:1234". Any whitespace is removed from both ends of the string.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    constructor(identifier: (JsType<System.String> | System.String));
                    /**
                     * Initializes a new instance of the {@link Spotfire.Dxp.Application.Visuals.Maps.Projection} class as a custom defined projection.
                     * This type of projection can be generated from imported GeoTIFF image files or from imported Shape files or they can be added by users.
                     * @param identifier The projection identifier, EPSG code on the form "EPSG:1234". Any whitespace is removed from both ends of the string.
                     * @param proj4Definition The projection PROJ4 definition.
                     * @param displayName The projection display name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    constructor(identifier: (JsType<System.String> | System.String), proj4Definition: (JsType<System.String> | System.String), displayName: (JsType<System.String> | System.String));
                    /**
                     * Determines whether the specified object is equal to the current object.
                     * @param obj The object to compare with the current object.
                     * @returns true if the specified object  is equal to the current object; otherwise, false.
                     */
                    Equals(obj: any): JsType<System.Boolean>;
                    /**
                     * Indicates whether the current object is equal to another object of the same type.
                     * @param other An object to compare with this object.
                     * @returns true if the current object is equal to the other parameter; otherwise, false.
                     */
                    Equals(other: Projection): JsType<System.Boolean>;
                    /**
                     * The non-geographic projection. Typically used for showing an arbitrary background image without geographic context.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly None: Projection;
                    /**
                     * The "Web Mercator (auxiliary sphere)" coordinate reference system. See http://www.epsg-registry.org for reference.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly WebMercator: Projection;
                    /**
                     * The "WGS 84" projection/coordinate reference system. See http://www.epsg-registry.org for reference.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly Wgs84: Projection;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_2300450541: null;
                }
                
                /**
                 * Tiled map layer using the standard web map service.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class StandardTileLayer extends TileLayer implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Extent(): GeographicExtent;
                    /**
                     * Gets or sets the name of the map service to use, for example "Basic map" or "Roads".
                     * If the service is not found, the map layer is still valid except there will be a visualization issue
                     * and no map tiles will be displayed.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ServiceName(): JsType<System.String>;
                    set ServiceName(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Retrieves a list of available service names from the map server. Note that this operation can be slow.
                     * @returns A list of available service names.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AvailableServiceNames(): System.Collections.Generic.IList<JsType<System.String>>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2935462188: null;
                }
                
                /**
                 * The base class for tiled map service layers. These layers are used as background layers in the map chart, by
                 * fetching map tiles (bitmaps) from a web service.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class TileLayer extends MapChartLayer implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether this layer's extent should be taken into account when resetting view extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IncludeInResetViewExtent(): JsType<System.Boolean>;
                    set IncludeInResetViewExtent(value: JsType<System.Boolean>);
                    /**
                     * Gets a value indicating whether the layer supports transparency or not.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SupportsTransparency(): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_885217347: null;
                }
                
                /**
                 * Tiled map layer using the standard web map service.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class TmsLayer extends TileLayer implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the TMS layer copyright link.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get CopyrightLink(): (JsType<System.Uri> | null);
                    set CopyrightLink(value: (JsType<System.Uri> | null));
                    /**
                     * Gets or sets the TMS layer copyright text.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get CopyrightText(): JsType<System.String>;
                    set CopyrightText(value: JsType<System.String>);
                    /**
                     * Gets the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Extent(): GeographicExtent;
                    /**
                     * Gets or sets the TMS layer URL template. Should have {x}, {y} and {z} in its path.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get UrlTemplate(): (JsType<System.Uri> | null);
                    set UrlTemplate(value: (JsType<System.Uri> | null));
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1563193789: null;
                }
                
                /**
                 * Web map service (WMS) layer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class WmsLayer extends MapChartLayer implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether images should be cached in the browser cache.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get CacheImages(): JsType<System.Boolean>;
                    set CacheImages(value: JsType<System.Boolean>);
                    /**
                     * Gets the extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Extent(): GeographicExtent;
                    /**
                     * Gets or sets a value indicating whether this layer's extent should be taken into account when resetting view extent.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IncludeInResetViewExtent(): JsType<System.Boolean>;
                    set IncludeInResetViewExtent(value: JsType<System.Boolean>);
                    /**
                     * Gets the legend object for this layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Legend(): Legend;
                    /**
                     * Gets the legend item for this layer visualization.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LegendStyleImagesItem(): LegendWmsStyleItem;
                    /**
                     * Gets the legend title item for this layer visualization.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LegendTitleItem(): LegendLayerTitleItem;
                    /**
                     * Gets or sets the base URI of the WMS.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ServiceBaseUri(): (JsType<System.Uri> | null);
                    /**
                     * Gets or sets a value indicating whether warnings for projection mismatch and missing tiles should be shown.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowWarnings(): JsType<System.Boolean>;
                    set ShowWarnings(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether credentials for the layer are stored in the dxp file
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get StoreCredentials(): JsType<System.Boolean>;
                    set StoreCredentials(value: JsType<System.Boolean>);
                    /**
                     * Gets the sublayers.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Sublayers(): WmsSublayerCollection;
                    /**
                     * Gets a value indicating whether the layer supports transparency or not.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SupportsTransparency(): JsType<System.Boolean>;
                    /**
                     * Gets or sets a value indicating whether a tiled schema should be used when rendering.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TiledRendering(): JsType<System.Boolean>;
                    set TiledRendering(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether credentials are used for WMS layer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get UseCredentials(): JsType<System.Boolean>;
                    set UseCredentials(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1563027040: null;
                }
                
                /**
                 * Web map service (WMS) sublayer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class WmsSublayer extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the name, should match layer name defined on WMS server.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Name(): JsType<System.String>;
                    set Name(value: JsType<System.String>);
                    /**
                     * Gets or sets the style name, use empty string for default style.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get StyleName(): JsType<System.String>;
                    set StyleName(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3046612428: null;
                }
                
                /**
                 * Represents a collection of WMS sublayers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class WmsSublayerCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<WmsSublayer>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of layers contained in this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<WmsSublayer>;
                    /**
                     * Adds a new sublayer to this collection.
                     * @param name The sublayer name.
                     * @param styleName The sublayer style name.
                     * @returns The newly created sublayer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNew(name: (JsType<System.String> | System.String), styleName: (JsType<System.String> | System.String)): WmsSublayer;
                    /**
                     * Removes all items from this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Returns an enumerator that iterates through the collection.
                     * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<WmsSublayer>;
                    /**
                     * Determines the index of a specific item.
                     * @param item The object to locate.
                     * @returns The index of item if found; otherwise, -1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    IndexOf(item: WmsSublayer): JsType<System.Int32>;
                    /**
                     * Moves the item at the specified index to a new location in the collection.
                     * @param fromIndex The zero-based index specifying the location of the item to be moved.
                     * @param toIndex The zero-based index specifying the new location of the item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Removes the first occurrence of the specified layer from this instance.
                     * @param item The item to remove.
                     * @returns true if item was removed;
                     * otherwise, false. This method also returns false if item is not found.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(item: WmsSublayer): JsType<System.Boolean>;
                    /**
                     * Removes the item at the specified index.
                     * @param index The zero-based index of the item to remove.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<WmsSublayer>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the layer at the specified index.
                     * @param index The zero-based index of the layer to get.
                     * @returns The layer at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), WmsSublayer>;
                    private __type_1992943508: null;
                }
                
                /**
                 * Represents a range of zoom levels.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ZoomLevelRange extends Object {
                    /**
                     * Gets the ending (nearest) zoom level, or null if not limited to an ending zoom level.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get End(): (JsType<System.Int32> | null);
                    /**
                     * Gets the starting (farthest) zoom level, or null if not limited to a starting zoom level.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Start(): (JsType<System.Int32> | null);
                    /**
                     * Initializes a new instance of the {@link Spotfire.Dxp.Application.Visuals.Maps.ZoomLevelRange} class.
                     * @param start The starting (farthest) zoom level, or null if not limited to a starting zoom level.
                     * @param end The ending (nearest) zoom level, or null if not limited to an ending zoom level.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    constructor(start: ((JsType<System.Int32> | System.Int32) | null), end: ((JsType<System.Int32> | System.Int32) | null));
                    /**
                     * Determines whether the specified object is equal to the current object.
                     * @param obj The object to compare with the current object.
                     * @returns true if the specified object  is equal to the current object; otherwise, false.
                     */
                    Equals(obj: any): JsType<System.Boolean>;
                    /**
                     * Indicates whether the current object is equal to another object of the same type.
                     * @param other An object to compare with this object.
                     * @returns true if the current object is equal to the other parameter, otherwise false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Equals(other: ZoomLevelRange): JsType<System.Boolean>;
                    /**
                     * The unlimited zoom level range.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly Unlimited: ZoomLevelRange;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_2179990766: null;
                }
            }
            
            namespace Miniatures {
                /**
                 * Represents a qualititave range in a bullet graph.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class BulletGraphColorRange extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the color of the range.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): JsType<System.Drawing.Color>;
                    set Color(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the display name of the range.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DisplayName(): JsType<System.String>;
                    set DisplayName(value: JsType<System.String>);
                    /**
                     * Gets or sets the expression that defines the range limit.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Expression(): JsType<System.String>;
                    set Expression(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2602404704: null;
                }
                
                /**
                 * Represents a collection of color range items.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class BulletGraphColorRangeCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<BulletGraphColorRange>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of items in the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<BulletGraphColorRange>;
                    /**
                     * Creates and adds a new color range.
                     * @param color The color of the range.
                     * @param displayName The display name of the range.
                     * @returns The created color range.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddNew(color: (JsType<System.Drawing.Color> | System.Drawing.Color), displayName: (JsType<System.String> | System.String)): BulletGraphColorRange;
                    /**
                     * Removes all items from this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Returns an enumerator that iterates through the collection.
                     * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<BulletGraphColorRange>;
                    /**
                     * Determines the index of a specific item in this instance.
                     * @param item The object to locate in this instance.
                     * @returns The index of item if found in the list; otherwise, -1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    IndexOf(item: BulletGraphColorRange): JsType<System.Int32>;
                    /**
                     * Removes the specified color range.
                     * @param colorRange The color range.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(colorRange: BulletGraphColorRange): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<BulletGraphColorRange>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.Miniatures.BulletGraphColorRange} at the specified index.
                     * @param index The index for the item.
                     * @returns The specified range.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), BulletGraphColorRange>;
                    private __type_2119903996: null;
                }
                
                /**
                 * A miniature visualization that can render bullet graphs.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class BulletGraphMiniatureVisualization extends MiniatureVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the collection of color ranges.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ColorRanges(): BulletGraphColorRangeCollection;
                    /**
                     * Gets or sets the color used for the comparative bar.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ComparativeValueColor(): JsType<System.Drawing.Color>;
                    set ComparativeValueColor(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the expression that defines the comparative value.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ComparativeValueExpression(): JsType<System.String>;
                    set ComparativeValueExpression(value: JsType<System.String>);
                    /**
                     * Gets the details object that controls how tooltips are displayed in this plot.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Details(): BulletGraphMiniatureVisualizationDetails;
                    /**
                     * Gets or sets a value indicating whether to show color ranges.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowColorRanges(): JsType<System.Boolean>;
                    set ShowColorRanges(value: JsType<System.Boolean>);
                    /**
                     * Gets the value axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ValueAxis(): BulletGraphScaleAxis;
                    /**
                     * Gets or sets the color used for the value bar.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ValueColor(): JsType<System.Drawing.Color>;
                    set ValueColor(value: JsType<System.Drawing.Color>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_237034748: null;
                }
                
                /**
                 * Representation of detail information for a {@link Spotfire.Dxp.Application.Visuals.Miniatures.BulletGraphMiniatureVisualization}.
                 * The information contained in this class is displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class BulletGraphMiniatureVisualizationDetails extends MiniatureVisualizationDetails implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2327249958: null;
                }
                
                /**
                 * Represents a bullet graph scale axis.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class BulletGraphScaleAxis extends ScaleAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the scale.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Scale(): Scale;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3563696721: null;
                }
                
                /**
                 * Axis used to define symbols within a visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CalculatedValueAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the formatting.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Formatting(): Formatting;
                    /**
                     * Gets the rules that controls how values are rendered.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Rules(): CalculatedValueRuleCollection;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1334668964: null;
                }
                
                /**
                 * A miniature visualization that can render single values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CalculatedValueMiniatureVisualization extends MiniatureVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the details object that controls how tooltips are displayed in this plot.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Details(): CalculatedValueMiniatureVisualizationDetails;
                    /**
                     * Gets the value axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ValueAxis(): CalculatedValueAxis;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2284102449: null;
                }
                
                /**
                 * Representation of detail information for a {@link Spotfire.Dxp.Application.Visuals.Miniatures.CalculatedValueMiniatureVisualization}.
                 * The information contained in this class is displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CalculatedValueMiniatureVisualizationDetails extends MiniatureVisualizationDetails implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the detail item associated with the Value axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Value(): NamedDetailItem;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1641119067: null;
                }
                
                /**
                 * Represents a rule that uses a boolean condition to determine appearance of a calculated value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CalculatedValueRule extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the color for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): JsType<System.Drawing.Color>;
                    set Color(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the font style for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get FontStyleFlags(): Framework.Styles.FontStyleFlags;
                    set FontStyleFlags(value: Framework.Styles.FontStyleFlags);
                    /**
                     * Gets or sets the display name. If set to null, the ColorRule will be
                     * represented with an auto-generated name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ManualDisplayName(): JsType<System.String>;
                    set ManualDisplayName(value: JsType<System.String>);
                    /**
                     * Gets the rule condition.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get RuleCondition(): RuleCondition;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1321372157: null;
                }
                
                /**
                 * Represents the set of rules in a {@link Spotfire.Dxp.Application.Visuals.Miniatures.CalculatedValueMiniatureVisualization} that are used to determine
                 * the color and fontstyle of the rendered value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CalculatedValueRuleCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<CalculatedValueRule>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the count.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<CalculatedValueRule>;
                    /**
                     * Adds a bottom N rule to the end of the collection.
                     * @param rank An integer specifying the rank of the added rule.
                     * @param color The color of the added rule.
                     * @param fontStyleFlags The font style.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddBottomNRule(rank: (JsType<System.Int32> | System.Int32), color: (JsType<System.Drawing.Color> | System.Drawing.Color), fontStyleFlags: Framework.Styles.FontStyleFlags): CalculatedValueRule;
                    /**
                     * Adds a bottom N rule to the end of the collection.
                     * @param value A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}, that has to evaluate to an integer.
                     * @param color The color.
                     * @param fontStyleFlags The font style.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddBottomNRule(value: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), fontStyleFlags: Framework.Styles.FontStyleFlags): CalculatedValueRule;
                    /**
                     * Adds a new expression rule to the end of the collection.
                     * @param booleanExpression The boolean expression.
                     * @param color The color.
                     * @param fontStyleFlags The font style.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddExpressionRule(booleanExpression: (JsType<System.String> | System.String), color: (JsType<System.Drawing.Color> | System.Drawing.Color), fontStyleFlags: Framework.Styles.FontStyleFlags): CalculatedValueRule;
                    /**
                     * Adds a range rule to the end of the collection.
                     * @param startValue The start value.
                     * @param endValue The end value.
                     * @param color The color.
                     * @param fontStyleFlags The font style.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddRangeRule(startValue: ConditionalColoring.ConditionValue, endValue: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), fontStyleFlags: Framework.Styles.FontStyleFlags): CalculatedValueRule;
                    /**
                     * Adds a string color rule to the end of the collection.
                     * @param comparisonOperator The comparison operator.
                     * @param value The value.
                     * @param color The color.
                     * @param fontStyleFlags The font style.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddStringRule(comparisonOperator: ConditionalColoring.StringComparisonOperator, value: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), fontStyleFlags: Framework.Styles.FontStyleFlags): CalculatedValueRule;
                    /**
                     * Adds a threshold color rule to the end of the collection.
                     * @param comparisonOperator The comparison operator.
                     * @param value The threshold value.
                     * @param color The color.
                     * @param fontStyleFlags The font style.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddThresholdRule(comparisonOperator: ConditionalColoring.RuleComparisonOperator, value: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), fontStyleFlags: Framework.Styles.FontStyleFlags): CalculatedValueRule;
                    /**
                     * Adds a top N rule to the end of the collection.
                     * @param rank An integer specifying the rank of the added rule.
                     * @param color The color.
                     * @param fontStyleFlags The font style.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddTopNRule(rank: (JsType<System.Int32> | System.Int32), color: (JsType<System.Drawing.Color> | System.Drawing.Color), fontStyleFlags: Framework.Styles.FontStyleFlags): CalculatedValueRule;
                    /**
                     * Adds a top N rule to the end of the collection.
                     * @param value A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}, that has to evaluate to an integer.
                     * @param color The color.
                     * @param fontStyleFlags The font style.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddTopNRule(value: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), fontStyleFlags: Framework.Styles.FontStyleFlags): CalculatedValueRule;
                    /**
                     * Clears this collection, removing all rules.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Determines whether the collection contains a specified rule.
                     * @param rule The rule to locate in the collection.
                     * @returns True if the collection contains the specified rule; otherwise, false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Contains(rule: CalculatedValueRule): JsType<System.Boolean>;
                    /**
                     * Returns an enumerator that iterates through the {@link Spotfire.Dxp.Application.Visuals.Miniatures.CalculatedValueRule}s in this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * @returns An {@link System.Collections.Generic.IEnumerator} for this Coloring.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<CalculatedValueRule>;
                    /**
                     * Determines the index of a specific rule in the collection.
                     * @param rule The rule to locate in the collection.
                     * @returns The index of the rule if found in the list; otherwise, -1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    IndexOf(rule: CalculatedValueRule): JsType<System.Int32>;
                    /**
                     * Moves a rule at the specified index to another location in the collection.
                     * @param fromIndex The zero-based index specifying the location of the item to be moved.
                     * @param toIndex The zero-based index specifying the new location of the item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Removes the specified rule from the collection.
                     * @param rule The rule to remove.
                     * @returns True if the rule was removed; otherwise false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(rule: CalculatedValueRule): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<CalculatedValueRule>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.Miniatures.CalculatedValueRule} at the specified index.
                     * @param index The index.
                     * @returns The {@link Spotfire.Dxp.Application.Visuals.Miniatures.CalculatedValueRule} at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), CalculatedValueRule>;
                    private __type_237265071: null;
                }
                
                /**
                 * Represents a tabular visualization with miniature visualizations in its cells.
                 * The table supports a categorical row axis and the columns are specified by a sequence of miniature
                 * visualization, each with a row axis that is kept in sync with that of the GraphicalTable.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GraphicalTable extends Visualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the additional height in pixels that will be added to the font height
                     * to determine the height of a value row.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get AdditionalValueRowHeight(): JsType<System.Int32>;
                    set AdditionalValueRowHeight(value: JsType<System.Int32>);
                    /**
                     * Gets or sets the number of lines of text in the column header.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ColumnHeaderLineCount(): JsType<System.Int32>;
                    set ColumnHeaderLineCount(value: JsType<System.Int32>);
                    /**
                     * Gets the columns in this table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Columns(): GraphicalTableColumnCollection;
                    /**
                     * Gets or sets the width in pixels used by the header column. This is the leftmost column displayed in the table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get HeaderColumnWidth(): JsType<System.Int32>;
                    set HeaderColumnWidth(value: JsType<System.Int32>);
                    /**
                     * Gets or sets a value indicating whether to indicate that rows hidden as a result of the
                     * setting of the {@link Spotfire.Dxp.Application.Visuals.Miniatures.GraphicalTable.ShowTopNRows} and {@link Spotfire.Dxp.Application.Visuals.Miniatures.GraphicalTable.TopNRowCount} properties.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IndicateHiddenRows(): JsType<System.Boolean>;
                    set IndicateHiddenRows(value: JsType<System.Boolean>);
                    /**
                     * Gets the row axis used by this table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get RowAxis(): CategoricalAxis;
                    /**
                     * Gets or sets a value indicating whether the table cell borders are displayed or not.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowCellBorders(): JsType<System.Boolean>;
                    set ShowCellBorders(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether the header of the header column shall be shown.
                     * This is the text displayed in the upper left corner of the table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowHeaderColumnHeader(): JsType<System.Boolean>;
                    set ShowHeaderColumnHeader(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether the header row shall be shown. This is the topmost row in the table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowHeaderRow(): JsType<System.Boolean>;
                    set ShowHeaderRow(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether the row axis selector shall be shown.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowRowAxisSelector(): JsType<System.Boolean>;
                    set ShowRowAxisSelector(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether only the first N values shall be shown,
                     * were N is given by {@link Spotfire.Dxp.Application.Visuals.Miniatures.GraphicalTable.TopNRowCount}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowTopNRows(): JsType<System.Boolean>;
                    set ShowTopNRows(value: JsType<System.Boolean>);
                    /**
                     * Gets sort info for the columns in this table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SortInfos(): GraphicalTableColumnSortInfoCollection;
                    /**
                     * Gets or sets the font used for all header cell texts.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TableHeaderFontMetadata(): Framework.Styles.FontMetadata;
                    set TableHeaderFontMetadata(value: Framework.Styles.FontMetadata);
                    /**
                     * Gets or sets the font used for all section header cell texts.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TableSectionHeaderFontMetadata(): Framework.Styles.FontMetadata;
                    set TableSectionHeaderFontMetadata(value: Framework.Styles.FontMetadata);
                    /**
                     * Gets or sets how many rows that shall be shown. This value is only
                     * used when {@link Spotfire.Dxp.Application.Visuals.Miniatures.GraphicalTable.ShowTopNRows} is set to true.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TopNRowCount(): JsType<System.Int32>;
                    set TopNRowCount(value: JsType<System.Int32>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1139797345: null;
                }
                
                /**
                 * Represents a column in a visualization grid.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GraphicalTableColumn extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether to show the title (header) of this column.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowTitle(): JsType<System.Boolean>;
                    set ShowTitle(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the title (header) of this column.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Title(): JsType<System.String>;
                    set Title(value: JsType<System.String>);
                    /**
                     * Gets the miniature visualization held by this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Visualization(): MiniatureVisualization;
                    /**
                     * Gets or sets the width in pixels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Width(): JsType<System.Int32>;
                    set Width(value: JsType<System.Int32>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3226490143: null;
                }
                
                /**
                 * Represents the text area control for a dynamically computed value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GraphicalTableColumnCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<GraphicalTableColumn>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the number of columns contained in this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<GraphicalTableColumn>;
                    /**
                     * Duplicates a graphical table column and adds it to the collection.
                     * @param column The column to be duplicated.
                     * @returns The duplicated column.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddDuplicate(column: GraphicalTableColumn): GraphicalTableColumn;
                    /**
                     * Adds a new column with a miniature visualization of the specified type.
                     * @param miniatureVisualization The miniature visualization that was created.
                     * @returns The new graphical table column.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     * @param typeT - @@Generic type argument
                     */
                    AddNew<T extends MiniatureVisualization>(typeT: TypeRefParam<T>, miniatureVisualization: OutParam<T>): GraphicalTableColumn;
                    /**
                     * Removes all items from this instance.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Gets the column containing the specified miniature visualization.
                     * @param miniatureVisualization The miniature visualization owned by the requested column.
                     * @returns The column containing the specified miniature visualization, or null if there is no such column.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetColumn(miniatureVisualization: MiniatureVisualization): GraphicalTableColumn;
                    /**
                     * Returns an enumerator that iterates through the collection.
                     * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<GraphicalTableColumn>;
                    /**
                     * Determines the index of a specific item.
                     * @param item The object to locate.
                     * @returns The index of item if found; otherwise, -1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    IndexOf(item: GraphicalTableColumn): JsType<System.Int32>;
                    /**
                     * Moves the item at the specified index to a new location in the collection.
                     * @param fromIndex The zero-based index specifying the location of the item to be moved.
                     * @param toIndex The zero-based index specifying the new location of the item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Removes the first occurrence of the specified column from this instance.
                     * @param item The column to remove.
                     * @returns true if item was removed;
                     * otherwise, false. This method also returns false if item is not found.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(item: GraphicalTableColumn): JsType<System.Boolean>;
                    /**
                     * Removes the item at the specified index.
                     * @param index The zero-based index of the item to remove.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<GraphicalTableColumn>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the column at the specified index.
                     * @param index The zero-based index of the column to get.
                     * @returns The column at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), GraphicalTableColumn>;
                    private __type_1046027881: null;
                }
                
                /**
                 * Represents a sorted column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GraphicalTableColumnSortInfo extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the column that is sorted.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ColumnReference(): GraphicalTableColumn;
                    /**
                     * Gets or sets mode to sort by.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SortMode(): TablePlotColumnSortMode;
                    set SortMode(value: TablePlotColumnSortMode);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_823588667: null;
                }
                
                /**
                 * Represents a list of columns to sort by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GraphicalTableColumnSortInfoCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<GraphicalTableColumnSortInfo>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<GraphicalTableColumnSortInfo>;
                    /**
                     * Adds sorting by the specified column. Does nothing if the specified column is already sorted by.
                     * @param column The column to sort by.
                     * @returns The information object for the sorted column, or null if the visualization in the column does not support sorting.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Add(column: GraphicalTableColumn): GraphicalTableColumnSortInfo;
                    /**
                     * Removes all elements from this collection. This turns off sorting.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Returns an enumerator that iterates through the collection.
                     * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<GraphicalTableColumnSortInfo>;
                    /**
                     * Removes the specified sort info from this collection.
                     * @param sortInfo The sort info to remove.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(sortInfo: GraphicalTableColumnSortInfo): void;
                    /**
                     * Tries to get the sort info for the specified column.
                     * @param column The column.
                     * @param sortInfo The sort info.
                     * @returns True if found; false otherwise.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    TryGetSortInfo(column: GraphicalTableColumn, sortInfo: OutParam<GraphicalTableColumnSortInfo>): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<GraphicalTableColumnSortInfo>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    private __type_3492122545: null;
                }
                
                /**
                 * Axis used to define symbols within a visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class IconAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * The rules that determine the icon that will be rendered.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Rules(): IconRuleCollection;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_4059227436: null;
                }
                
                /**
                 * A miniature visualization that can render icons.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class IconMiniatureVisualization extends MiniatureVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the details object that controls how tooltips are displayed in this plot.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Details(): IconMiniatureVisualizationDetails;
                    /**
                     * Gets the Icon Axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IconAxis(): IconAxis;
                    /**
                     * Gets or sets the size of the icons. Allowed values are 0-100.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IconSize(): JsType<System.Single>;
                    set IconSize(value: JsType<System.Single>);
                    /**
                     * Gets or sets the horizontal alignment.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TextAlignment(): Framework.Styles.TextAlign;
                    set TextAlignment(value: Framework.Styles.TextAlign);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1681500237: null;
                }
                
                /**
                 * Representation of detail information for a {@link Spotfire.Dxp.Application.Visuals.Miniatures.IconMiniatureVisualization}.
                 * The information contained in this class is displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class IconMiniatureVisualizationDetails extends MiniatureVisualizationDetails implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the detail item associated with the Icon axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Icon(): NamedDetailItem;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3680400303: null;
                }
                
                /**
                 * IconRule is a base class for rules that use a boolean condition to determine color and shape.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class IconRule extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the color for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Color(): JsType<System.Drawing.Color>;
                    set Color(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the display name. If set to null, the ColorRule will be represented with an auto-generated name.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ManualDisplayName(): JsType<System.String>;
                    set ManualDisplayName(value: JsType<System.String>);
                    /**
                     * Gets the rule condition.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get RuleCondition(): RuleCondition;
                    /**
                     * Gets or sets the marker shape for this rule.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Shape(): MarkerShape;
                    set Shape(value: MarkerShape);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2116709729: null;
                }
                
                /**
                 * Represents the set of rules in a {@link Spotfire.Dxp.Application.Visuals.Miniatures.IconMiniatureVisualization} that are used to determine
                 * the icon that is rendered.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class IconRuleCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<IconRule>>, Explicit<System.Collections.IEnumerable> {
                    /**
                     * Gets the count.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Count(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<IconRule>;
                    /**
                     * Adds a bottom N rule to the end of the collection.
                     * @param rank An integer specifying the rank of the added rule.
                     * @param color The color of the icon rendered if the rule matches.
                     * @param shape The shape of the icon rendered if the rule matches.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddBottomNRule(rank: (JsType<System.Int32> | System.Int32), color: (JsType<System.Drawing.Color> | System.Drawing.Color), shape: MarkerShape): IconRule;
                    /**
                     * Adds a bottom N rule to the end of the collection.
                     * @param value A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}, that has to evaluate to an integer.
                     * @param color The color.
                     * @param shape The shape.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddBottomNRule(value: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), shape: MarkerShape): IconRule;
                    /**
                     * Adds a new expression rule to the end of the collection.
                     * @param booleanExpression The boolean expression.
                     * @param color The color of the icon rendered if the rule matches.
                     * @param shape The shape of the icon rendered if the rule matches.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddExpressionRule(booleanExpression: (JsType<System.String> | System.String), color: (JsType<System.Drawing.Color> | System.Drawing.Color), shape: MarkerShape): IconRule;
                    /**
                     * Adds a range rule to the end of the collection.
                     * @param startValue The start value.
                     * @param endValue The end value.
                     * @param color The color of the icon rendered if the rule matches.
                     * @param shape The shape of the icon rendered if the rule matches.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddRangeRule(startValue: ConditionalColoring.ConditionValue, endValue: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), shape: MarkerShape): IconRule;
                    /**
                     * Adds a string color rule to the end of the collection.
                     * @param comparisonOperator The comparison operator.
                     * @param value The value.
                     * @param color The color of the icon rendered if the rule matches.
                     * @param shape The shape of the icon rendered if the rule matches.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddStringRule(comparisonOperator: ConditionalColoring.StringComparisonOperator, value: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), shape: MarkerShape): IconRule;
                    /**
                     * Adds a threshold color rule to the end of the collection.
                     * @param comparisonOperator The comparison operator.
                     * @param value The threshold value.
                     * @param color The color of the icon rendered if the rule matches.
                     * @param shape The shape of the icon rendered if the rule matches.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddThresholdRule(comparisonOperator: ConditionalColoring.RuleComparisonOperator, value: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), shape: MarkerShape): IconRule;
                    /**
                     * Adds a top N rule to the end of the collection.
                     * @param rank An integer specifying the rank of the added rule.
                     * @param color The color of the icon rendered if the rule matches.
                     * @param shape The shape of the icon rendered if the rule matches.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddTopNRule(rank: (JsType<System.Int32> | System.Int32), color: (JsType<System.Drawing.Color> | System.Drawing.Color), shape: MarkerShape): IconRule;
                    /**
                     * Adds a top N rule to the end of the collection.
                     * @param value A {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.ConditionValue}, that has to evaluate to an integer.
                     * @param color The color of the icon rendered if the rule matches.
                     * @param shape The shape of the icon rendered if the rule matches.
                     * @returns The rule that was added.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    AddTopNRule(value: ConditionalColoring.ConditionValue, color: (JsType<System.Drawing.Color> | System.Drawing.Color), shape: MarkerShape): IconRule;
                    /**
                     * Clears this collection, removing all rules.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Clear(): void;
                    /**
                     * Determines whether the collection contains a specified rule.
                     * @param rule The rule to locate in the collection.
                     * @returns True if the collection contains the specified rule; otherwise, false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Contains(rule: IconRule): JsType<System.Boolean>;
                    /**
                     * Returns an enumerator that iterates through the {@link Spotfire.Dxp.Application.Visuals.Miniatures.IconRule}s in this {@link Spotfire.Dxp.Application.Visuals.ConditionalColoring.Coloring}.
                     * @returns An {@link System.Collections.Generic.IEnumerator} for this Coloring.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    GetEnumerator(): System.Collections.Generic.IEnumerator<IconRule>;
                    /**
                     * Determines the index of a specific rule in the collection.
                     * @param rule The rule to locate in the collection.
                     * @returns The index of the rule if found in the list; otherwise, -1.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    IndexOf(rule: IconRule): JsType<System.Int32>;
                    /**
                     * Moves a rule at the specified index to another location in the collection.
                     * @param fromIndex The zero-based index specifying the location of the item to be moved.
                     * @param toIndex The zero-based index specifying the new location of the item.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                    /**
                     * Removes the specified rule from the collection.
                     * @param rule The rule to remove.
                     * @returns True if the rule was removed; otherwise false.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Remove(rule: IconRule): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<IconRule>>,
                        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    };
                    /**
                     * Gets the {@link Spotfire.Dxp.Application.Visuals.Miniatures.IconRule} at the specified index.
                     * @param index The index.
                     * @returns The {@link Spotfire.Dxp.Application.Visuals.Miniatures.IconRule} at the specified index.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), IconRule>;
                    private __type_1097626251: null;
                }
                
                /**
                 * A miniature visualization that can be embedded in a GraphicalTable.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MiniatureVisualization extends Visualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets a value indicating whether filtering behavior is inherited from the owner of this visualization.
                     * It is only used in the case where the owner has filtering settings, i.e. when the owner os a graphical table.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get InheritFiltering(): JsType<System.Boolean>;
                    set InheritFiltering(value: JsType<System.Boolean>);
                    /**
                     * Gets a value indicating whether this miniature visualization supports sorting.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get SupportsSorting(): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1895486716: null;
                }
                
                /**
                 * Holds context information for an action invoked on a miniature visualization.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MiniatureVisualizationActionContext extends Object {
                    /**
                     * Gets the path of values identifying the leaf in a hierarchy for which an action is invoked.
                     * May be null or empty.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get HierarchyPathValues(): System.Collections.Generic.IList<JsType<System.Object>>;
                    /**
                     * Gets the value of the miniature visualization cell for which an action is invoked.
                     * May be null.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Value(): unknown;
                    /**
                     * Gets the  miniature visualization for which an action is invoked.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Visualization(): MiniatureVisualization;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_461792655: null;
                }
                
                /**
                 * Representation of bar detail information for a {@link Spotfire.Dxp.Application.Visuals.Miniatures.MiniatureVisualization}.
                 * The information contained in this class is displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class MiniatureVisualizationDetails extends Details implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the detail item associated with the action.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Action(): NamedDetailItem;
                    /**
                     * Gets the detail item associated with the Row-axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Rows(): NamedDetailItem;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3692033226: null;
                }
                
                /**
                 * A miniature visualization that can render sparklines.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class SparklineMiniatureVisualization extends MiniatureVisualization implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the details object that controls how tooltips are displayed in this plot.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Details(): SparklineMiniatureVisualizationDetails;
                    /**
                     * Gets or sets the color of the sparkline line.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LineColor(): JsType<System.Drawing.Color>;
                    set LineColor(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the width of the sparkline line, in pixels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LineWidth(): JsType<System.Int32>;
                    set LineWidth(value: JsType<System.Int32>);
                    /**
                     * Gets or sets a value indicating whether the start value of the sparkline shall be shown.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowStartValue(): JsType<System.Boolean>;
                    set ShowStartValue(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets a value indicating whether the last value of the sparkline shall be shown.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShowStopValue(): JsType<System.Boolean>;
                    set ShowStopValue(value: JsType<System.Boolean>);
                    /**
                     * Gets or sets the width of a value column in pixels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ValueColumnWidth(): JsType<System.Int32>;
                    set ValueColumnWidth(value: JsType<System.Int32>);
                    /**
                     * Gets the X Axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get XAxis(): SparklineXAxis;
                    /**
                     * Gets the Y Axis.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get YAxis(): SparklineYAxis;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2617355927: null;
                }
                
                /**
                 * Representation of detail information for a {@link Spotfire.Dxp.Application.Visuals.Miniatures.SparklineMiniatureVisualization}.
                 * The information contained in this class is displayed in tooltips.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class SparklineMiniatureVisualizationDetails extends MiniatureVisualizationDetails implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1333541981: null;
                }
                
                /**
                 * The X axis of a sparkline.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class SparklineXAxis extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2135227780: null;
                }
                
                /**
                 * The Y axis of a sparkline.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class SparklineYAxis extends SparklineYAxisBase implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3216956959: null;
                }
                
                /**
                 * The Y axis of a sparkline.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class SparklineYAxisBase extends Axis implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the formatting.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Formatting(): Formatting;
                    /**
                     * Gets or sets a value indicating whether individual scaling is enabled.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get IndividualScaling(): JsType<System.Boolean>;
                    set IndividualScaling(value: JsType<System.Boolean>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1565114010: null;
                }
            }
            
            namespace ScaleAxisBase {
                /**
                 * CategoricalScaleAxis class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class CategoricalScaleAxis extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1507285744: null;
                }
                
                /**
                 * ContinuousScaleAxis class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ContinuousScaleAxis extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3268289031: null;
                }
            }
            
            namespace TablePlotBase {
                /**
                 * Represents the style the border of cells will be drawn in.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class BorderStyle extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** No border at all will be drawn */
                    static readonly None: BorderStyle;
                    /** Standard solid thin border around entire cell. */
                    static readonly Solid: BorderStyle;
                    private __type_3401975334: null;
                }
            }
            
            namespace ValueRenderers {
                /**
                 * Renderer settings for the {@link Spotfire.Dxp.Application.Visuals.ValueRenderers.GeometryRenderer}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class GeometryRendererSettings extends ValueRendererSettings implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the color to use when drawing the border.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get BorderColor(): JsType<System.Drawing.Color>;
                    set BorderColor(value: JsType<System.Drawing.Color>);
                    /**
                     * Gets or sets the border width.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get BorderWidth(): JsType<System.Int32>;
                    set BorderWidth(value: JsType<System.Int32>);
                    /**
                     * Gets or sets the color to use when drawing the shape.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ShapeColor(): JsType<System.Drawing.Color>;
                    set ShapeColor(value: JsType<System.Drawing.Color>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3341917784: null;
                }
                
                /**
                 * Renderer settings for the {@link Spotfire.Dxp.Application.Visuals.ValueRenderers.ImageFromUrlRenderer}. This renderer fetches images from a URL and renders them.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ImageFromUrlRendererSettings extends ValueRendererSettings implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the Url template.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get UrlTemplate(): JsType<System.String>;
                    set UrlTemplate(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2261920514: null;
                }
                
                /**
                 * Renderer settings for the link value renderer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class LinkValueRendererSettings extends ValueRendererSettings implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets or sets the link template.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get LinkTemplate(): JsType<System.String>;
                    set LinkTemplate(value: JsType<System.String>);
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_2014861113: null;
                }
                
                /**
                 * A class responsible for rendering data values in columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ValueRenderer extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Implements {@link System.IDisposable}.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    Dispose(): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_1190790572: null;
                }
                
                /**
                 * Renderer settings used by a {@link Spotfire.Dxp.Application.Visuals.ValueRenderers.ValueRenderer} when rendering a data value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ValueRendererArgs extends Object {
                    /**
                     * Gets the data value.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataValue(): Data.DataValue;
                    /**
                     * Gets the properties of the data value.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get DataValueProperties(): Data.DataValueProperties;
                    /**
                     * Gets the formatted data value.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get FormattedValue(): JsType<System.String>;
                    /**
                     * Gets the height in pixels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Height(): JsType<System.Int32>;
                    /**
                     * Gets the size factor between logical and physical pixels. The Width, Height and Size properties of this class are all in logical pixels.
                     * If the result is a bitmap, the Width and Height propertes should be multiplied by PixelRatio to provide an image with suitable resolution.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get PixelRatio(): JsType<System.Single>;
                    /**
                     * Gets the size in pixels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Size(): JsType<System.Drawing.Size>;
                    /**
                     * Gets the width in pixels.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get Width(): JsType<System.Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Determines whether the specified object is equal to the current object.
                     * @param obj The object to compare with the current object.
                     * @returns true if the specified object  is equal to the current object; otherwise, false.
                     */
                    Equals(obj: any): JsType<System.Boolean>;
                    /**
                     * Indicates whether the current object is equal to another object of the same type.
                     * @param other An object to compare with this object.
                     * @returns true if the current object is equal to the other parameter; otherwise, false.
                     */
                    Equals(other: ValueRendererArgs): JsType<System.Boolean>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_3832090251: null;
                }
                
                /**
                 * A class representing the result from a {@link Spotfire.Dxp.Application.Visuals.ValueRenderers.ValueRenderer}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ValueRendererResult extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Sets the tool tip.
                     * @param tooltip The tool tip.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetTooltip(tooltip: (JsType<System.String> | System.String)): void;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_2543014169: null;
                }
                
                /**
                 * An abstract class for a model to be used by a {@link Spotfire.Dxp.Application.Visuals.ValueRenderers.ValueRenderer}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ValueRendererSettings extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the type identifier of the renderer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get TypeId(): Framework.DocumentModel.TypeIdentifier;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_1418924461: null;
                }
                
                /**
                 * Defines the type identifiers for built-in value renderers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ValueRendererTypeIdentifiers extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Type identifier for the built-in Bitmap renderer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly BitmapRenderer: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * Type identifier for the built-in default renderer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly DefaultRenderer: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * Type identifier for the built-in geometry renderer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly GeometryRenderer: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * Type identifier for the built-in image from url renderer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly ImageFromUrlRenderer: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * Type identifier for the built-in Link renderer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly LinkRenderer: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * Type identifier for the built-in virtual value renderer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    static readonly VirtualValueRenderer: Framework.DocumentModel.TypeIdentifier;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_3577557364: null;
                }
                
                /**
                 * VirtualValueRenderer is a composite renderer, that uses a virtual column producer to get data and then render it using another renderer.
                 * {@link Spotfire.Dxp.Application.Visuals.ValueRenderers.ValueRendererTypeIdentifiers.VirtualValueRenderer} can be used
                 * for labels in map chart and scatter plot, and in {@link Spotfire.Dxp.Application.Visuals.ExpressionDetailItem}. VirtualValueRenderer can not be used in table plot.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class VirtualValueRendererSettings extends ValueRendererSettings implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                    /**
                     * Gets the renderer settings.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get ValueRenderer(): ValueRendererSettings;
                    /**
                     * Gets the VirtualColumnProducer.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    get VirtualColumnProducer(): Data.VirtualColumns.VirtualColumnProducer;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * Sets the label renderer.
                     * @param typeId The type id of the ValueRenderer to use.
                     * @returns The label renderer settings associated with the type id.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetValueRenderer(typeId: Framework.DocumentModel.TypeIdentifier): ValueRendererSettings;
                    /**
                     * Sets the virtual column producer.
                     * @param typeId The type id.
                     * @returns The virtual column producer associated with the type id.
                     * 
                     * @since 2.0
                     * 
                     * @group Default capability
                     */
                    SetVirtualColumnProducer(typeId: Framework.DocumentModel.TypeIdentifier): Data.VirtualColumns.VirtualColumnProducer;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_IServiceProvider: Implementation<System.IServiceProvider>,
                        Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                        Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    };
                    private __type_3138265260: null;
                }
            }
            
            /**
             * @@Type reference for casting to class {@link Spotfire.Dxp.Application.Visuals.IndexedFormatter}.
             * @param typeT - @@Generic type argument
             */
            function IndexedFormatter<T extends Data.Formatters.DataFormatterBase>(typeT: TypeRefParam<T>): TypeRef<IndexedFormatter<T>>;
        }
    }
    
    namespace Data {
        /**
         * This is the interface for reading data from a column.
         * You should not implement this interface. Use the {@link Spotfire.Dxp.Data.Columns.ColumnBuilder}
         * class to create columns.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        interface IDataColumn extends IInterfaceBase {
            /**
             * Gets the hierarchy of the column, this is either the hierarchy
             * in the case of a hierarchy column or the indexed column for other
             * columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Hierarchy(): DataHierarchy;
            /**
             * Gets the properties (metadata) of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Properties(): DataColumnProperties;
            /**
             * Gets the row values for the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RowValues(): DataValueCollection;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                Spotfire_Dxp_Data_IDataColumn: Implementation<IDataColumn>,
            };
        }
        
        /**
         * This is the interface for creating data nodes.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        interface IDataNodeProducer extends IInterfaceBase {
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                Spotfire_Dxp_Data_IDataNodeProducer: Implementation<IDataNodeProducer>,
            };
        }
        
        /**
         * This class describes the settings used when performing the {@link Spotfire.Dxp.Data.DataTable.AddColumns|AddColumns(dataSource, settings)} operation on a
         * {@link Spotfire.Dxp.Data.DataTable}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class AddColumnsSettings extends Object {
            /**
             * Gets the signatures for the columns in the added data that should be ignored, i.e. not part of the resulting columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IgnoredColumns(): System.Collections.Generic.IReadOnlyList<DataColumnSignature>;
            /**
             * Gets the type of join to perform.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get JoinType(): JoinType;
            /**
             * Gets the join condition between columns in the original data (keys) and columns in the added data (values).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Map(): System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>;
            /**
             * Gets a value indicating whether empty values should be treated as equal when performing the join.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TreatEmptyValuesAsEqual(): JsType<System.Boolean>;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddColumnsSettings} class.
             * Settings for adding columns to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddColumns|AddColumns(dataSource, settings)} method.
             * @param map A map defining the join condition columns from the original data to columns in the added data.
             * @param joinType The type of join to perform.
             * @param ignoredColumns Columns from the added data that are not included in the
             * mapping and should be ignored, i.e. not part of the resulting columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(map: OrExplicit<System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>>, joinType: JoinType, ignoredColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddColumnsSettings} class.
             * Settings for adding columns to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddColumns|AddColumns(dataSource, settings)} method. This method performs an
             * automatic match.
             * @param table The data table to add the columns to.
             * @param dataSource The data source to retrieve the new
             * columns from.
             * @param joinType The type of join to perform.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(table: DataTable, dataSource: DataSource, joinType: JoinType);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddColumnsSettings} class.
             * Settings for adding columns to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddColumns|AddColumns(dataSource, settings)} method.
             * @param map A map defining the join condition columns from the original data to columns
             * in the added data.
             * @param joinType The type of join to perform.
             * @param ignoredColumns Columns from the added data that are not included in the
             * mapping and should be ignored, i.e. not part of the resulting columns.
             * @param treatEmptyValuesAsEqual true if empty values should be treated as equal when performing the join.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(map: OrExplicit<System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>>, joinType: JoinType, ignoredColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>, treatEmptyValuesAsEqual: (JsType<System.Boolean> | System.Boolean));
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddColumnsSettings} class.
             * Settings for adding columns to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddColumns|AddColumns(dataSource, settings)} method. This method performs an
             * automatic match.
             * @param table The data table to add the columns to.
             * @param dataSource The data source to retrieve the new
             * columns from.
             * @param joinType The type of join to perform.
             * @param treatEmptyValuesAsEqual true if empty values should be treated as equal when performing the join.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(table: DataTable, dataSource: DataSource, joinType: JoinType, treatEmptyValuesAsEqual: (JsType<System.Boolean> | System.Boolean));
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddColumnsSettings} instance, with new {@link Spotfire.Dxp.Data.AddColumnsSettings.IgnoredColumns}.
             * @param ignoredColumns A list of columns in the added data that should not be included in the result.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddColumnsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithIgnoredColumns(ignoredColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>): AddColumnsSettings;
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddColumnsSettings} instance, with a new {@link Spotfire.Dxp.Data.AddColumnsSettings.JoinType}.
             * @param joinType The type of join to perform.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddColumnsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithJoinType(joinType: JoinType): AddColumnsSettings;
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddColumnsSettings} instance, with a new {@link Spotfire.Dxp.Data.AddColumnsSettings.Map}.
             * @param map A map matching columns from the original data to columns in the added data.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddColumnsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithMap(map: OrExplicit<System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>>): AddColumnsSettings;
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddColumnsSettings} instance, with a new {@link Spotfire.Dxp.Data.AddColumnsSettings.TreatEmptyValuesAsEqual} setting.
             * @param treatEmptyValuesAsEqual True if empty values should be treated as equal when performing the join.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddColumnsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithTreatEmptyValuesAsEqual(treatEmptyValuesAsEqual: (JsType<System.Boolean> | System.Boolean)): AddColumnsSettings;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2217623043: null;
        }
        
        /**
         * This class describes the settings used when performing the {@link Spotfire.Dxp.Data.DataTable.AddRows|AddRows(dataSource, settings)} operation on a
         * {@link Spotfire.Dxp.Data.DataTable}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class AddRowsSettings extends Object {
            /**
             * Gets a value indicating whether a new origin column (containing the identifier values) should be created to identify the original and added rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CreateNewSourceColumn(): JsType<System.Boolean>;
            /**
             * Gets the signatures for the columns in the added data that should not be included in the result.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IgnoredColumns(): System.Collections.Generic.IReadOnlyList<DataColumnSignature>;
            /**
             * Gets the mapping between columns in the original data (keys) and columns in the added data (values).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Map(): System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>;
            /**
             * Gets the value (if any) to use to identify the added rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NewRowSourceValue(): JsType<System.String>;
            /**
             * Gets the value (if any) to use to identify the original rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get OriginalRowSourceValue(): JsType<System.String>;
            /**
             * Gets the name (if any) of the origin column that should be created or used to identify the original and added rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RowSourceColumnName(): JsType<System.String>;
            /**
             * Gets a value indicating whether an existing origin column (containing the identifier values) should be used to identify the original and added rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get UseExistingSourceColumn(): JsType<System.Boolean>;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddRowsSettings} class.
             * Settings for adding rows to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddRows|AddRows(dataSource, settings)} method.
             * @param map A map matching columns from the original table to columns
             * in the data source.
             * @param ignoredColumns Columns not included in the mapping or
             * the additional columns from the data source that should be ignored.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(map: OrExplicit<System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>>, ignoredColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddRowsSettings} class.
             * Settings for adding rows to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddRows|AddRows(dataSource, settings)} method. This Constructor performs
             * an automatic match, no columns are ignored.
             * @param table The table to add the rows to.
             * @param dataSource The data source to retrieve the
             * new rows from.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(table: DataTable, dataSource: DataSource);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddRowsSettings} class.
             * Settings for adding rows to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddRows|AddRows(dataSource, settings)} method.
             * @param map A map matching columns from the original table to columns
             * in the data source.
             * @param ignoredColumns Columns not included in the mapping or
             * the additional columns from the data source that should be ignored.
             * @param rowSourceColumn The column in the table that
             * should be used to indicate the source of the row. This column must
             * be of the String DataType and not be mapped.
             * @param newRowSourceValue The value that new elements in the
             * row source column should get.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(map: OrExplicit<System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>>, ignoredColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>, rowSourceColumn: (JsType<System.String> | System.String), newRowSourceValue: (JsType<System.String> | System.String));
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddRowsSettings} class.
             * Settings for adding rows to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddRows|AddRows(dataSource, settings)} method. This Constructor performs
             * an automatic match, no columns are ignored.
             * @param table The table to add the rows to.
             * @param dataSource The data source to retrieve the
             * new rows from.
             * @param rowSourceColumn The column in the table that
             * should be used to indicate the source of the row. This column must
             * be of the String DataType and not be mapped.
             * @param newRowSourceValue The value that new elements in the
             * row source column should get.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(table: DataTable, dataSource: DataSource, rowSourceColumn: (JsType<System.String> | System.String), newRowSourceValue: (JsType<System.String> | System.String));
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddRowsSettings} class.
             * Settings for adding rows to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddRows|AddRows(dataSource, settings)} method.
             * @param map A map matching columns from the original table to columns
             * in the data source.
             * @param ignoredColumns Columns not included in the mapping or
             * the additional columns from the data source that should be ignored.
             * @param rowSourceColumn The column in the table that
             * will be created to indicate the source of the rows.
             * @param newRowSourceValue The value that new elements in the
             * row source column should get.
             * @param originalRowSourceValue The value that the existing elements
             * in the row source column should get.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(map: OrExplicit<System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>>, ignoredColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>, rowSourceColumn: (JsType<System.String> | System.String), newRowSourceValue: (JsType<System.String> | System.String), originalRowSourceValue: (JsType<System.String> | System.String));
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.AddRowsSettings} class.
             * Settings for adding rows to a {@link Spotfire.Dxp.Data.DataTable} using
             * the {@link Spotfire.Dxp.Data.DataTable.AddRows|AddRows(dataSource, settings)} method. This Constructor performs
             * an automatic match, no columns are ignored.
             * @param table The table to add the rows to.
             * @param dataSource The data source to retrieve the
             * new rows from.
             * @param rowSourceColumn The column in the table that
             * will be created to indicate the source of the rows.
             * @param newRowSourceValue The value that new elements in the
             * row source column should get.
             * @param originalRowSourceValue The value that the existing elements
             * in the row source column should get.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(table: DataTable, dataSource: DataSource, rowSourceColumn: (JsType<System.String> | System.String), newRowSourceValue: (JsType<System.String> | System.String), originalRowSourceValue: (JsType<System.String> | System.String));
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddRowsSettings} instance, where {@link Spotfire.Dxp.Data.AddRowsSettings.CreateNewSourceColumn} is true.
             * @param rowSourceColumnName The name of the column that will be created to indicate the source of the rows. This column must be of the String DataType.
             * @param newRowSourceValue The value that rows corresponding to added data in the row source column should get.
             * @param originalRowSourceValue The value that rows corresponding to original data in the row source column should get.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddRowsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithCreatedRowSourceColumn(rowSourceColumnName: (JsType<System.String> | System.String), newRowSourceValue: (JsType<System.String> | System.String), originalRowSourceValue: (JsType<System.String> | System.String)): AddRowsSettings;
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddRowsSettings} instance, where {@link Spotfire.Dxp.Data.AddRowsSettings.UseExistingSourceColumn} is true.
             * @param rowSourceColumnName The existing column in the original data that should be used to indicate the source of the rows. This column must
             * be of the String DataType and not be mapped.
             * @param newRowSourceValue The value that rows corresponding to added data in the row source column should get.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddRowsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithExistingRowSourceColumn(rowSourceColumnName: (JsType<System.String> | System.String), newRowSourceValue: (JsType<System.String> | System.String)): AddRowsSettings;
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddRowsSettings} instance, with new {@link Spotfire.Dxp.Data.AddRowsSettings.IgnoredColumns}.
             * @param ignoredColumns A list of columns in the added data that should not be included in the result.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddRowsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithIgnoredColumns(ignoredColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>): AddRowsSettings;
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddRowsSettings} instance, with a new {@link Spotfire.Dxp.Data.AddRowsSettings.Map}.
             * @param map A map matching columns from the original data to columns in the added data.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddRowsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithMap(map: OrExplicit<System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>>): AddRowsSettings;
            /**
             * Creates a copy of this {@link Spotfire.Dxp.Data.AddRowsSettings} instance, without any {@link Spotfire.Dxp.Data.AddRowsSettings.RowSourceColumnName} where
             * both {@link Spotfire.Dxp.Data.AddRowsSettings.CreateNewSourceColumn} and {@link Spotfire.Dxp.Data.AddRowsSettings.UseExistingSourceColumn} will be false.
             * @returns A new instance of {@link Spotfire.Dxp.Data.AddRowsSettings}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            WithoutRowSourceColumn(): AddRowsSettings;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_219010603: null;
        }
        
        /**
         * Represents a value of datatype {@link Spotfire.Dxp.Data.DataType.Binary}.
         * The inner representation of the data is not accessible directly, instead a {@link Spotfire.Dxp.Data.BinaryLargeObject}
         * is created from a byte stream and the data is retrieved through a byte stream.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class BinaryLargeObject extends Object {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Creates a BinaryLargeObject by reading data from a stream.
             * Starts reading binary data from the current position of the stream and stops at the end of the stream.
             * When done, the position in the stream is at the end of the stream.
             * @param stream The input stream.
             * @returns The newly created BinaryLargeObject.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Create(stream: (JsType<System.IO.Stream> | System.IO.Stream)): BinaryLargeObject;
            /**
             * Compares the bytes in this binary object with the other binary object.
             * @param other The other binary object to compare with.
             * @returns Returns 0 if the binary object are equal.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CompareTo(other: BinaryLargeObject): JsType<System.Int32>;
            /**
             * Disposes this object and frees any resources held by it.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Dispose(): void;
            /**
             * Determines whether the specified object is equal to the current object.
             * @param obj The object to compare with the current object.
             * @returns true if the specified object  is equal to the current object; otherwise, false.
             */
            Equals(obj: any): JsType<System.Boolean>;
            /**
             * Compares the bytes in this binary large object with the other binary large object.
             * @param other The other binary object to compare with.
             * @returns Returns true if the bytes in the objects are equal; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Equals(other: BinaryLargeObject): JsType<System.Boolean>;
            /**
             * Returns a stream from where the byte representation of the object can be retrieved.
             * @returns A new stream.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetByteStream(): JsType<System.IO.Stream>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3448657393: null;
        }
        
        /**
         * An instance of this class can be retrieved from a
         * {@link Spotfire.Dxp.Data.DataColumn} using the {@link Spotfire.Dxp.Data.DataColumn.As} method when the column type
         * of the {@link Spotfire.Dxp.Data.DataColumn} is Calculated. This class is used for
         * modifying the calculated column.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class CalculatedColumn extends Object {
            /**
             * Gets or sets the expression of this calculated column. See the {@link Spotfire.Dxp.Data.Expressions.ColumnExpression} class
             * for utility methods.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Expression(): JsType<System.String>;
            set Expression(value: JsType<System.String>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3599326346: null;
        }
        
        /**
         * Abstract class representing a calculation.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class Calculation extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets a value indicating whether or not this calculation can be calculated. A calculation
             * may for example be invalid when vital dependencies are missing.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsValid(): JsType<System.Boolean>;
            /**
             * Gets the unique name of this calculation instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            /**
             * Gets a value indicating whether or not this calculation needs refreshing (through
             * a call to Execute) to make sure that its results
             * are up-to-date.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NeedsRefresh(): JsType<System.Boolean>;
            /**
             * Gets the type identifier for the {@link Spotfire.Dxp.Data.Calculation}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TypeId(): Framework.DocumentModel.TypeIdentifier;
            /**
             * Gets the {@link Spotfire.Dxp.Data.CalculationUpdateBehavior} of the calculation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get UpdateBehavior(): CalculationUpdateBehavior;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Execute the calculation. If the results exists they will updated - otherwise they will be created.
             * @returns True if the execution was successfully performed;
             * otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Execute(): JsType<System.Boolean>;
            /**
             * Execute the calculation. If the results exists they will updated - otherwise they will be created.
             * @param promptMode Determines if the calculation tries to prompt the user for settings. For prompting to be successful
             * a view needs to have been registered in the {@link Spotfire.Dxp.Framework.ApplicationModel.ViewRegistry} together with the implementation of CalculationSettings.
             * If CalculationExecutionPromptMode.Never is used the CalculationSettings needs to have been set up so that the
             * calculation can run.
             * @returns True if the execution was successfully performed;
             * otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Execute(promptMode: CalculationExecutionPromptMode): JsType<System.Boolean>;
            /**
             * Set the unique (within the CalculationCollection) name of
             * this {@link Spotfire.Dxp.Data.Calculation} instance.
             * @param suggestedName The name suggestion
             * @returns If suggestedName is unique it is used and returned, otherwise it is first made unique by adding (2), (3) etc.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            SetName(suggestedName: (JsType<System.String> | System.String)): JsType<System.String>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_3875660035: null;
        }
        
        /**
         * Specifies prompt modes for calculation executions.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class CalculationExecutionPromptMode extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** A user interface is always shown, if available. */
            static readonly Always: CalculationExecutionPromptMode;
            /** Prompting is not allowed. */
            static readonly Never: CalculationExecutionPromptMode;
            private __type_1761627316: null;
        }
        
        /**
         * Specifies the update behavior for calculations.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class CalculationUpdateBehavior extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Specifies that a calculation should be automatically recalculated
             * when changes occur.
             */
            static readonly Calculate: CalculationUpdateBehavior;
            /**
             * Specifies that a calculation should be invalidated when changes
             * occur, that is, not automatically recalculated.
             */
            static readonly Invalidate: CalculationUpdateBehavior;
            private __type_3095557430: null;
        }
        
        /**
         * This class describes an equality relation between two columns in different tables.
         * A relation like '[Tbl1].[Column1] = Upper([Tbl2].[Column1])' is defined using two expressions
         * '[Tbl1].[Column1]' and 'Upper([Tbl2].[Column1])'. These expressions are evaluated in the different
         * source tables, so if one of the tables are external then you can use the methods provided by that
         * external data source and if the table is not external then you can use the standard Spotfire expression
         * language functions. Additionally you can also provide left and right transform expressions which are evaluated
         * on top of the left/right expressions supporting all standard Spotfire expression language functions.
         * These expression refer to the result of the corresponding expression using the name {@link Spotfire.Dxp.Data.ColumnRelation.ValueColumnName}.
         * For example you need to perform "Upper" on Tbl2 but the external system doesn't support that method you can define
         * left and right expressions like '[Tbl1].[Column1]' and '[Tbl2].[Column1]' but add additional transform expressions like
         * '[Value]' and 'Upper([Value])'.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class ColumnRelation extends Object {
            /**
             * Gets the name of the value column used for transforming the data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static get ValueColumnName(): JsType<System.String>;
            /**
             * Gets the name of the left table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get LeftTableName(): JsType<System.String>;
            /**
             * Gets the name of the right table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RightTableName(): JsType<System.String>;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.ColumnRelation} class.
             * @param leftExpression The left expression.
             * @param rightExpression The right expression.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(leftExpression: (JsType<System.String> | System.String), rightExpression: (JsType<System.String> | System.String));
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.ColumnRelation} class.
             * @param leftExpression The left expression.
             * @param leftTransform The left transform or null which will use the original value.
             * @param rightExpression The right expression.
             * @param rightTransform The right transform or null which will use the original value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(leftExpression: (JsType<System.String> | System.String), leftTransform: ((JsType<System.String> | System.String) | null), rightExpression: (JsType<System.String> | System.String), rightTransform: ((JsType<System.String> | System.String) | null));
            /**
             * Determines whether the specified object is equal to the current object.
             * @param obj The object to compare with the current object.
             * @returns true if the specified object  is equal to the current object; otherwise, false.
             */
            Equals(obj: any): JsType<System.Boolean>;
            /**
             * Will evaluate if the descriptors are the same.
             * The descriptors are considered equal even if the order of the expressions (left/right) are reversed.
             * @param other The other ColumnRelation to compare with.
             * @returns True if the ColumnRelation are considered equal, otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Equals(other: ColumnRelation): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3246248834: null;
        }
        
        /**
         * A collection of {@link Spotfire.Dxp.Data.ColumnRelation} objects.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class ColumnRelationCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<ColumnRelation>>, Explicit<System.Collections.IEnumerable> {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<ColumnRelation>;
            /**
             * Adds the specified relation to the collection.
             * @param relation The relation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Add(relation: ColumnRelation): void;
            /**
             * Determines whether this collection contains the specified relation.
             * @param relation The relation.
             * @returns true if this collection contains the specified relation; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(relation: ColumnRelation): JsType<System.Boolean>;
            /**
             * Gets the enumerator.
             * @returns The enumerator.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<ColumnRelation>;
            /**
             * Removes the specified relation.
             * @param relation The relation to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(relation: ColumnRelation): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<ColumnRelation>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            private __type_1816243958: null;
        }
        
        /**
         * This is a report on the changes in a {@link Spotfire.Dxp.Data.DataTable} after a large
         * operation such as {@link Spotfire.Dxp.Data.DataTable.ReplaceData|ReplaceData(dataSource)} is performed. It should be used
         * to notify the user of the changes.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class ColumnsChangedResult extends Object {
            /**
             * Gets the names of the added columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get AddedColumns(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets a value indicating whether some columns match, but not all, or not.
             * Column additions do not count as mismatches.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ColumnMismatch(): JsType<System.Boolean>;
            /**
             * Gets the names of the invalidated columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get InvalidatedColumns(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets the names of the invalidated hierarchies.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get InvalidatedHierarchies(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets the old and new names of the renamed columns.
             * A list of string arrays with two elements, the first element is the old name
             * and the second is the new name.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NameChanges(): System.Collections.Generic.IList<JsType<System.String>[]>;
            /**
             * Gets a value indicating whether no columns match or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NoMatchingColumns(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the primary key could not be matched to the new data set or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get PrimaryKeyMismatch(): JsType<System.Boolean>;
            /**
             * Gets the names of the removed columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RemovedColumns(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets the name, old type name, and new type name
             * for all columns that have changed their data type.
             * A list of string arrays with three elements, the first element is the name, the second is the old
             * type name and the third is the new type name.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TypeChanges(): System.Collections.Generic.IList<JsType<System.String>[]>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2938255160: null;
        }
        
        /**
         * @ignore
         * @@Helper class with property accessors to express interface types when casting.
         */
        abstract class Computations {
            /** @@Type reference for casting to {{@link Spotfire.Dxp.Data.Computations.IPublicMethod}. */
            static get IPublicMethod(): TypeRef<Computations.IPublicMethod>;
        }
        
        /**
         * This is a data column which is part of a data table and
         * can be used to retrieve data on row values, hierarchies and properties.
         * The data column implements the {@link Spotfire.Dxp.Data.IDataColumn} which is to
         * be used for non-modification operations on the data column. This class
         * has no public constructors, see the {@link Spotfire.Dxp.Data.DataColumnCollection}
         * class for methods which create data columns.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataColumn extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, IDataColumn {
            /**
             * Gets the data type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataType(): DataType;
            /**
             * Gets the display value settings for this column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DisplayValueSettings(): DisplayValueSettings;
            /**
             * Gets the hierarchy of the column, this is either the hierarchy
             * in the case of a hierarchy column or the indexed column for other
             * columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Hierarchy(): DataHierarchy;
            /**
             * Gets a value indicating whether the column is valid or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsValid(): JsType<System.Boolean>;
            /**
             * Gets or sets the name of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            set Name(value: JsType<System.String>);
            /**
             * Gets the name of the column escaped for usage in an
             * expression. This is a utility method which uses
             * {@link Spotfire.Dxp.Data.Expressions.ExpressionUtilities.EscapeIdentifier|EscapeIdentifier(identifier)}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NameEscapedForExpression(): JsType<System.String>;
            /**
             * Gets the properties (metadata) of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Properties(): DataColumnProperties;
            /**
             * Gets the row values for the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RowValues(): DataValueCollection;
            /**
             * Gets or sets a value indicating whether this column should be visible in the user interface.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Visible(): JsType<System.Boolean>;
            set Visible(value: JsType<System.Boolean>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Gets a representation of the {@link Spotfire.Dxp.Data.DataColumn}
             * for modification of properties that are not part of a standard
             * {@link Spotfire.Dxp.Data.DataColumn}. If this is a calculated column then
             * the {@link Spotfire.Dxp.Data.CalculatedColumn} class can be retrieved from
             * this method. If this is a tags column then the
             * {@link Spotfire.Dxp.Data.TagsColumn} class can be retrieved and if this is
             * a hierarchy column then the {@link Spotfire.Dxp.Data.HierarchyColumn}
             * class can be retrieved. If this is a result column then the
             * {@link Spotfire.Dxp.Data.ResultColumn} class can be retrieved. The classes
             * which can be retrieved will be extended in the future.
             * @returns An object of the requested type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            As<T>(typeT: TypeRefParam<T>): JsType<T>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                Spotfire_Dxp_Data_IDataColumn: Implementation<IDataColumn>,
            };
            private __type_496764230: null;
        }
        
        /**
         * This is a collection of {@link Spotfire.Dxp.Data.DataColumn} columns in a {@link Spotfire.Dxp.Data.DataTable}. This class is used
         * to retrieve columns and to add new columns.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataColumnCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataColumn>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of columns in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<DataColumn>;
            /**
             * Add a new calculated column.
             * @param name The name of the calculated column.
             * @param expression The expression describing how the calculated column should be calculated.
             * @returns The newly created calculated column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddCalculatedColumn(name: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String)): DataColumn;
            /**
             * Add a new hierarchy column.
             * @param name The name of the hierarchy.
             * @param hierarchyDefinition The hierarchy definition.
             * @returns The newly created hierarchy column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddHierarchyColumn(name: (JsType<System.String> | System.String), hierarchyDefinition: HierarchyDefinition): DataColumn;
            /**
             * Add a new tags column.
             * @param name The name of the new tags column.
             * @param tagValues The initial list of tag values. The list
             * cannot contain duplicates and if the empty string is not part of
             * the list it will be added to the end. A string in the tag values
             * collection cannot be longer than 150 characters.
             * @returns The added tags column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddTagsColumn(name: (JsType<System.String> | System.String), tagValues: OrExplicit<System.Collections.Generic.IList<(JsType<System.String> | System.String)>>): DataColumn;
            /**
             * Check if this collection contains a column with the
             * given name.
             * @param name The name of the column.
             * @returns True if a column with the given name exists in the
             * collection, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Create a new unique column name from a suggestion. The
             * suggested name is used if possible.
             * @param columnName The suggested column name.
             * @returns A column name which is unique in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CreateUniqueName(columnName: (JsType<System.String> | System.String)): JsType<System.String>;
            /**
             * Find all columns satisfying the Predicate.
             * @param match The Predicate delegate that defines the conditions of the elements to search for.
             * @returns The columns satisfying the Predicate.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            FindAll(match: System.Predicate<DataColumn>): System.Collections.Generic.IEnumerable<DataColumn>;
            /**
             * Find all columns which matches the given search pattern.
             * For search syntax see Spotfire user manual.
             * @param searchPattern The search pattern.
             * @returns The columns which matches the search pattern.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            FindAll(searchPattern: (JsType<System.String> | System.String)): System.Collections.Generic.IEnumerable<DataColumn>;
            /**
             * Returns an enumerator that iterates through the collection.
             * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataColumn>;
            /**
             * Check if the suggested column name is a valid unique
             * name in the collection.
             * @param columnName The suggested column name.
             * @returns True if the suggested name is a valid name for a new column
             * in the collection, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            IsValidName(columnName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Remove the column from this collection.
             * @param dataColumn The column to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(dataColumn: DataColumn): void;
            /**
             * Remove columns from this collection.
             * @param dataColumns The columns to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(dataColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumn>>): void;
            /**
             * Remove the column with the given name.
             * @param name The name of the column to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(name: (JsType<System.String> | System.String)): void;
            /**
             * Remove the columns with the given names.
             * @param names The names of the columns to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(names: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.String> | System.String)>>): void;
            /**
             * Try to get a column with a given name.
             * @param name The name of the column.
             * @param dataColumn The column will be assigned
             * to this parameter if found.
             * @returns True if the column was found in the collection and
             * assigned to dataColumn parameter, false
             * otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetValue(name: (JsType<System.String> | System.String), dataColumn: OutParam<DataColumn>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataColumn>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Get a column with a given index.
             * @param index The index of the column to retrieve.
             * @returns The column at the given index.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: (PropertyGet<(JsType<System.String> | System.String), DataColumn> & PropertyGet<(JsType<System.Int32> | System.Int32), DataColumn>);
            private __type_1369942202: null;
        }
        
        /**
         * Represents a collection of the properties in a column.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataColumnProperties extends Object {
            /**
             * Gets the derived expression of the column.
             * The calculated expression is the expression text after preprocessing the original expression ({@link Spotfire.Dxp.Data.DataColumnProperties.Expression}).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CalculatedExpression(): JsType<System.String>;
            /**
             * Gets or sets the column type of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ColumnType(): DataColumnType;
            set ColumnType(value: DataColumnType);
            /**
             * Gets or sets the value comparer of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Comparer(): JsType<System.Collections.IComparer>;
            set Comparer(value: JsType<System.Collections.IComparer>);
            /**
             * Gets or sets a more specific type of the data contained in a column of a certain DataType.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ContentType(): JsType<System.String>;
            set ContentType(value: JsType<System.String>);
            /**
             * Gets or sets the data type of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataType(): DataType;
            set DataType(value: DataType);
            /**
             * Gets or sets a textual description of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Description(): JsType<System.String>;
            set Description(value: JsType<System.String>);
            /**
             * Gets the defining expression of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Expression(): JsType<System.String>;
            /**
             * Gets or sets the external identifier of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ExternalId(): JsType<System.String>;
            set ExternalId(value: JsType<System.String>);
            /**
             * Gets or sets the external name of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ExternalName(): JsType<System.String>;
            set ExternalName(value: JsType<System.String>);
            /**
             * Gets or sets the value formatter of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Formatter(): Formatters.IDataFormatter;
            set Formatter(value: Formatters.IDataFormatter);
            /**
             * Gets a value indicating whether the column has valid values:
             * true if the column has valid values; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsValid(): JsType<System.Boolean>;
            /**
             * Gets or sets the name of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            set Name(value: JsType<System.String>);
            /**
             * Gets or sets the preferred aggregation method. If set to the name of an aggregation method, for instance "sum" or "avg",
             * this method is used by plot heuristics when creating aggregated expressions from this column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get PreferredAggregationMethod(): (JsType<System.String> | null);
            set PreferredAggregationMethod(value: (JsType<System.String> | null));
            /**
             * Gets an enumeration of the names of all the properties in the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get PropertyNames(): System.Collections.Generic.IEnumerable<JsType<System.String>>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Gets the value of a named property. Binary data properties are returned as UInt8Array.
             * @param propertyName The property name.
             * @returns The value of the property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Get(propertyName: (JsType<System.String> | System.String)): unknown;
            /**
             * Checks if a property with a given name exists.
             * @param name The name of the property.
             * @returns true if the property exists; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            PropertyExists(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Sets the value of a named property. Setting a binary data property expects the value to be an UInt8Array.
             * @param propertyName The property name.
             * @param value The value to set.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Set(propertyName: (JsType<System.String> | System.String), value: any): void;
            /**
             * Sets a custom sort order. The values in values must be of the same type
             * as the values in the column. Column values not present in values will
             * be sorted last.
             * @param values The values in their custom order.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            SetCustomSortOrder(values: (any[] | OrExplicit<System.Collections.IEnumerable>)): void;
            /**
             * Tries to get the custom sort order of the column, if any.
             * @param values The sort order.
             * @returns True if the column has a custom sort order; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetCustomSortOrder(values: OutParam<OrExplicit<System.Collections.IList>>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1077584265: null;
        }
        
        /**
         * A data column signature is used to identify matching columns in
         * the context of linked data. It contains certain key properties,
         * such as the name, data type, and external id of a previously known column.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataColumnSignature extends Object {
            /**
             * The content type of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ContentType(): JsType<System.String>;
            /**
             * The data type of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataType(): DataType;
            /**
             * The external identifier of the column, may be null. The external ID is typically a GUID
             * that comes from IS.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ExternalIdentifier(): JsType<System.String>;
            /**
             * The external name of the column, may be null. The external name is the name as it was
             * originally named in the data source.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ExternalName(): JsType<System.String>;
            /**
             * The name of the column, may not be null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            /**
             * Creates a column signature for a given column.
             * @param column The column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(column: IDataColumn);
            /**
             * Creates a column signature for a column retrieved from a {@link Spotfire.Dxp.Data.DataRowReader}.
             * @param dataRowReaderColumn The data row reader column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(dataRowReaderColumn: DataRowReaderColumn);
            /**
             * Creates a column signature from a properties collection for a column.
             * @param properties The properties collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(properties: DataColumnProperties);
            /**
             * Creates a column signature from the name and data type of column.
             * @param name The name of the column.
             * @param dataType The data type of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(name: (JsType<System.String> | System.String), dataType: DataType);
            /**
             * Determines whether the specified object is equal to the current object.
             * @param obj The object to compare with the current object.
             * @returns true if the specified object  is equal to the current object; otherwise, false.
             */
            Equals(obj: any): JsType<System.Boolean>;
            /**
             * Compares a signature instance to another for equality.
             * @param other Another column signature instance.
             * @returns True if the signatures are equal; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Equals(other: DataColumnSignature): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1687989276: null;
        }
        
        /**
         * Enum for {@link Spotfire.Dxp.Data.IDataColumn} categories. The {@link Spotfire.Dxp.Data.DataColumnType}
         * for an {@link Spotfire.Dxp.Data.IDataColumn} can be retrieved from the {@link Spotfire.Dxp.Data.DataColumnProperties.ColumnType} property.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataColumnType extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** An {@link Spotfire.Dxp.Data.IDataColumn} created by binning another column. */
            static readonly Binned: DataColumnType;
            /** An {@link Spotfire.Dxp.Data.IDataColumn} defined by a simple expression. */
            static readonly Calculated: DataColumnType;
            /** A frozen calculated or binned {@link Spotfire.Dxp.Data.IDataColumn}. */
            static readonly Frozen: DataColumnType;
            /** A hierarchy {@link Spotfire.Dxp.Data.IDataColumn} defined by the user. */
            static readonly Hierarchy: DataColumnType;
            /** An {@link Spotfire.Dxp.Data.IDataColumn} imported from an external data source. */
            static readonly Imported: DataColumnType;
            /** A mask {@link Spotfire.Dxp.Data.IDataColumn} defined by the user. */
            static readonly Mask: DataColumnType;
            /** No column types. */
            static readonly None: DataColumnType;
            /** A {@link Spotfire.Dxp.Data.IDataColumn} created by application of a tool. */
            static readonly Result: DataColumnType;
            /** An annotation {@link Spotfire.Dxp.Data.IDataColumn} defined by the user. */
            static readonly Tags: DataColumnType;
            private __type_1832919534: null;
        }
        
        /**
         * This is a {@link Spotfire.Dxp.Data.DataSelection} representing a filtering in
         * the {@link Spotfire.Dxp.Data.DataTable}s as a subset of the rows.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataFilteringSelection extends DataSelection implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /** Gets a value indicating whether the selection is read-only or not. */
            get IsReadOnly(): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * When two tables are related the filtering in one table may affect
             * the other table. The setting of propagation of filtering between related tables
             * can be retrieved from this method. Note that this is a property that is set in one
             * direction only, filtering in one table may affect the filtering in another table
             * while the filtering in that table may or may not affect the first table.
             * @param toTable The table to propagate to.
             * @param fromTable The table to propagate from.
             * @returns The relation propagation behavior.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetRelationPropagationBehaviour(toTable: DataTable, fromTable: DataTable): RelatedRowsPropagation;
            /**
             * When two tables are related the filtering in one table may affect
             * the other table. This propagation of filtering between related tables are
             * modified by this method. Note that this is a property that is set in one
             * direction only, filtering in one table may affect the filtering in another table
             * while the filtering in that table may or may not affect the first table.
             * @param toTable The table to propagate to.
             * @param fromTable The table to propagate from.
             * @param relationPropagationBehavior The requested behavior.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            SetRelationPropagationBehavior(toTable: DataTable, fromTable: DataTable, relationPropagationBehavior: RelatedRowsPropagation): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_301673840: null;
        }
        
        /**
         * This a collection of the {@link Spotfire.Dxp.Data.DataFilteringSelection}s. This collection can
         * be retrieved from the {@link Spotfire.Dxp.Data.DataManager}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataFilteringSelectionCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataFilteringSelection>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of filtering selections.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * Gets the default filtering scheme.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DefaultFilteringReference(): DataFilteringSelection;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<DataFilteringSelection>;
            /**
             * Add a new filtering selection.
             * @param name The name of the new filtering selection.
             * @returns The newly created filtering selection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Add(name: (JsType<System.String> | System.String)): DataFilteringSelection;
            /**
             * Check if a filtering selection exists for the given
             * name.
             * @param name The name of the filtering selection.
             * @returns True if the filtering selection exists, false
             * otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Get a enumerator over the filtering selections.
             * @returns An enumerator over the filtering selections.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataFilteringSelection>;
            /**
             * Remove a filtering selection.
             * @param dataSelection The filtering selection to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(dataSelection: DataFilteringSelection): void;
            /**
             * Try to get a filtering selection.
             * @param name The name of the filtering selection.
             * @param dataSelection The filtering selection will be assigned
             * to this parameter if it exists, null will be assigned otherwise.
             * @returns True if the filtering selection was retrieved, false
             * otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetValue(name: (JsType<System.String> | System.String), dataSelection: OutParam<DataFilteringSelection>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataFilteringSelection>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Gets the filtering selection with the given name.
             * @param name The name of the filtering selection.
             * @returns The data filtering selection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: PropertyGet<(JsType<System.String> | System.String), DataFilteringSelection>;
            private __type_3439997360: null;
        }
        
        /**
         * Represents a flow of data from the {@link Spotfire.Dxp.Data.DataFlow.DataSource} through
         * an ordered set of {@link Spotfire.Dxp.Data.DataTransformation}'s.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataFlow extends DataSource {
            /**
             * Gets a copy of the {@link Spotfire.Dxp.Data.DataFlow.DataSource} that this flow is based on.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataSource(): DataSource;
            /**
             * Gets a document title for the data returned from this data source with the current configuration.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DocumentTitle(): JsType<System.String>;
            /**
             * Gets a value indicating whether this instance supports linked data mode.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsLinkable(): JsType<System.Boolean>;
            /**
             * Get a read-only copy of the list of {@link Spotfire.Dxp.Data.DataTransformation}'s.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Transformations(): System.Collections.Generic.IList<DataTransformation>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Determines whether the specified object is equal to the current object.
             * @param obj The object to compare with the current object.
             * @returns true if the specified object  is equal to the current object; otherwise, false.
             */
            Equals(obj: any): JsType<System.Boolean>;
            /**
             * Indicates whether the current object is equal to another object of the same type.
             * @param other An object to compare with this object.
             * @returns true if the current object is equal to the other parameter; otherwise, false.
             */
            Equals(other: DataFlow): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3718294456: null;
        }
        
        /**
         * This class is a builder that can be used to dynamically create a {@link Spotfire.Dxp.Data.DataFlow} instance.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataFlowBuilder extends Object {
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.DataFlowBuilder} class.
             * @param dataSource The {@link Spotfire.Dxp.Data.DataFlowBuilder.DataSource} that defines the starting point of the flow.
             * @param importContext The import context.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(dataSource: DataSource, importContext: Import.ImportContext);
            /**
             * Adds a {@link Spotfire.Dxp.Data.DataTransformation} to the flow.
             * @param transformation The transformation to add.
             * @returns The index of the added transformation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddTransformation(transformation: DataTransformation): JsType<System.Int32>;
            /**
             * Builds a data flow that can be used as a data source.
             * Includes the original data source and the list of all added
             * data transformations.
             * @returns The created {@link Spotfire.Dxp.Data.DataFlow}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Build(): DataFlow;
            /**
             * Dispose method.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Dispose(): void;
            /**
             * Executes the flow. A connection to the data source will
             * be made using the {@link Spotfire.Dxp.Data.DataSourcePromptMode}. The data will be passed through the
             * list of {@link Spotfire.Dxp.Data.DataTransformation}'s and the result returned.
             * @param promptMode The prompt mode.
             * @returns The resulting {@link Spotfire.Dxp.Data.DataRowReader}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Execute(promptMode: DataSourcePromptMode): DataRowReader;
            /**
             * Executes the flow. A connection to the data source will
             * be made using the {@link Spotfire.Dxp.Data.DataSourcePromptMode}. The data will be passed through the
             * list of {@link Spotfire.Dxp.Data.DataTransformation}'s up to the specified step and the result will be returned.
             * @param transformationIndex At which transformation the execution should stop,
             * 0 to just execute the data source.
             * @param promptMode The prompt mode.
             * @returns The resulting {@link Spotfire.Dxp.Data.DataRowReader}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Execute(transformationIndex: (JsType<System.Int32> | System.Int32), promptMode: DataSourcePromptMode): DataRowReader;
            /**
             * Removes the last added {@link Spotfire.Dxp.Data.DataTransformation}.
             * @returns True if the last transformation was successfully removed; otherwise False.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveTransformation(): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3363646897: null;
        }
        
        /**
         * A potentially multilevel index of a data column.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataHierarchy extends Object {
            /**
             * Gets the levels of the hierarchy.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Levels(): DataLevelCollection;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2386680369: null;
        }
        
        /**
         * A single level in a {@link Spotfire.Dxp.Data.DataHierarchy}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataLevel extends Object {
            /**
             * Gets the formatter for the level which can be used for format the node values in the level.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Formatter(): Formatters.IDataFormatter;
            /**
             * Gets the name of the level.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            /**
             * Gets the {@link Spotfire.Dxp.Data.DataType} of the nodes in the level.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NodeValueType(): DataType;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Gets the nodes of this level.
             * @param nodeCountLimit The maximum number of nodes allowed. The value
             * is used only if the level is not materialized at the time of the call.
             * @param nodes The node collection.
             * @returns True if the nodes could be retrieved; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetNodes(nodeCountLimit: (JsType<System.Int32> | System.Int32), nodes: OutParam<DataNodeCollection>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_487507222: null;
        }
        
        /**
         * A collection of the levels in a {@link Spotfire.Dxp.Data.DataHierarchy}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataLevelCollection extends Object implements Explicit<System.Collections.Generic.IEnumerable<DataLevel>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of levels in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * Gets the leaf (lowest) level of the hierarchy.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get LeafLevel(): DataLevel;
            /**
             * Gets the root (highest) level of the hierarchy.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RootLevel(): DataLevel;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<DataLevel>;
            /**
             * Returns an enumerator that iterates through the collection.
             * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataLevel>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataLevel>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Gets the level with a given name.
             * @param name The level name.
             * @returns A {@link Spotfire.Dxp.Data.DataLevel} instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), DataLevel> & PropertyGet<(JsType<System.String> | System.String), DataLevel>);
            private __type_2205357314: null;
        }
        
        /**
         * Captured error messages during load of (typically linked) data.
         * This can be retrieved from the {@link Spotfire.Dxp.Data.DataManager.LoadReport}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataLoadReport extends Object {
            /**
             * Gets a readonly list of all messages at the "Error" level.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Errors(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets a readonly list of all items in the report.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Items(): System.Collections.Generic.IList<DataLoadReport.Item>;
            /**
             * Gets a readonly list of all messages in the report.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Messages(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets a readonly list of all messages at the "Notice" level.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Notices(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets a readonly list of all report section headers.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Sections(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets a readonly list of all messages at the "Warning" level.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Warnings(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * A fatal error.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Error: System.String;
            /**
             * A harmless change from the original data set, such as a renamed column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Notice: System.String;
            /**
             * A report section header.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Section: System.String;
            /**
             * A non-fatal error, such as an operation failure, or a column becoming invalid.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Warning: System.String;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_738069298: null;
        }
        
        /**
         * A DataManager contains the data for an analysis.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataManager extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets a {@link Spotfire.Dxp.Data.DataSelection} which is always full for all {@link Spotfire.Dxp.Data.DataTable} objects.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get AllRows(): DataSelection;
            /**
             * Gets the collection of column relations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ColumnRelations(): ColumnRelationCollection;
            /**
             * Gets the data functions.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataFunctions(): DataFunctions.DataFunctionCollection;
            /**
             * Gets the expression functions.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ExpressionFunctions(): DataFunctions.DataFunctionExpressionFunctionCollection;
            /**
             * Gets a collection of the filtering selections that the data
             * manager contains.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Filterings(): DataFilteringSelectionCollection;
            /**
             * Gets the highlight selection
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Highlight(): HighlightSelection;
            /**
             * Gets the {@link Spotfire.Dxp.Data.DataLoadReport} to retrieve information
             * on changes that occured the {@link Spotfire.Dxp.Data.DataManager} was loaded using
             * linked data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get LoadReport(): DataLoadReport;
            /**
             * Gets a collection of the marking selections that the data manager
             * contains.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Markings(): DataMarkingSelectionCollection;
            /**
             * Gets the data property registry. This registry is used
             * to modify the definition of metadata properties.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Properties(): DataPropertyRegistry;
            /**
             * Gets the collection of relations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Relations(): DataRelationCollection;
            /**
             * Gets or sets the settings that should be used when saving the data in the {@link Spotfire.Dxp.Data.DataManager}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get SaveSettings(): DataSaveSettings;
            set SaveSettings(value: DataSaveSettings);
            /**
             * Gets a collection of the tables that the data manager contains.
             * A data table is created from calculation or a data source.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Tables(): DataTableCollection;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Creates the data writer given the typeId.
             * @param typeId The type identifier for the registered data
             * writer.
             * @returns A data writer; returns null if no data writer was found.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CreateDataWriter(typeId: Framework.DocumentModel.TypeIdentifier): Export.DataWriter;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_576247005: null;
        }
        
        /**
         * This is a {@link Spotfire.Dxp.Data.DataSelection} representing a marking of rows in
         * the {@link Spotfire.Dxp.Data.DataTable}s.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataMarkingSelection extends DataSelection implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets or sets the color that should be used when drawing this
             * marking selection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Color(): JsType<System.Drawing.Color>;
            set Color(value: JsType<System.Drawing.Color>);
            /** Gets a value indicating whether the selection is read-only or not. */
            get IsReadOnly(): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Set the marking selection for a given table.
             * @param rowMask The row selection to set.
             * @param dataTable The table to set the selection on.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            SetSelection(rowMask: RowSelection, dataTable: DataTable): void;
            /**
             * Set the marking selection for a given table.
             * @param rowMask The row selection to set.
             * @param dataTable The table to set the selection on.
             * @param dataSelectionOperation The operation to use when
             * combining this selection with previously set selections.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            SetSelection(rowMask: RowSelection, dataTable: DataTable, dataSelectionOperation: DataSelectionOperation): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_4082693927: null;
        }
        
        /**
         * This a collection of the {@link Spotfire.Dxp.Data.DataMarkingSelection} objects. This collection can
         * be retrieved from the {@link Spotfire.Dxp.Data.DataManager}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataMarkingSelectionCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataMarkingSelection>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of marking selections.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * Get or set the default marking.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DefaultMarkingReference(): DataMarkingSelection;
            set DefaultMarkingReference(value: DataMarkingSelection);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<DataMarkingSelection>;
            /**
             * Add a new data marking selection.
             * @param name The name of the new data marking selection.
             * @returns The new data marking selection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Add(name: (JsType<System.String> | System.String)): DataMarkingSelection;
            /**
             * Check if there exists a marking of the given name.
             * @param name The name of the marking.
             * @returns True if the marking exists, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Enumerate over the data marking selections.
             * @returns The enumerator.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataMarkingSelection>;
            /**
             * Remove a data marking selection.
             * @param dataSelection The data marking selection to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(dataSelection: DataMarkingSelection): void;
            /**
             * Try to get a marking selection.
             * @param name The name of the marking selection.
             * @param dataSelection Assign the selection to this out
             * parameter if it exists, will be set to null otherwise.
             * @returns True if the marking was retrieved, false if the marking
             * could not be found.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetValue(name: (JsType<System.String> | System.String), dataSelection: OutParam<DataMarkingSelection>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataMarkingSelection>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Get a data marking selection from a name.
             * @param name The name of the marking selection.
             * @returns The marking selection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: PropertyGet<(JsType<System.String> | System.String), DataMarkingSelection>;
            private __type_2362648601: null;
        }
        
        /**
         * A node in a {@link Spotfire.Dxp.Data.DataNodeCollection}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataNode extends Object implements IDataNodeProducer {
            /**
             * Gets the child nodes for this node.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Children(): DataNodeCollection;
            /**
             * Gets the formatted value for the node.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get FormattedValue(): JsType<System.String>;
            /**
             * Gets the parent nodes for this node.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Parents(): DataNodeCollection;
            /**
             * Gets the sibling nodes for this node.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Siblings(): DataNodeCollection;
            /**
             * Gets the value for the node.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Value(): DataValue;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.DataNode} class. Create a new node from a node collection.
             * @param nodes The node collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(nodes: DataNodeCollection);
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                Spotfire_Dxp_Data_IDataNodeProducer: Implementation<IDataNodeProducer>,
            };
            private __type_1722075056: null;
        }
        
        /**
         * A collection of nodes in a hierarchy level.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataNodeCollection extends Object implements Explicit<System.Collections.Generic.IEnumerable<DataNode>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of nodes in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * Gets the mapping between the rows in the column/table and
             * the nodes in the hierarchy level.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IndexMap(): NodeToRowIndexMap;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<DataNode>;
            /**
             * Get the child nodes given a node index.
             * @param nodeIndex The node index.
             * @returns A collection of child nodes, could be empty.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetChildren(nodeIndex: (JsType<System.Int32> | System.Int32)): DataNodeCollection;
            /**
             * Get the child nodes given an enumeration of node indexes.
             * @param nodes The node indexes to get children for.
             * @returns A collection of the child nodes, could be empty.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetChildren(nodes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): DataNodeCollection;
            /**
             * Returns an enumerator that iterates through the collection.
             * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataNode>;
            /**
             * Get an enumerator of the nodes in the collection.
             * @param dataNodeProducer An {@link Spotfire.Dxp.Data.IDataNodeProducer} to create the DataNode
             * used when enumerating.
             * @returns An enumerator of the nodes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(dataNodeProducer: IDataNodeProducer): System.Collections.Generic.IEnumerable<DataNode>;
            /**
             * Get an enumerator of a subset of the nodes in the collection.
             * @param nodes An enumerator of the node indexes to enumerate.
             * @param dataNodeProducer An {@link Spotfire.Dxp.Data.IDataNodeProducer} to create the DataNode
             * used when enumerating.
             * @returns An enumerator of the nodes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(nodes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>, dataNodeProducer: IDataNodeProducer): System.Collections.Generic.IEnumerable<DataNode>;
            /**
             * Get the parent nodes given a node index.
             * @param nodeIndex The node index.
             * @returns A collection of the parent nodes, could be empty.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetParents(nodeIndex: (JsType<System.Int32> | System.Int32)): DataNodeCollection;
            /**
             * Get the parent nodes given an enumeration of node indexes.
             * @param nodes The node indexes to get parents for.
             * @returns A collection of the parent nodes, could be empty.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetParents(nodes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): DataNodeCollection;
            /**
             * Get the siblings given a node index.
             * @param nodeIndex The node index.
             * @returns A collection of sibling nodes, could be empty.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetSiblings(nodeIndex: (JsType<System.Int32> | System.Int32)): DataNodeCollection;
            /**
             * Get the index of the node that has the given value.
             * @param value The node value to find the index for.
             * @returns The index of a node which has the given value, or -1
             * if no node could be found.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            IndexOf(value: any): JsType<System.Int32>;
            /**
             * Get the intersection of the node collections. The nodes must be defined on the
             * same hierarchy level.
             * @param dataNodeCollection The node collection to intersect with.
             * @returns A collection of the nodes that intersect.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Intersect(dataNodeCollection: DataNodeCollection): DataNodeCollection;
            /**
             * Get a subset of the nodes in the collection.
             * @param nodes The nodes to include in the subset.
             * @returns A collection which contains the nodes in the subset.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Subset(nodes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): DataNodeCollection;
            /**
             * Create a new node collection where the nodes in the argument collection are removed
             * from this collection. The nodes must be defined on the
             * same hierarchy level.
             * @param dataNodeCollection The node collection which defines which nodes
             * to remove.
             * @returns A collection where the argument nodes are removed.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Subtract(dataNodeCollection: DataNodeCollection): DataNodeCollection;
            /**
             * Toggle the nodes (xor) between the two collections. The nodes must be defined on the
             * same hierarchy level.
             * @param dataNodeCollection The node collection to toggle with.
             * @returns A collection of the toggle of the nodes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Toggle(dataNodeCollection: DataNodeCollection): DataNodeCollection;
            /**
             * Get the union of the node collections. The nodes must be defined on the
             * same hierarchy level.
             * @param dataNodeCollection The node collection to union with.
             * @returns A collection of the union of the nodes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Union(dataNodeCollection: DataNodeCollection): DataNodeCollection;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataNode>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Gets the node at the given index.
             * @param index The index of the node.
             * @returns The node at the given index.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), DataNode>;
            private __type_3480197328: null;
        }
        
        /**
         * Definition of a data property.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataProperty extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets the default attributes for a custom data property:
             * IsPersistent, IsVisible, IsEditable.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static get DefaultAttributes(): DataPropertyAttributes;
            /**
             * Gets the attributes of the data property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Attributes(): DataPropertyAttributes;
            /**
             * Gets a description of the property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Description(): JsType<System.String>;
            /**
             * Gets a value indicating whether this property has a default value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HasDefaultValue(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the property has a value type that is derived from the container.
             * For example, a column property that is a list of column values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HasInheritedType(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the property value is calculated or derived from the context.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsCalculated(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the property takes multiple values (the value is an array).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsListValued(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the property shall be copied to objects derived from the container.
             * For example, a column property that is propagated to a derived data view.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsPropagated(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether this is a standard data property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsStandard(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the property value can be edited by the user.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsUserEditable(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the property can be displayed in the Data Properties UI.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsUserVisible(): JsType<System.Boolean>;
            /**
             * Gets or sets the name of the data property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            set Name(value: JsType<System.String>);
            /**
             * Gets or sets the default value of the data property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Value(): unknown;
            set Value(value: unknown);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Creates a prototype for a custom data property.
             * @param propertyName The property name, must be a qualified name.
             * @param dataType The data type.
             * @param attributes The property attributes.
             * @returns A data property prototype.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateCustomPrototype(propertyName: (JsType<System.String> | System.String), dataType: DataType, attributes: DataPropertyAttributes): DataProperty;
            /**
             * Creates a prototype for a custom data property.
             * @param propertyName The property name, must be a qualified name.
             * @param defaultValue The default value.
             * @param dataType The data type.
             * @param attributes The property attributes.
             * @returns A data property prototype.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateCustomPrototype(propertyName: (JsType<System.String> | System.String), defaultValue: any, dataType: DataType, attributes: DataPropertyAttributes): DataProperty;
            /**
             * Creates a prototype for a custom data property.
             * @param propertyName The property name, must be a qualified name.
             * @param description The description of the property.
             * @param defaultValue The default value.
             * @param dataType The value type.
             * @param attributes The property attributes.
             * @returns A data property prototype.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateCustomPrototype(propertyName: (JsType<System.String> | System.String), description: (JsType<System.String> | System.String), defaultValue: any, dataType: DataType, attributes: DataPropertyAttributes): DataProperty;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_3832576209: null;
        }
        
        /**
         * Attributes for a {@link Spotfire.Dxp.Data.DataProperty}.
         * Custom data properties should almost always use {@link Spotfire.Dxp.Data.DataProperty.DefaultAttributes}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataPropertyAttributes extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * True if the property has a value type that is derived from the container.
             * For example, a column property that is a list of column values.
             */
            static readonly HasInheritedType: DataPropertyAttributes;
            /** True if the property value is calculated or derived from the context. */
            static readonly IsCalculated: DataPropertyAttributes;
            /**
             * True if the property value can be edited by the user, but false
             * if the property requires a special editor.
             */
            static readonly IsEditable: DataPropertyAttributes;
            /** True if the property takes multiple values (the value is an array). */
            static readonly IsListValued: DataPropertyAttributes;
            /** True if the property shall be included in the analysis file. */
            static readonly IsPersistent: DataPropertyAttributes;
            /**
             * True if the property shall be copied to objects derived from the container.
             * For example, a column property that is propagated to a derived data view.
             */
            static readonly IsPropagated: DataPropertyAttributes;
            /** True if the property can be used in search expressions. */
            static readonly IsSearchable: DataPropertyAttributes;
            /** True if the data property is built-in. */
            static readonly IsStandard: DataPropertyAttributes;
            /**
             * True if the property is displayed in the data properties UI, but
             * false is the property requires a special editor.
             */
            static readonly IsVisible: DataPropertyAttributes;
            /** The empty set of attributes. */
            static readonly None: DataPropertyAttributes;
            private __type_3074693128: null;
        }
        
        /**
         * The different classes that a {@link Spotfire.Dxp.Data.DataProperty} can belong to.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataPropertyClass extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** The property is shared in the entire analysis. */
            static readonly Analysis: DataPropertyClass;
            /** The property is for a specific {@link Spotfire.Dxp.Data.DataColumn}. */
            static readonly Column: DataPropertyClass;
            /** The property is shared in the entire document. */
            static readonly Document: DataPropertyClass;
            /** The property is for a specific {@link Spotfire.Dxp.Data.DataTable}. */
            static readonly Table: DataPropertyClass;
            private __type_1605967375: null;
        }
        
        /**
         * The {@link Spotfire.Dxp.Data.DataProperty} registry is part of the {@link Spotfire.Dxp.Data.DataManager} and
         * contains the properties that can be defined in the analysis. All properties (metadata) that
         * are set must be defined in this registry.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataPropertyRegistry extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Adds a new {@link Spotfire.Dxp.Data.DataProperty}.
             * @param propertyClass The property class that this property
             * is part of.
             * @param dataProperty The property to add.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddProperty(propertyClass: DataPropertyClass, dataProperty: DataProperty): void;
            /**
             * Checks if the property named exists in the given
             * {@link Spotfire.Dxp.Data.DataPropertyClass}.
             * @param propertyClass The property class to find the
             * property in.
             * @param propertyName The name of the property to find.
             * @returns True if the property exists in the property class,
             * false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ContainsProperty(propertyClass: DataPropertyClass, propertyName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Gets all the properties for a {@link Spotfire.Dxp.Data.DataPropertyClass}.
             * @param propertyClass The property class.
             * @returns An enumeration of all the properties of the specified class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetProperties(propertyClass: DataPropertyClass): System.Collections.Generic.IEnumerable<DataProperty>;
            /**
             * Gets the property with the given name.
             * @param propertyClass The property class to find the property
             * in.
             * @param propertyName The property name to get.
             * @returns The property with the given name.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetProperty(propertyClass: DataPropertyClass, propertyName: (JsType<System.String> | System.String)): DataProperty;
            /**
             * Removes a custom property from the registry.
             * @param propertyClass The property class that this property
             * is part of.
             * @param dataProperty The property to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveProperty(propertyClass: DataPropertyClass, dataProperty: DataProperty): void;
            /**
             * Removes a custom property from the registry.
             * @param propertyClass The property class that this property
             * is part of.
             * @param dataPropertyName The name of the property to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveProperty(propertyClass: DataPropertyClass, dataPropertyName: (JsType<System.String> | System.String)): void;
            /**
             * Tries to get a property with a given name.
             * @param propertyClass The property class to search in.
             * @param propertyName The property name of the property to find.
             * @param property This argument will be set to the property
             * if it was found, it will be set to null otherwise.
             * @returns True if the property was found, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetProperty(propertyClass: DataPropertyClass, propertyName: (JsType<System.String> | System.String), property: OutParam<DataProperty>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_4081087722: null;
        }
        
        /**
         * This class describes a relation between two {@link Spotfire.Dxp.Data.DataTable}s.
         * The relations are contained in a {@link Spotfire.Dxp.Data.DataRelationCollection}, use
         * the {@link Spotfire.Dxp.Data.DataRelationCollection.Add|Add(leftTable, rightTable, relationExpression)} method to add new relations.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataRelation extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets or sets the expression used to define the relation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Expression(): JsType<System.String>;
            set Expression(value: JsType<System.String>);
            /**
             * Gets a value indicating whether the relation is valid, false otherwise..
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsValid(): JsType<System.Boolean>;
            /**
             * Gets the left data table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get LeftTable(): DataTable;
            /**
             * Gets the right data table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RightTable(): DataTable;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Check if the relation connects the data table.
             * @param dataTable The table to check if the relation
             * connects to it.
             * @returns True if the table is part of the relation,
             * false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ConnectsTable(dataTable: DataTable): JsType<System.Boolean>;
            /**
             * Get the data table that the given data table relates to
             * in the relation.
             * @param dataTable A data table which is either the
             * right or the left table.
             * @returns The other table that the relation refers to.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetRelatedTable(dataTable: DataTable): DataTable;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_2496430196: null;
        }
        
        /**
         * A collection of {@link Spotfire.Dxp.Data.DataRelation} objects.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataRelationCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataRelation>>, Explicit<System.Collections.IEnumerable> {
            /**
             * The number of relations in this collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<DataRelation>;
            /**
             * Adds a relation to this collection.
             * @param leftTable The left table.
             * @param rightTable The right table.
             * @param relationExpression The relation expression.
             * @returns The new data relation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Add(leftTable: DataTable, rightTable: DataTable, relationExpression: (JsType<System.String> | System.String)): DataRelation;
            /**
             * Finds a relation between two given data tables.
             * @param table1 The first table.
             * @param table2 The second table.
             * @returns The relation between the tables; otherwise null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            FindRelation(table1: DataTable, table2: DataTable): DataRelation;
            /**
             * Finds all valid relations where a given data table is involved.
             * @param dataTable The data table.
             * @returns A list of valid data relations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            FindRelations(dataTable: DataTable): System.Collections.Generic.IList<DataRelation>;
            /**
             * Finds all relations where a given data table is involved.
             * @param dataTable The data table.
             * @param includeInvalidRelations True if invalid relations should be
             * included in the result; otherwise, false.
             * @returns A list of data relations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            FindRelations(dataTable: DataTable, includeInvalidRelations: (JsType<System.Boolean> | System.Boolean)): System.Collections.Generic.IList<DataRelation>;
            /**
             * Returns an enumerator that iterates through the collection.
             * @returns An enumerator that can be used to iterate through the collection.
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataRelation>;
            /**
             * Removes a relation from this collection.
             * @param dataRelation The relation to be removed.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(dataRelation: DataRelation): void;
            /**
             * Removes all relations that satisfy a given predicate from this collection.
             * @param match The predicate.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveAll(match: System.Predicate<DataRelation>): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataRelation>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Gets the relation at the given index.
             * @param index The index of the relation.
             * @returns The relation at the specified index.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), DataRelation>;
            private __type_961341728: null;
        }
        
        /**
         * Flyweight row class used for iterating over a data table.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataRow extends Object {
            /**
             * The zero-based row index.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Index(): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1321780552: null;
        }
        
        /**
         * Class for sequential scanning through the rows of a data set
         * defined by a collection of columns.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataRowCursor extends Object implements Explicit<System.Collections.Generic.IEnumerable<DataRow>>, Explicit<System.Collections.IEnumerable>, Explicit<System.Collections.Generic.IEnumerator<DataRow>>, Explicit<System.Collections.IEnumerator> {
            /**
             * The current row index.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CurrentIndex(): JsType<System.Int32>;
            /**
             * The number of columns in a row.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ValueCount(): JsType<System.Int32>;
            /**
             * Create a new data row cursor given a number of value cursors
             * and an enumerator indexes.
             * @param rowIndexes The indexes to enumerate over.
             * @param values The value cursors.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(rowIndexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>, ...values: DataValueCursor[]);
            [Symbol.iterator](): Iterator<DataRow>;
            /**
             * Implements IDisposable.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Dispose(): void;
            /**
             * Advances the enumerator to the next element of the collection.
             * @returns true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
             */
            MoveNext(): JsType<System.Boolean>;
            /**
             * Sets the enumerator to its initial position, which is before the first element in the collection.
             */
            Reset(): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataRow>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                System_Collections_Generic_IEnumerator: Implementation<System.Collections.Generic.IEnumerator<DataRow>>,
                System_Collections_IEnumerator: Implementation<System.Collections.IEnumerator>,
            };
            private __type_3137122146: null;
        }
        
        /**
         * Represents a resettable iterator of rows values. It is used to retrieve data from
         * a {@link Spotfire.Dxp.Data.DataSource} or {@link Spotfire.Dxp.Data.DataTransformation}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataRowReader extends Object {
            /**
             * Represents a collection of the columns that the reader returns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Columns(): DataRowReaderColumnCollection;
            /**
             * Gets a value indicating whether the data reader is closed.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsClosed(): JsType<System.Boolean>;
            /**
             * Gets a read-only copy of the result properties, this is properties for the entire
             * reader result and not for a specific column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ResultProperties(): ResultProperties;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Closes the data reader.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Close(): void;
            /**
             * Dispose method.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Dispose(): void;
            /**
             * Advances the reader to the next row.
             * @returns true if there are more rows; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            MoveNext(): JsType<System.Boolean>;
            /**
             * Resets the reader so that the next time {@link Spotfire.Dxp.Data.DataRowReader.MoveNext} is called
             * the first row will be returned.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Reset(): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_859145545: null;
        }
        
        /**
         * Represents a column returned by a {@link Spotfire.Dxp.Data.DataRowReader}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataRowReaderColumn extends Object {
            /**
             * Get the cursor that will contains the value in the current row after
             * {@link Spotfire.Dxp.Data.DataRowReader.MoveNext} has been called.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Cursor(): DataValueCursor;
            /**
             * Gets the data type of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataType(): DataType;
            /**
             * Gets the name of the column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            /**
             * Gets the properties of the column as a read-only collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Properties(): DataColumnProperties;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Get a formatted cursor for retrieving the formatted values from
             * this column. The formatted used is the formatter defined in the properties
             * of this class, if no formatted is defined in the properties then the default
             * formatter for the specified data type is used. The cursor will contain the
             * formatted value in the current row after {@link Spotfire.Dxp.Data.DataRowReader.MoveNext} has been called.
             * @returns A cursor which can be used to retrieve the formatted values for
             * the current row.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetFormattedCursor(): DataValueCursorGeneric<JsType<System.String>>;
            /**
             * Get a formatted cursor for retrieving the formatted values from
             * this column with a specified formatter. The cursor will contain the
             * formatted value in the current row after {@link Spotfire.Dxp.Data.DataRowReader.MoveNext} has been called.
             * @param formatter The formatter that should be used to format the
             * values.
             * @returns A cursor which can be used to retrieve the formatted values for
             * the current row.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetFormattedCursor(formatter: Formatters.IDataFormatter): DataValueCursorGeneric<JsType<System.String>>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_298508883: null;
        }
        
        /**
         * Represents a collection of the {@link Spotfire.Dxp.Data.DataRowReaderColumn}s that a
         * {@link Spotfire.Dxp.Data.DataRowReader} returns.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataRowReaderColumnCollection extends Object implements Explicit<System.Collections.Generic.IEnumerable<DataRowReaderColumn>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<DataRowReaderColumn>;
            /**
             * Find all columns that match the search expression.
             * @param searchExpression The search expression.
             * @returns All columns that match the search expression.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            FindAll(searchExpression: (JsType<System.String> | System.String)): System.Collections.Generic.ICollection<DataRowReaderColumn>;
            /**
             * Returns an enumerator that iterates through the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataRowReaderColumn>;
            /**
             * Try to find a column which matches the column name.
             * @param columnName The column name.
             * @param column Returns the column, the value is undefined if the method
             * returns false.
             * @returns true if a column could be found; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetColumn(columnName: (JsType<System.String> | System.String), column: OutParam<DataRowReaderColumn>): JsType<System.Boolean>;
            /**
             * Try to find a column which matches the column signature.
             * @param dataColumnSignature The column signature.
             * @param column Returns the column, the value is undefined
             * if the method returns false.
             * @returns true if a column could be found; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetColumn(dataColumnSignature: DataColumnSignature, column: OutParam<DataRowReaderColumn>): JsType<System.Boolean>;
            /**
             * Try to find a column which matches the column signature.
             * @param dataColumnSignature The column signature.
             * @param column Returns the column, the value is undefined
             * if the method returns false.
             * @returns true if a column could be found; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetColumnAllowingDifferentTypes(dataColumnSignature: DataColumnSignature, column: OutParam<DataRowReaderColumn>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataRowReaderColumn>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Gets the column with the specified name
             * @param name The name.
             * @returns The column with the name.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), DataRowReaderColumn> & PropertyGet<(JsType<System.String> | System.String), DataRowReaderColumn>);
            private __type_48546049: null;
        }
        
        /**
         * Container for data-related save settings. This class is set on the
         * {@link Spotfire.Dxp.Data.DataManager} class and defines how the data should be stored when
         * saving the document.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataSaveSettings extends Object {
            /**
             * Gets or sets a value indicating whether prompting for settings should be performed
             * for tables with linked data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ConfigurePrompting(): JsType<System.Boolean>;
            set ConfigurePrompting(value: JsType<System.Boolean>);
            /**
             * Gets a mutable list of {@link Spotfire.Dxp.Data.DataTableSaveSettings} for the {@link Spotfire.Dxp.Data.DataTable}s in the
             * {@link Spotfire.Dxp.Data.DataManager}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataTableSettings(): System.Collections.Generic.IList<DataTableSaveSettings>;
            /**
             * Gets or sets a value indicating whether all tables with source data shall be saved in
             * embedded mode.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get EmbedAllSourceData(): JsType<System.Boolean>;
            set EmbedAllSourceData(value: JsType<System.Boolean>);
            /**
             * Gets or sets a value indicating whether markings, tags and bookmarks shall be kept for
             * tables with linked data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get KeepMarkingsTagsAndBookmarks(): JsType<System.Boolean>;
            set KeepMarkingsTagsAndBookmarks(value: JsType<System.Boolean>);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.DataSaveSettings} class.
             * @param dataManager The data manager.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(dataManager: DataManager);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.DataSaveSettings} class.
             * Combines the default save settings for a Data Manager with
             * an old (possibly outdated) set of settings. This is used create a new {@link Spotfire.Dxp.Data.DataSaveSettings}
             * where all the obsolete settings has been removed but the valid settings are still there.
             * @param dataManager The data manager.
             * @param oldSettings The previous settings.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(dataManager: DataManager, oldSettings: DataSaveSettings);
            /**
             * Checks if the save settings are applicable to the tables
             * in a given {@link Spotfire.Dxp.Data.DataManager}.
             * @param dataManager The data manager.
             * @returns True if the settings are applicable.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AreApplicable(dataManager: DataManager): JsType<System.Boolean>;
            /**
             * Try and get the settings for a specified table.
             * @param tableId The table identifier.
             * @param tableSettings The table settings will be assigned to this parameter
             * if found, null will be assigned otherwise.
             * @returns True is the table was present.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetDataTableSettings(tableId: (JsType<System.Guid> | System.Guid), tableSettings: OutParam<DataTableSaveSettings>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_4140477716: null;
        }
        
        /**
         * This is the base class for all selections. A selection is an
         * object that defines a subset of rows as a {@link Spotfire.Dxp.Data.RowSelection}
         * for all data tables in the document.
         * 
         * 
         * See the {@link Spotfire.Dxp.Data.DataMarkingSelection}
         * and {@link Spotfire.Dxp.Data.DataFilteringSelection} for concrete classes.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataSelection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets a value indicating whether the selection is read-only or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsReadOnly(): JsType<System.Boolean>;
            /**
             * Gets or sets the name of the selection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            set Name(value: JsType<System.String>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Get the row selection for this selection in the given
             * {@link Spotfire.Dxp.Data.DataTable}.
             * @param dataTable The {@link Spotfire.Dxp.Data.DataTable} to get the selection for.
             * @returns The row selection in the given dataTable.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetSelection(dataTable: DataTable): RowSelection;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_3327467594: null;
        }
        
        /**
         * Defines how to combine data selections.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataSelectionCombinationMethod extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * The data selections shall be combined by intersection (AND).
             * Only rows included in all of the combined selections are included in the resulting selection.
             */
            static readonly Intersection: DataSelectionCombinationMethod;
            /**
             * The data selections shall be combined by union (inclusive OR).
             * Rows included in one or more of the combined selections are included in the resulting selection.
             */
            static readonly Union: DataSelectionCombinationMethod;
            private __type_177792436: null;
        }
        
        /**
         * Enum for data selection operations.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataSelectionOperation extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** Add to the current selection. */
            static readonly Add: DataSelectionOperation;
            /** Intersect with the current selection. */
            static readonly Intersect: DataSelectionOperation;
            /** Replace the current selection. */
            static readonly Replace: DataSelectionOperation;
            /** Remove from the current selection. */
            static readonly Subtract: DataSelectionOperation;
            /** Toggle values in the current selection. */
            static readonly Toggle: DataSelectionOperation;
            private __type_3483409783: null;
        }
        
        /**
         * Abstract class for data sources. Used when loading and saving linked data.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataSource extends Object {
            /**
             * Gets a document title for the data returned from this data source with the current configuration.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DocumentTitle(): JsType<System.String>;
            /**
             * Gets a value indicating whether this instance supports linked data mode.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsLinkable(): JsType<System.Boolean>;
            /**
             * Gets or sets a value indicating whether prompting is allowed is allowed for this data source instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsPromptingAllowed(): JsType<System.Boolean>;
            set IsPromptingAllowed(value: JsType<System.Boolean>);
            /**
             * Gets the display name of the data source.
             * Same as the document title by default.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            /**
             * Gets or sets a value indicating whether settings should be reused without
             * prompting or not.
             * Determines if the data source should be opened in silent mode,
             * prompting the user only when necessary, or if the user should get a chance
             * to modify the settings even if they are valid.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ReuseSettingsWithoutPrompting(): JsType<System.Boolean>;
            set ReuseSettingsWithoutPrompting(value: JsType<System.Boolean>);
            /**
             * Gets the type identifier for the data source.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TypeId(): Framework.DocumentModel.TypeIdentifier;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Creates a {@link Spotfire.Dxp.Data.DataSourceConnection}, using the specified serviceProvider and the settings in this data source instance. If needed, and allowed by the current prompt mode,
             * the user may be prompted for additional settings.
             * @param serviceProvider The service provider.
             * @param promptMode The prompt mode.
             * @returns A new DataSourceConnection instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Connect(serviceProvider: (JsType<OrExplicit<System.IServiceProvider>> | OrExplicit<System.IServiceProvider>), promptMode: DataSourcePromptMode): DataSourceConnection;
            /**
             * Creates a {@link Spotfire.Dxp.Data.DataSourceConnection}, using the specified serviceProvider and the settings in this data source instance. If needed, and allowed by the current prompt mode,
             * the user may be prompted for additional settings.
             * @param serviceProvider The service provider.
             * @param promptMode The prompt mode.
             * @returns A new DataSourceConnection instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ConnectWithDelayedPrompting(serviceProvider: (JsType<OrExplicit<System.IServiceProvider>> | OrExplicit<System.IServiceProvider>), promptMode: DataSourcePromptMode): DataSourceConnection;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_644591547: null;
        }
        
        /**
         * Represents an open connection to a data source.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataSourceConnection extends Object {
            /**
             * Gets or sets the name of the connected user.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ConnectedUserName(): JsType<System.String>;
            set ConnectedUserName(value: JsType<System.String>);
            /**
             * Gets the data source.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataSource(): DataSource;
            /**
             * Gets a document title for the data returned from this data source with the current configuration.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DocumentTitle(): JsType<System.String>;
            /**
             * Gets or sets a value indicating whether the data depends on the current user or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HasUserDependentData(): JsType<System.Boolean>;
            set HasUserDependentData(value: JsType<System.Boolean>);
            /**
             * Gets a value indicating whether this instance supports linked data mode.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsLinkable(): JsType<System.Boolean>;
            /**
             * Gets access to services.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ServiceProvider(): JsType<System.IServiceProvider>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Synonym for Dispose.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Close(): void;
            /**
             * Disposes of the connection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Dispose(): void;
            /**
             * Executes the query with the current data source settings and returns the resulting {@link Spotfire.Dxp.Data.DataRowReader}.
             * @returns A new {@link Spotfire.Dxp.Data.DataRowReader} instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ExecuteQuery2(): DataRowReader;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_4154211765: null;
        }
        
        /**
         * Defines how a {@link Spotfire.Dxp.Data.DataSource} should prompt a user
         * for settings when loading data.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataSourcePromptMode extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** The user should be prompted for input if applicable. The current settings should be used as default. */
            static readonly All: DataSourcePromptMode;
            /** Use current settings without prompting the user. */
            static readonly None: DataSourcePromptMode;
            /**
             * The user should be prompted for required information not included in the current settings.
             * Optional settings should not be prompted.
             */
            static readonly RequiredOnly: DataSourcePromptMode;
            private __type_1636193980: null;
        }
        
        /**
         * A DataTable is a collection of columns and metadata.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataTable extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets or sets a value indicating whether to automatically create filters for new columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get AutoCreateFilters(): JsType<System.Boolean>;
            set AutoCreateFilters(value: JsType<System.Boolean>);
            /**
             * Gets the collection of the columns that are part of this data table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Columns(): DataColumnCollection;
            /**
             * Gets a value indicating whether the table has a valid primary key or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HasValidPrimaryKey(): JsType<System.Boolean>;
            /**
             * Gets a unique identifier for this table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Id(): JsType<System.Guid>;
            /**
             * Gets a value indicating whether the data in this table is kept external.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsExternal(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether this table is refreshable by need, that is,
             * it supports {@link Spotfire.Dxp.Data.DataTable.RefreshOnDemandData} calls and uses the {@link Spotfire.Dxp.Data.DataTable.NeedsRefresh}
             * property to indicate if refresh is needed.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsRefreshableByNeed(): JsType<System.Boolean>;
            /**
             * Gets or sets the name of this table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            set Name(value: JsType<System.String>);
            /**
             * Gets the name of the table escaped for usage in an
             * expression. This is a utility method which uses
             * {@link Spotfire.Dxp.Data.Expressions.ExpressionUtilities.EscapeIdentifier|EscapeIdentifier(identifier)}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NameEscapedForExpression(): JsType<System.String>;
            /**
             * Gets a value indicating whether this table needs to be refreshed (by calling {@link Spotfire.Dxp.Data.DataTable.RefreshOnDemandData}).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NeedsRefresh(): JsType<System.Boolean>;
            /**
             * Gets or sets the primary key for this data table. The primary
             * key is a collection of columns in this table that provides a unique
             * combination of values for each row.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get PrimaryKey(): System.Collections.Generic.IList<DataColumn>;
            set PrimaryKey(value: OrExplicit<System.Collections.Generic.IList<DataColumn>>);
            /**
             * Gets the properties describing this table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Properties(): DataTableProperties;
            /**
             * Gets a value indicating whether the data table is refreshing.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Refreshing(): JsType<System.Boolean>;
            /**
             * Gets the number of rows in the columns in this table. All columns in a {@link Spotfire.Dxp.Data.DataTable}
             * have the same number of rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RowCount(): JsType<System.Int32>;
            /**
             * Gets or sets a value indicating whether to show a prompt for
             * matching columns when data has been replaced.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ShowColumnMatchPrompt(): JsType<System.Boolean>;
            set ShowColumnMatchPrompt(value: JsType<System.Boolean>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Adds columns from the columns retrieved from the
             * dataSource using the settings in the
             * settings parameter. Use
             * {@link Spotfire.Dxp.Data.DataManager.CreateFileDataSource|CreateFileDataSource(filePath)} to create a data
             * source from a file path.
             * @param dataSource The data source to retrieve the new
             * columns from.
             * @param settings The settings to use when adding the columns
             * to the current table.
             * @returns Information about the changes that occured in the
             * table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddColumns(dataSource: DataSource, settings: AddColumnsSettings): ColumnsChangedResult;
            /**
             * Adds rows from the columns retrieved from the
             * dataSource using the settings in the
             * settings parameter. Use
             * {@link Spotfire.Dxp.Data.DataManager.CreateFileDataSource|CreateFileDataSource(filePath)} to create a data
             * source from a file path.
             * @param dataSource The data source to retrieve the new
             * columns from.
             * @param settings The settings to use when adding the rows
             * to the current columns.
             * @returns Information about the changes that occured in the
             * table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddRows(dataSource: DataSource, settings: AddRowsSettings): ColumnsChangedResult;
            /**
             * Adds a transformation to the table. The transformation will be applied on the source columns in the table
             * (i.e., the columns originating from a data source or the result of an add columns or add rows operation.)
             * Calculated columns will not be affected.
             * @param transformation The transformation.
             * @returns Information about the changes that occured in the table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddTransformation(transformation: DataTransformation): ColumnsChangedResult;
            /**
             * Adds a sequence of transformations to the table. The transformation will be applied on the source columns in the table
             * (i.e., the columns originating from a data source or the result of an add columns or add rows operation.)
             * Calculated columns will not be affected.
             * @param transformations The transformations.
             * @returns Information about the changes that occured in the table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddTransformations(transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): ColumnsChangedResult;
            /**
             * Gets a value indicating whether the data table can be reloaded using the {@link Spotfire.Dxp.Data.DataTable.ReloadAllData} method.
             * @returns True if the data table can be reloaded; false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanReloadAllData(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the data table can be reloaded using the {@link Spotfire.Dxp.Data.DataTable.ReloadLinkedData} method.
             * @returns True if the data table can be reloaded; false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanReloadLinkedData(): JsType<System.Boolean>;
            /**
             * Export the data in the data table as a data file in the library.
             * @param libraryItem This library item is either the folder where the data file
             * should be stored or a data file to overwrite.
             * @param title The title of the file to store in the library.
             * @returns The created library item.
             * 
             * @since 2.0
             * 
             * @group Extended capability 'LibraryWrite'
             */
            ExportDataToLibrary(libraryItem: Framework.Library.LibraryItem, title: (JsType<System.String> | System.String)): Framework.Library.LibraryItem;
            /**
             * Generates a {@link Spotfire.Dxp.Data.SourceView} representing {@link Spotfire.Dxp.Data.DataOperations.DataOperation}s performed to construct this data table.
             * @returns A generated {@link Spotfire.Dxp.Data.SourceView}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GenerateSourceView(): SourceView;
            /**
             * Gets the distinct rows for the specified cursors. Note that this method is not supported for external data tables.
             * @param rowIndexes The row indexes to enumerate. May be null for all rows.
             * @param valueCursors Specifies which columns to include in the enumeration. These are used to
             * access the individual data values for each row. You need to specify at least one value cursor.
             * @returns An enumerator of the distinct rows in the subset. The order of the returned rows is not specified.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetDistinctRows(rowIndexes: (IndexSet | null), ...valueCursors: DataValueCursor[]): System.Collections.Generic.IEnumerable<DataRow>;
            /**
             * Gets the methods that can be used in expressions on this table.
             * @returns The methods that can be used on this table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetMethods(): System.Collections.Generic.IList<Computations.IPublicMethod>;
            /**
             * Enumerates all rows for the columns specified by the given valueCursors.
             * @param valueCursors Specifies what columns to include in the enumeration and are used to
             *  access the individual data values for each row.
             * @returns An enumeration of all rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetRows(...valueCursors: DataValueCursor[]): System.Collections.Generic.IEnumerable<DataRow>;
            /**
             * Enumerates a subset of the rows for the columns specified by the given valueCursorss.
             * @param rowIndexes The row indexes to enumerate.
             * @param valueCursors Specifies what columns to include in the enumeration and are used to
             *  access the individual data values for each row.
             * @returns An enumeration of the rows in the subset.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetRows(rowIndexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>, ...valueCursors: DataValueCursor[]): System.Collections.Generic.IEnumerable<DataRow>;
            /**
             * Refreshes data that depends on other data and is not automatically updated.
             * This includes on-demand data with manual refresh, data functions with update behavior Manual
             * and calculations with update behavior Invalidate.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RefreshOnDemandData(): void;
            /**
             * Reloads all data in this data table including data sources set to store their data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ReloadAllData(): void;
            /**
             * Reloads only linked data in this data table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ReloadLinkedData(): void;
            /**
             * Remove rows from this table.
             * @param rowMask A row selection defining which rows to
             * remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveRows(rowMask: RowSelection): void;
            /**
             * Replace the data in the table with the columns in the data
             * source. Use {@link Spotfire.Dxp.Data.DataManager.CreateFileDataSource|CreateFileDataSource(filePath)} to create
             * a data source from a file path.
             * @param dataSource The data source to get the new data from.
             * @returns Information about the changes that occured in the
             * table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ReplaceData(dataSource: DataSource): ColumnsChangedResult;
            /**
             * Returns the rows that matches the where clause expression.
             * The expression must be a boolean Spotfire expression.
             * @param whereClause A where clause expression.
             * @returns The rows that matches the expression.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Select(whereClause: (JsType<System.String> | System.String)): RowSelection;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_3781048648: null;
        }
        
        /**
         * A collection of {@link Spotfire.Dxp.Data.DataTable} objects. The collection of data tables
         * exists in the {@link Spotfire.Dxp.Data.DataManager}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataTableCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataTable>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Gets the number of tables.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * Gets or sets the current default table. The value may not be set
             * to null but will be null when there are no tables in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DefaultTableReference(): (DataTable | null);
            set DefaultTableReference(value: (DataTable | null));
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            [Symbol.iterator](): Iterator<DataTable>;
            /**
             * Create and add a {@link Spotfire.Dxp.Data.DataTable} from a {@link Spotfire.Dxp.Data.DataSource}.
             * Use {@link Spotfire.Dxp.Data.DataManager.CreateFileDataSource|CreateFileDataSource(filePath)} to create
             * a {@link Spotfire.Dxp.Data.DataSource} from a file path.
             * @param dataTableName The name of the data table.
             * @param dataSource The {@link Spotfire.Dxp.Data.DataSource} to retrieve data from.
             * @returns The data table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Add(dataTableName: (JsType<System.String> | System.String), dataSource: DataSource): DataTable;
            /**
             * Create and add a {@link Spotfire.Dxp.Data.DataTable} from a {@link Spotfire.Dxp.Data.DataSource}.
             * Use {@link Spotfire.Dxp.Data.DataManager.CreateFileDataSource|CreateFileDataSource(filePath)} to create
             * a {@link Spotfire.Dxp.Data.DataSource} from a file path.
             * @param dataTableName The name of the data table.
             * @param dataSource The {@link Spotfire.Dxp.Data.DataSource} to retrieve data from.
             * @param autoCreateFilters If set to true filters are automatically created for all columns in the newly created data table.
             * If set to false filters may be added manually when needed.
             * @returns The data table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Add(dataTableName: (JsType<System.String> | System.String), dataSource: DataSource, autoCreateFilters: (JsType<System.Boolean> | System.Boolean)): DataTable;
            /**
             * Gets a value indicating whether any data tables can be reloaded using the
             * {@link Spotfire.Dxp.Data.DataTableCollection.ReloadAllData} method.
             * @returns True if any data table can be reloaded; false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanReloadAllData(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether any of the specified data tables can be reloaded using the
             * {@link Spotfire.Dxp.Data.DataTableCollection.ReloadAllData|ReloadAllData(tables)} method.
             * @param tables The data tables to reload.
             * @returns True if any data table can be reloaded; false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanReloadAllData(tables: OrExplicit<System.Collections.Generic.IEnumerable<DataTable>>): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether any data tables can be reloaded using the
             * {@link Spotfire.Dxp.Data.DataTableCollection.ReloadLinkedData} method.
             * @returns True if any data table can be reloaded; false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanReloadLinkedData(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether any of the specified data tables can be reloaded using the
             * {@link Spotfire.Dxp.Data.DataTableCollection.ReloadLinkedData|ReloadLinkedData(tables)} method.
             * @param tables The data tables to reload.
             * @returns True if any data table can be reloaded; false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanReloadLinkedData(tables: OrExplicit<System.Collections.Generic.IEnumerable<DataTable>>): JsType<System.Boolean>;
            /**
             * Check if the dataTable exists in this collection.
             * @param dataTable The data table to search for.
             * @returns True if the dataTable exists in the collection, false
             * otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(dataTable: DataTable): JsType<System.Boolean>;
            /**
             * Check if a table with the given id exists in the
             * collection.
             * @param id The id to search for.
             * @returns True if there exists a table with the given id in
             * the collection, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(id: (JsType<System.Guid> | System.Guid)): JsType<System.Boolean>;
            /**
             * Check if a table with the given name exists in the
             * collection.
             * @param name The name of a table to check if it exists in
             * the collection.
             * @returns True if there exists a table with the given name in
             * the collection, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Create a new unique table name from a suggestion. The
             * suggested name is used if possible.
             * @param tableName The suggested table name.
             * @returns A table name which is unique in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CreateUniqueName(tableName: (JsType<System.String> | System.String)): JsType<System.String>;
            /**
             * Returns an enumerator that iterates through the collection.
             * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataTable>;
            /**
             * Check if the suggested table name is a valid unique
             * name in the collection.
             * @param tableName The suggested table name.
             * @returns True if the suggested name is a valid name for a new table
             * in the collection, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            IsValidName(tableName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Refreshes data that depends on other data and is not automatically updated.
             * This includes on-demand data with manual refresh, data functions with update behavior Manual
             * and calculations with update behavior Invalidate.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RefreshOnDemandData(): void;
            /**
             * Refreshes data that depends on other data and is not automatically updated.
             * This includes on-demand data with manual refresh, data functions with update behavior Manual
             * and calculations with update behavior Invalidate.
             * @param tables The data tables to refresh.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RefreshOnDemandData(tables: OrExplicit<System.Collections.Generic.IEnumerable<DataTable>>): void;
            /**
             * Reloads all data in all data tables, including embedded data tables and data sources set to store their data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ReloadAllData(): void;
            /**
             * Reloads all data in the specified data tables, including embedded data tables and data sources set to store their data.
             * @param tables The data tables to reload.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ReloadAllData(tables: OrExplicit<System.Collections.Generic.IEnumerable<DataTable>>): void;
            /**
             * Reloads only linked data in all data tables. Embedded data tables and data sources set to store their
             * data will be ignored.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ReloadLinkedData(): void;
            /**
             * Reloads only linked data in the specified data tables. Embedded data tables and data sources set to store their
             * data will be ignored.
             * @param tables The data tables to reload.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ReloadLinkedData(tables: OrExplicit<System.Collections.Generic.IEnumerable<DataTable>>): void;
            /**
             * Remove the dataTable from the collection.
             * @param dataTable The data table to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(dataTable: DataTable): void;
            /**
             * Remove the {@link Spotfire.Dxp.Data.DataTable} with the given name from the
             * collection.
             * @param tableName The table name.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Remove(tableName: (JsType<System.String> | System.String)): void;
            /**
             * Try to get a {@link Spotfire.Dxp.Data.DataTable} with a given id.
             * @param id The id of the data table to get.
             * @param dataTable The resulting {@link Spotfire.Dxp.Data.DataTable}, or null
             * if not found.
             * @returns True if the {@link Spotfire.Dxp.Data.DataTable} with the given id could be
             * found, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetValue(id: (JsType<System.Guid> | System.Guid), dataTable: OutParam<DataTable>): JsType<System.Boolean>;
            /**
             * Try to get a {@link Spotfire.Dxp.Data.DataTable} with a given name.
             * @param name The name of the data table to get.
             * @param dataTable The resulting {@link Spotfire.Dxp.Data.DataTable}, or null
             * if not found.
             * @returns True if the {@link Spotfire.Dxp.Data.DataTable} with the given name could be
             * found, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            TryGetValue(name: (JsType<System.String> | System.String), dataTable: OutParam<DataTable>): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataTable>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Gets the table with the given {@link System.Guid}id.
             * @param id The id of the table.
             * @returns The table with the given id.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: (PropertyGet<(JsType<System.String> | System.String), DataTable> & PropertyGet<(JsType<System.Guid> | System.Guid), DataTable>);
            private __type_3753110200: null;
        }
        
        /**
         * The collection of the properties (metadata) of a {@link Spotfire.Dxp.Data.DataTable}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataTableProperties extends Object {
            /**
             * Gets or sets the color of the data table. Note that this color
             * is the same for all the related tables.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Color(): JsType<System.Drawing.Color>;
            set Color(value: JsType<System.Drawing.Color>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Gets the value of a named property. Binary data properties are returned as UInt8Array.
             * @param propertyName The property name.
             * @returns The value of the property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Get(propertyName: (JsType<System.String> | System.String)): unknown;
            /**
             * Gets a value indicating whether the property has a value or not.
             * @param name The name of the property.
             * @returns True if the property has a value, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            HasPropertyValue(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Sets the value of a named property. Setting a binary data property expects the value to be an UInt8Array.
             * @param propertyName The property name.
             * @param value The value to set.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Set(propertyName: (JsType<System.String> | System.String), value: any): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3039689889: null;
        }
        
        /**
         * Save settings for a data table.
         * This can be added or retrieved from the {@link Spotfire.Dxp.Data.DataSaveSettings.DataTableSettings} list.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataTableSaveSettings extends Object {
            /**
             * Gets or sets a value indicating whether prompting should be performed when loading linked data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ReuseSettingsWithoutPrompting(): JsType<System.Boolean>;
            set ReuseSettingsWithoutPrompting(value: JsType<System.Boolean>);
            /**
             * Gets the table identifier.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TableId(): JsType<System.Guid>;
            /**
             * Gets or sets a value indicating whether the table should be stored as linked data if possible.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get UseLinkedData(): JsType<System.Boolean>;
            set UseLinkedData(value: JsType<System.Boolean>);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.DataTableSaveSettings} class.
             * Creates a DataTableSaveSettings for a given {@link Spotfire.Dxp.Data.DataTable}.
             * @param table The data table.
             * @param useLinkedData True if the table should be saved in linked mode is applicable.
             * @param reuseSettingsWithoutPrompting True if prompting should not be performed when loading linked data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(table: DataTable, useLinkedData: (JsType<System.Boolean> | System.Boolean), reuseSettingsWithoutPrompting: (JsType<System.Boolean> | System.Boolean));
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3095799708: null;
        }
        
        /**
         * Represents a transformation of data, when data is imported from a {@link Spotfire.Dxp.Data.DataSource}
         * it may optionally be transformed by one or more transformations. A transformation takes a {@link Spotfire.Dxp.Data.DataRowReader}
         * as input and a {@link Spotfire.Dxp.Data.DataRowReader} as output with the transformed rows.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataTransformation extends Object {
            /**
             * Gets the display name of the transformation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            /**
             * Gets the type identifier for the data source.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TypeId(): Framework.DocumentModel.TypeIdentifier;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Connects to the input reader.
             * A {@link Spotfire.Dxp.Data.DataRowReader} can then be retrieved from the {@link Spotfire.Dxp.Data.DataTransformationConnection}.
             * @param importContext The import context.
             * @param input The input reader.
             * @returns The connected transformation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Connect(importContext: Import.ImportContext, input: DataRowReader): DataTransformationConnection;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_861726951: null;
        }
        
        /**
         * Represents a connected {@link Spotfire.Dxp.Data.DataTransformation}. The connection
         * is created when the transformation is bound to a {@link Spotfire.Dxp.Data.DataRowReader}
         * that is used as input to the transformation.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataTransformationConnection extends Object {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Synonym for Dispose.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Close(): void;
            /**
             * Disposes of the connection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Dispose(): void;
            /**
             * Performs prompting for all the prompt models and after that is finished the transformation
             * is executed and the resulting {@link Spotfire.Dxp.Data.DataRowReader} is returned.
             * @returns A new {@link Spotfire.Dxp.Data.DataRowReader} instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ExecuteTransformation(): DataRowReader;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2691386917: null;
        }
        
        /**
         * This class contains information about a Spotfire data type and the properties of that data type.
         * This is an enumeration class with one static instance for each of the supported data types.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataType extends Object {
            /**
             * Gets the available data types.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static get AvailableDataTypes(): System.Collections.Generic.IList<DataType>;
            /**
             * Gets the default comparer for this DataType.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DefaultComparer(): JsType<System.Collections.IComparer>;
            /**
             * Gets the default value for the underlying type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DefaultValue(): unknown;
            /**
             * Gets a default, user localized, read-only formatter for this data type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Formatter(): Formatters.IDataFormatter;
            /**
             * Gets a read-only formatter for this data type that does invariant formatting.
             * This formatting is independent of localization and uses {@link System.Globalization.CultureInfo.InvariantCulture}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get InvariantFormatter(): Formatters.DataFormatterBase;
            /**
             * Gets a value indicating whether the data type is numeric or not,
             * that is, Integer,
             * Currency, Real, LongInteger or SingleReal
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsNumeric(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the data type is considered simple or not.
             * E.g. String and int (etc) are simple, Binary is not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsSimple(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the data type represents time or not,
             * that is, Date, Time or DateTime.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsTime(): JsType<System.Boolean>;
            /**
             * Gets the type name.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            /**
             * Gets a null (empty) value for the underlying type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NullValue(): unknown;
            /**
             * Gets the representation type of the data type. This is the .NET type that
             * values of this data type are stored as.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RepresentationType(): JsType<System.Type>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Converts a DataSourceDataType to a DataType.
             * @param type The DataSourceDataType-type.
             * @returns The DataType.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static FromExternalDataType(type: InformationModel.ExternalDataType): DataType;
            /**
             * Converts the type from an import source to the DataType used
             * in the Data Manager.
             * @param type The import source .Net-type.
             * @returns The converted DataType, DataType.Undefined if no conversion was possible.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static FromImportType(type: (JsType<System.Type> | System.Type)): DataType;
            /**
             * Looks up a data type by name.
             * @param name The type name.
             * @returns The data type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static FromName(name: (JsType<System.String> | System.String)): DataType;
            /**
             * Gets the DataType with the given name.
             * @param name Name representation for a DataType.
             * @returns The DataType with the given name, or {@link Spotfire.Dxp.Data.DataType.Undefined} if corresponding type not found.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static GetDataType(name: (JsType<System.String> | System.String)): DataType;
            /**
             * Converts a value from a numeric (double) representation, to the value representation
             * defined by dataType.
             * @param numericValue A numeric value.
             * @param value The converted value.
             * @param dataType A data type that determines the type of the converted value.
             * @returns true if conversion was possible; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static TryConvertFromNumeric(numericValue: (JsType<System.Double> | System.Double), value: OutParam<System.Object>, dataType: DataType): JsType<System.Boolean>;
            /**
             * Converts a value to a numeric (double) representation.
             * @param value A value of any type.
             * @param numericValue The converted numeric value.
             * @returns true if conversion was possible; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static TryConvertToNumeric(value: any, numericValue: OutParam<System.Double>): JsType<System.Boolean>;
            /**
             * Creates a culture specific formatter for this data type.
             * 
             * 
             * A formatter may configured by casting it to the corresponding
             * formatter class. For numeric types (DataType.Integer,
             * DataType.Long and DataType.Real) the formatter class
             * is {@link Spotfire.Dxp.Data.Formatters.NumberFormatter}. For date/time types
             * (DataType.Date, DataType.Time and
             * DataType.DateTime it is {@link Spotfire.Dxp.Data.Formatters.DateTimeFormatter}.
             * The formatter class for DataType.String is
             * {@link Spotfire.Dxp.Data.Formatters.StringFormatter}.
             * @param cultureName The name of the culture for this formatter.
             * @returns A formatter.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CreateCultureSpecificFormatter(cultureName: (JsType<System.String> | System.String)): Formatters.DataFormatterBase;
            /**
             * Creates a user localized formatter for this data type.
             * 
             * 
             * A formatter may configured by casting it to the corresponding
             * formatter class. For numeric types (DataType.Integer,
             * DataType.Long and DataType.Real) the formatter class
             * is {@link Spotfire.Dxp.Data.Formatters.NumberFormatter}. For date/time types
             * (DataType.Date, DataType.Time and
             * DataType.DateTime it is {@link Spotfire.Dxp.Data.Formatters.DateTimeFormatter}.
             * The formatter class for DataType.String is
             * {@link Spotfire.Dxp.Data.Formatters.StringFormatter}.
             * @returns A formatter.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CreateLocalizedFormatter(): Formatters.IDataFormatter;
            /**
             * Validates a value with the representation type.
             * @param value The value to validate.
             * @param error Contains an error description if the result was false.
             * @returns true if the value is valid; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Validate(value: any, error: OutParam<System.String>): JsType<System.Boolean>;
            /**
             * Binary type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Binary: DataType;
            /**
             * Boolean type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Boolean: DataType;
            /**
             * Currency type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Currency: DataType;
            /**
             * Date type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Date: DataType;
            /**
             * DateTime type (both date and a time stamp).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly DateTime: DataType;
            /**
             * Integer type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Integer: DataType;
            /**
             * Long integer type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly LongInteger: DataType;
            /**
             * Real (double) type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Real: DataType;
            /**
             * Short Real (float) type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly SingleReal: DataType;
            /**
             * String type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly String: DataType;
            /**
             * Timestamp type (not including date).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Time: DataType;
            /**
             * Time span type.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly TimeSpan: DataType;
            /**
             * Undefined type. This is not a real data type but can be used
             * in some places when any type is acceptable.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly Undefined: DataType;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2293631912: null;
        }
        
        /**
         * An abstract base class for flyweight data value containers. More precisely, a DataValue instance contains
         * a value of a particular DataType, and thus every DataValue has a corresponding DataType. (This is not
         * necessarily true for the methods marked Obsolete in this class.) Instances of the generic subclass are
         * normally used, often explicitly, and this non-generic base class is provided only for convenience in
         * contexts where the generic type is not known, or variable. Note that this class is intended as a flyweight,
         * that is, as a reusable container. This means that it is not optimized for memory and is unsuitable for
         * representing arrays or matrices of data values, where a separate DataValue instance is used for each cell.
         * Consider using a more compact representation of the values for such purposes. The DataValue class is not
         * serializable and should not be used for persistent storage.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataValue extends Object {
            /**
             * Gets the data type corresponding to the runtime values that can be stored in this value container.
             * The data type is fixed, since a data value cannot be used for values of varying types.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataType(): DataType;
            /**
             * Gets a value indicating whether this DataValue contains a valid value.
             * If HasValidValue is false, then either IsNullValue is true or HasDataError is true, but not both.
             * If HasValidValue is true, the IsNullValue and HasDataError are both false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HasValidValue(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether this DataValue instance represents a null value,
             * or, more precisely, an invalid value with a null data error.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsNullValue(): JsType<System.Boolean>;
            /**
             * Gets or sets the runtime value contained in this DataValue instance, as a boxed value.
             * The getter returns null for reference types and default(T) for value types, if the HasValidValue is false.
             * After setting a valid value HasValidValue will be true, HasDataError and IsNullValue will be false,
             * and DataError will return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ValidValue(): unknown;
            set ValidValue(value: unknown);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Creates a DataValue instance of a given data type.
             * @param dataType A non-null DataType instance.
             * @returns A new DataValue instance of the given type, initially set to a null value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Create(dataType: DataType): DataValue;
            /**
             * Creates a DataValue instance of a given runtime type.
             * @returns A new DataValue instance of the given type, initially set to a null value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            static Create<T>(typeT: TypeRefParam<T>): DataValueGeneric<T>;
            /**
             * Creates a DataValue instance of a given data type and with a provided initial value.
             * @param dataType A non-null DataType instance.
             * @param initialValue The value. If null, the initial value will be null.
             * @returns A new DataValue instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Create(dataType: DataType, initialValue: any): DataValue;
            /**
             * Creates a DataValue instance of a given runtime type and with a provided initial value.
             * @param initialValue The initial value. If null, then IsNullValue will be true.
             * @returns A new DataValue instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            static Create<T>(typeT: TypeRefParam<T>, initialValue: (JsType<T> | T)): DataValueGeneric<T>;
            /**
             * Creates a DataValue instance of a given runtime type and with a provided initial value.
             * This method is redundant but useful in practice.
             * @param initialValue The initial value. If null, then IsNullValue will be true.
             * @param isValid If true, the initial value is valid. If false, the initial value should
             * not be used, and IsNullValue will be set to true.
             * @returns A new DataValue instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            static Create<T>(typeT: TypeRefParam<T>, initialValue: (JsType<T> | T), isValid: (JsType<System.Boolean> | System.Boolean)): DataValueGeneric<T>;
            /**
             * Sets this DataValue instance equal to another DataValue instance.
             * @param other The other DataValue.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AssignFrom(other: DataValue): void;
            /**
             * Creates a copy of this instance.
             * @returns A copy of this instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Clone(): DataValue;
            /**
             * Makes this DataValue instance represent a null value. That is, an invalid value with a null
             * data error. After the method call, HasValidValue will return false, IsNullValue will return true,
             * and HasDataError will return false. The ValidValue property will be null or default(T).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            SetNullValue(): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_695933337: null;
        }
        
        /**
         * A collection of the row values in a {@link Spotfire.Dxp.Data.IDataColumn}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataValueCollection extends Object {
            /**
             * Gets the comparer which should be used to compare row values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Comparer(): JsType<System.Collections.IComparer>;
            /**
             * Gets the number of values in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * Gets the data type of the values in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataType(): DataType;
            /**
             * Gets the formatter which should be used for format row values..
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Formatter(): Formatters.IDataFormatter;
            /**
             * Gets the invalid rows in the collection, as an {@link Spotfire.Dxp.Data.IndexSet}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get InvalidRows(): IndexSet;
            /**
             * Gets the valid rows in the collection, as an {@link Spotfire.Dxp.Data.IndexSet}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ValidRows(): IndexSet;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Finds the minimum and maximum numeric values in a subset of the rows.
             * @param rowIndexes The row indexes.
             * @returns The minimum and maximum as a {@link Spotfire.Dxp.Data.Range}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            FindNumericRange(rowIndexes: IndexSet): Range;
            /**
             * Finds all rows with values in a given numeric range.
             * @param range A numeric {@link Spotfire.Dxp.Data.Range}.
             * @param includeEmpty If true, include invalid values; otherwise, do not.
             * @returns The indexes of the found rows, as an {@link Spotfire.Dxp.Data.IndexSet}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            FindRowsInNumericRange(range: Range, includeEmpty: (JsType<System.Boolean> | System.Boolean)): IndexSet;
            /**
             * Enumerate over all the data value in the collection.
             * @returns An enumerator over all values in the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<DataValue>;
            /**
             * Gets the maximum numeric value in a subset of the rows.
             * @param rowIndexes The subset of the rows.
             * @returns The maximum numeric value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetMaxNumericValue(rowIndexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): DataValueGeneric<JsType<System.Double>>;
            /**
             * Gets the maximum value of all the rows.
             * @returns The maximum value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetMaxValue(): DataValue;
            /**
             * Gets the maximum value in a subset of the rows.
             * @param rowIndexes The subset of the rows.
             * @returns The maximum value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetMaxValue(rowIndexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): DataValue;
            /**
             * Gets the minimum numeric value within in a subset of the rows.
             * @param rowIndexes The subset of the rows.
             * @returns The minimum numeric value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetMinNumericValue(rowIndexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): DataValueGeneric<JsType<System.Double>>;
            /**
             * Gets the minimum value of all the rows.
             * @returns The minimum value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetMinValue(): DataValue;
            /**
             * Gets the minimum value in a subset of the rows.
             * @param rowIndexes The subset of the rows.
             * @returns The minimum value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetMinValue(rowIndexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): DataValue;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1158742471: null;
        }
        
        /**
         * Non-generic cursor class for efficient enumeration of data values.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataValueCursor extends Object {
            /**
             * Gets the data value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CurrentDataValue(): DataValue;
            /**
             * Gets a value indicating whether the current value is valid or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsCurrentValueValid(): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Creates a non-generic value cursor for a given column.
             * @param column The column.
             * @returns A value cursor.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Create(column: DataColumn): DataValueCursor;
            /**
             * Creates a generic value cursor for a given column.
             * @param column The column.
             * @returns A value cursor.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            static Create<T>(typeT: TypeRefParam<T>, column: IDataColumn): DataValueCursorGeneric<T>;
            /**
             * Creates a generic value cursor for a given column.
             * @param column The column.
             * @param checkValidity True if a validity check should be performed.
             * @returns A value cursor.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            static Create<T>(typeT: TypeRefParam<T>, column: IDataColumn, checkValidity: (JsType<System.Boolean> | System.Boolean)): DataValueCursorGeneric<T>;
            /**
             * Creates a value cursor for the formatted values of a given column.
             * @param column The column.
             * @returns A value cursor.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateFormatted(column: IDataColumn): DataValueCursorGeneric<JsType<System.String>>;
            /**
             * Creates a value cursor for the formatted values of a given column.
             * @param column The column.
             * @param formatter The formatter to use. Note that this is useless if column is a hierarchy since
             * the individual level formatters are used then.
             * @returns A value cursor.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateFormatted(column: IDataColumn, formatter: Formatters.IDataFormatter): DataValueCursorGeneric<JsType<System.String>>;
            /**
             * Creates a value cursor for the numeric values of a given column.
             * @param column The column.
             * @returns A value cursor.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateNumeric(column: IDataColumn): DataValueCursorGeneric<JsType<System.Double>>;
            /**
             * Creates a value cursor for the numeric values of a given column.
             * @param column The column.
             * @param checkValidity True if a check for validity should be performed.
             * @returns A value cursor.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateNumeric(column: IDataColumn, checkValidity: (JsType<System.Boolean> | System.Boolean)): DataValueCursorGeneric<JsType<System.Double>>;
            /**
             * Creates a value cursor for DateTime values of a given column.
             * @param column The column.
             * @returns A value cursor.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateTime(column: IDataColumn): DataValueCursorGeneric<JsType<System.DateTime>>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2977375183: null;
        }
        
        /**
         * Generic cursor class for efficient enumeration of data values.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataValueCursorGeneric<T> extends DataValueCursor {
            /**
             * Gets the current value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get CurrentValue(): JsType<T>;
            /**
             * Gets a value indicating whether the current value is valid; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsCurrentValueValid(): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2135087082: null;
        }
        
        /**
         * Generic flyweight data value container.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataValueGeneric<T> extends DataValue {
            /**
             * Gets the data type corresponding to the runtime values that can be stored in this value container.
             * The data type is fixed, since a data value cannot be used for values of varying types.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataType(): DataType;
            /**
             * Gets a value indicating whether this DataValue contains a valid value.
             * If HasValidValue is false, then either IsNullValue is true or HasDataError is true, but not both.
             * If HasValidValue is true, the IsNullValue and HasDataError are both false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HasValidValue(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether this DataValue instance represents a null value,
             * or, more precisely, an invalid value with a null data error.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsNullValue(): JsType<System.Boolean>;
            /**
             * Gets or sets the valid value contained in this DataValue instance.
             * A default value is returned if there is no valid value.
             * After setting a valid value HasValidValue will be true, HasDataError and IsNullValue will be false,
             * and DataError will return null.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ValidValue(): JsType<T>;
            set ValidValue(value: JsType<T>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_357558700: null;
        }
        
        /**
         * A class holding properties for a data value.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DataValueProperties extends Object {
            /**
             * Gets the content type for the data value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ContentType(): JsType<System.String>;
            /**
             * Gets the data type of the data value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get DataType(): DataType;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Determines whether the specified object is equal to the current object.
             * @param obj The object to compare with the current object.
             * @returns true if the specified object  is equal to the current object; otherwise, false.
             */
            Equals(obj: any): JsType<System.Boolean>;
            /**
             * Indicates whether the current object is equal to another object of the same type.
             * @param other An object to compare with this object.
             * @returns true if the current object is equal to the other parameter; otherwise, false.
             */
            Equals(other: DataValueProperties): JsType<System.Boolean>;
            /**
             * Gets the value of a named property.
             * @param propertyName The name of the property.
             * @returns The property value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetPropertyValue(propertyName: (JsType<System.String> | System.String)): unknown;
            /**
             * Checks whether a property with a given name exists.
             * @param propertyName The name of the property.
             * @returns true if the property exists, false otherwise.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            HasPropertyValue(propertyName: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1546346696: null;
        }
        
        /**
         * Settings for how to display data column values in filters and categorical axes.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DisplayValueSettings extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets or sets the expression that computes the display values of the data column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Expression(): JsType<System.String>;
            set Expression(value: JsType<System.String>);
            /**
             * Gets or sets the sorting mode for the display values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get SortMode(): DisplayValueSortMode;
            set SortMode(value: DisplayValueSortMode);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_1606500390: null;
        }
        
        /**
         * Defines how display values in a data column are sorted in filters and categorical axes.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DisplayValueSortMode extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** Sort according to the underlying data values. */
            static readonly DataValues: DisplayValueSortMode;
            /** Sort according to the display values. */
            static readonly DisplayValues: DisplayValueSortMode;
            private __type_4005726304: null;
        }
        
        /**
         * A wrapper class that holds a value that can occur in the column of a data table.
         * The class provides equality and an ordering of the values even if they are of different underlying types.
         * Values of the class can therefore be used in UndoableList and UndoableDictionary.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class DistinctDataValue extends Object {
            /**
             * Gets the value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Value(): unknown;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.DistinctDataValue} class.
             * The value must be of a type that can be stored in the column of a data table.
             * @param value The underlying value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(value: any);
            /**
             * Compares the current object to another {@link Spotfire.Dxp.Data.DistinctDataValue}.
             * @param other An {@link Spotfire.Dxp.Data.DistinctDataValue} to compare with this object.
             * @returns A 32-bit signed integer that indicates the relative order of the objects being compared.
             * The return value has the following meanings: A Value Less than zero; This object is less than the other parameter.
             * Zero; This object is equal to other. Greater than zero; This object is greater than other.
             * 
             * DistinctDataValues constructed from objects of different type will not be considered equal and never return zero.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CompareTo(other: DistinctDataValue): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3692728555: null;
        }
        
        /**
         * @ignore
         * @@Helper class with property accessors to express interface types when casting.
         */
        abstract class Formatters {
            /** @@Type reference for casting to {{@link Spotfire.Dxp.Data.Formatters.IDataFormatter}. */
            static get IDataFormatter(): TypeRef<Formatters.IDataFormatter>;
        }
        
        /**
         * An instance of this class can be retrieved from a
         * {@link Spotfire.Dxp.Data.DataColumn} using the {@link Spotfire.Dxp.Data.DataColumn.As} method when the column type
         * of the {@link Spotfire.Dxp.Data.DataColumn} is Hierarchy. This class is used for
         * modifying the hierarchy column.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class HierarchyColumn extends Object {
            /**
             * Gets or sets the definition for the hierarchy column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get HierarchyDefinition(): HierarchyDefinition;
            set HierarchyDefinition(value: HierarchyDefinition);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2314470539: null;
        }
        
        /**
         * This is a definition of a hierarchy.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class HierarchyDefinition extends Object {
            /**
             * Gets the expressions for the levels in the hierarchy.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get LevelExpressions(): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Gets the hierarchy nesting mode.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NestingMode(): HierarchyNestingMode;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.HierarchyDefinition} class.
             * Create a new hierarchy definition.
             * @param nestingMode The nesting mode.
             * @param levelExpressions The expressions for the levels
             * in the hierarchy. This is the same syntax as calculated columns, see the
             * {@link Spotfire.Dxp.Data.Expressions.ColumnExpression} class for utility methods.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(nestingMode: HierarchyNestingMode, levelExpressions: OrExplicit<System.Collections.Generic.IList<(JsType<System.String> | System.String)>>);
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3793137590: null;
        }
        
        /**
         * Determines how each level in the Hierarchy should relate
         * to the next level.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class HierarchyNestingMode extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Each node has all possible children that exists in the
             * next level. This means that for some nodes where will be not be
             * any rows mapped.
             */
            static readonly Cross: HierarchyNestingMode;
            /** Each node only has children that actually exists in the data. */
            static readonly Nested: HierarchyNestingMode;
            private __type_3805757232: null;
        }
        
        /**
         * This is a highlight selection, it changes when the user moves the
         * mouse cursor over the plots. A highlight selection
         * is a special kind of selection which should only be used from user
         * interface code and the events from this selection can only be received by
         * external event handlers.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class HighlightSelection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_781974570: null;
        }
        
        /**
         * A bitset-like class that represents a collection of indices,
         * typically a subset of the rows in a {@link Spotfire.Dxp.Data.IDataColumn} or similar.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class IndexSet extends Object implements Explicit<System.Collections.Generic.IEnumerable<System.Int32>>, Explicit<System.Collections.IEnumerable> {
            /**
             * Controls the total number of indexes that
             * the IndexSet can hold
             * (numbered 0 to Capacity-1)
             * Setting capacity will clear the IndexSet.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Capacity(): JsType<System.Int32>;
            set Capacity(value: JsType<System.Int32>);
            /**
             * Number of indexes currently in the set.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Count(): JsType<System.Int32>;
            /**
             * Gets the first index in the IndexSet.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get First(): JsType<System.Int32>;
            /**
             * True if the set has no indexes (Count == 0).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsEmpty(): JsType<System.Boolean>;
            /**
             * True if the all indexes are in the set (Count == Capacity).
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsFull(): JsType<System.Boolean>;
            /**
             * Tells if this IndexSet is read-only.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsReadOnly(): JsType<System.Boolean>;
            /**
             * Gets the last index in the IndexSet.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Last(): JsType<System.Int32>;
            /**
             * Creates an empty IndexSet.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor();
            /**
             * Creates an IndexSet as a copy of another IndexSet.
             * @param that The IndexSet to be copied.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(that: IndexSet);
            /**
             * Creates an IndexSet with the specified capacity.
             * @param capacity The maximum capacity.
             * @param filled If true, all indices will initially be marked as present.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(capacity: (JsType<System.Int32> | System.Int32), filled: (JsType<System.Boolean> | System.Boolean));
            /**
             * Creates an IndexSet with specified capacity and initial content.
             * @param capacity The maximum capacity.
             * @param includedIndexes The initial content.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(capacity: (JsType<System.Int32> | System.Int32), includedIndexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>);
            [Symbol.iterator](): Iterator<JsType<System.Int32>>;
            /**
             * Returns a new IndexSet that is a logical AND between two IndexSet.
             * @param set1 The first IndexSet.
             * @param set2 The second IndexSet.
             * @returns A new IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static And(set1: IndexSet, set2: IndexSet): IndexSet;
            /**
             * Returns a new IndexSet that is the complement of the specified source set.
             * Any index that is included in the source set will be excluded and vice versa.
             * @param set The source IndexSet.
             * @returns A new IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Not(set: IndexSet): IndexSet;
            /**
             * Returns a new IndexSet that is a logical OR between two IndexSet.
             * @param set1 The first IndexSet.
             * @param set2 The second IndexSet.
             * @returns A new IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Or(set1: IndexSet, set2: IndexSet): IndexSet;
            /**
             * Returns a new IndexSet that is a subtraction between two IndexSet.
             * In other words, the new IndexSet is a copy of
             * set1 without the indexes in
             * set2.
             * @param set1 The first IndexSet.
             * @param set2 The second IndexSet.
             * @returns A new IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Subtract(set1: IndexSet, set2: IndexSet): IndexSet;
            /**
             * Returns a new IndexSet that is a logical XOR between two IndexSet.
             * @param set1 The first IndexSet.
             * @param set2 The second IndexSet.
             * @returns A new IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Xor(set1: IndexSet, set2: IndexSet): IndexSet;
            /**
             * Adds the index to the set. If the index is already in the set,
             * nothing is changed.
             * @param index Index
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddIndex(index: (JsType<System.Int32> | System.Int32)): void;
            /**
             * Adds the specified indexes to the set.
             * @param indexes The indexes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddIndexes(indexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): void;
            /**
             * Adds a range of indexes to the set.
             * @param startIndex First index in the range
             * @param count Number of indexes in the range
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddIndexes(startIndex: (JsType<System.Int32> | System.Int32), count: (JsType<System.Int32> | System.Int32)): void;
            /**
             * Performs a logical AND between this and that IndexSet.
             * 
             * <b>Note:</b> the method changes the internal state
             * of this IndexSet
             * @param that The IndexSet to AND with
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            And(that: IndexSet): IndexSet;
            /**
             * Returns this if read-only, otherwise a read-only clone.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AsReadOnly(): IndexSet;
            /**
             * Copies the content of the specified IndexSet into this
             * one.
             * @param that The IndexSet to assign from
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Assign(that: IndexSet): IndexSet;
            /**
             * Assigns the indexes from the specified array of
             * indexes encoded as bits.
             * The length of the bits array must be
             * (capacity + 31)/32. Bits outside of capacity in the last array element are ignored.
             * @param capacity IndexSet capacity
             * @param bits Array of 32-bit words
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Assign(capacity: (JsType<System.Int32> | System.Int32), bits: (TypedArray<JsType<System.UInt32>> | TypedArray<System.UInt32>)): IndexSet;
            /**
             * Copies the complement of the specified IndexSet into this
             * one. In other words, this IndexSet will contain the
             * indexes NOT in that IndexSet.
             * @param that The IndexSet to assign from
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AssignComplement(that: IndexSet): IndexSet;
            /**
             * Returns a clone if this is read-only, otherwise this.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AsWritable(): IndexSet;
            /**
             * Removes all indexes from the set.
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Clear(): IndexSet;
            /**
             * Creates a writable copy of this IndexSet.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Clone(): IndexSet;
            /**
             * Determines whether this IndexSet contains all indexes of
             * that IndexSet.
             * @param that The IndexSet to test against
             * @returns true is that set is a sub set of this set; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(that: IndexSet): JsType<System.Boolean>;
            /**
             * Copies the indexes in the set to the array starting
             * at the offset.
             * @param array Int32 array
             * @param index Array offset
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CopyTo(array: (TypedArray<JsType<System.Int32>> | TypedArray<System.Int32>), index: (JsType<System.Int32> | System.Int32)): void;
            /**
             * Deletes a range of index positions. Existing indexes from
             * startIndex+count and above are moved down.
             * @param startIndex First index position to be deleted
             * @param count Number of index positions
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            DeleteIndexPositions(startIndex: (JsType<System.Int32> | System.Int32), count: (JsType<System.Int32> | System.Int32)): void;
            /**
             * Determines whether the specified object is equal to the current object.
             * @param obj The object to compare with the current object.
             * @returns true if the specified object  is equal to the current object; otherwise, false.
             */
            Equals(obj: any): JsType<System.Boolean>;
            /**
             * Tests if this IndexSet and that IndexSet have the same Capacity and
             * contain exactly the same indexes.
             * @param that The IndexSet to compare against
             * @returns True if the sets are equal
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Equals(that: IndexSet): JsType<System.Boolean>;
            /**
             * Adds all indexes (as defined by Capacity) to the set.
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Fill(): IndexSet;
            /**
             * Fills the specified array with the indexes encoded as
             * bits. The length of the bits array must be
             * (Capacity + 31)/32.
             * @param bits Array of 32-bit words
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetBits(bits: (TypedArray<JsType<System.UInt32>> | TypedArray<System.UInt32>)): void;
            /**
             * Returns an enumerator for the IndexSet.
             * @returns IndexSet.Enumerator
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetEnumerator(): System.Collections.Generic.IEnumerator<JsType<System.Int32>>;
            /**
             * Gets the index after the specified one.
             * @param index The index.
             * @returns Next index, or -1.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetNextIndex(index: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
            /**
             * Gets the index before the specified one.
             * @param index The index.
             * @returns Previous index, or -1.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetPreviousIndex(index: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
            /**
             * Gets the number of indexes in a subset defined by the startIndex
             * and endIndex arguments.
             * @param startIndex Start index in subset.
             * @param endIndex End index in subset.
             * @returns Number of indexes in subset.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetSubsetCount(startIndex: (JsType<System.Int32> | System.Int32), endIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
            /**
             * Returns a bool indicating if the index is a member of the set.
             * @param index Index
             * @returns True if the index is a member of the set
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            HasIndex(index: (JsType<System.Int32> | System.Int32)): JsType<System.Boolean>;
            /**
             * Makes room for more indexes. Existing indexes
             * from startIndex and above are moved up.
             * @param startIndex First new index position
             * @param count Number of new index positions
             * @param add Add the new indexes to the set
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            InsertIndexPositions(startIndex: (JsType<System.Int32> | System.Int32), count: (JsType<System.Int32> | System.Int32), add: (JsType<System.Boolean> | System.Boolean)): void;
            /**
             * Determines whether this and that IndexSet have any
             * indexes in common.
             * @param that The IndexSet to test against
             * @returns true is the sets intersect; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Intersects(that: IndexSet): JsType<System.Boolean>;
            /**
             * Inverts the set. Any index that was included in the set
             * will be excluded and vice versa.
             * 
             * <b>Note:</b> the method changes the internal state
             * of this IndexSet
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Not(): IndexSet;
            /**
             * Gets the Nth smallest index.
             * <b>Caution:</b> This method is slow (linear time), so you must ensure that your
             * algorithm (or the one using your algorithm) never calls this method
             * many times, which could result in quadratic time.
             * @param indexOrdinalNumber Index ordinal number. The valid range is 1 to Count.
             * @returns The index with the specified ordinal number.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            NthSmallestIndex(indexOrdinalNumber: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
            /**
             * Performs a logical OR between this and that IndexSet.
             * 
             * <b>Note:</b> the method changes the internal state
             * of this IndexSet
             * @param that The IndexSet to OR with
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Or(that: IndexSet): IndexSet;
            /**
             * Removes the index from the set. If the index is not in the set,
             * nothing is changed.
             * @param index Index
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveIndex(index: (JsType<System.Int32> | System.Int32)): void;
            /**
             * Removes the specified indexes from the set.
             * @param indexes The indexes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveIndexes(indexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>): void;
            /**
             * Removes a range of indexes from the set.
             * @param startIndex First index in the range
             * @param count Number of indexes in the range
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveIndexes(startIndex: (JsType<System.Int32> | System.Int32), count: (JsType<System.Int32> | System.Int32)): void;
            /**
             * Sets this IndexSet to read-only.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            SetReadOnly(): IndexSet;
            /**
             * Subtracts that IndexSet from this one. In other words,
             * the indexes in that IndexSet are removed from this.
             * 
             * <b>Note:</b> the method changes the internal state
             * of this IndexSet
             * @param that The IndexSet to subtract
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Subtract(that: IndexSet): IndexSet;
            /**
             * Performs a logical XOR between this and that IndexSet.
             * 
             * <b>Note:</b> the method changes the internal state
             * of this IndexSet
             * @param that The IndexSet to XOR with
             * @returns This modified IndexSet
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Xor(that: IndexSet): IndexSet;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<System.Int32>>,
                System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
            };
            /**
             * Indexer. Returns a bool indicating if the index is a member of the set.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), JsType<System.Boolean>> & PropertySet<(JsType<System.Int32> | System.Int32), (JsType<System.Boolean> | System.Boolean)>);
            private __type_1817665692: null;
        }
        
        /**
         * Describes which join type that should be used when joining
         * two tables into a new table.
         * This is used in the {@link Spotfire.Dxp.Data.AddColumnsSettings} class to specify how
         * the join should be performed.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class JoinType extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * A full outer join combines the results of both left and
             * right outer joins.
             */
            static readonly FullOuterJoin: JoinType;
            /**
             * An inner join will produce the intersection between the
             * two tables.
             */
            static readonly InnerJoin: JoinType;
            /**
             * A left outer join will preserve all rows from the left
             * view and filter out all non matching rows from the right view.
             */
            static readonly LeftOuterJoin: JoinType;
            /**
             * Similar to a left outer join but in case of duplicate matches, only one of the
             * right rows are selected. It is undefined which row that gets selected.
             */
            static readonly LeftSingleMatchJoin: JoinType;
            /**
             * A right outer join will preserve all rows from the right
             * tables and filter out all non matching rows from the left tables.
             */
            static readonly RightOuterJoin: JoinType;
            /**
             * Similar to a right outer join but in case of duplicate matches, only one of the
             * left rows are selected. It is undefined which row that gets selected.
             */
            static readonly RightSingleMatchJoin: JoinType;
            private __type_1466843732: null;
        }
        
        /**
         * Defines alternatives for visualization of empty data selections.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class LimitingMarkingsEmptyBehavior extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** Visualization of empty selection should result in a plot showing all data. */
            static readonly ShowAll: LimitingMarkingsEmptyBehavior;
            /** Visualization of empty selection should result in an empty plot. */
            static readonly ShowEmpty: LimitingMarkingsEmptyBehavior;
            /** Visualization of empty selection should result in an empty plot with a message. */
            static readonly ShowMessage: LimitingMarkingsEmptyBehavior;
            private __type_1646040560: null;
        }
        
        /**
         * Provides static utility methods for validating and creating strings
         * representing names.<br />
         * These methods should be used when creating names for elements in the
         * data manager, like a data table or a data column.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class NameString extends Object {
            /**
             * Gets the maximum length of a name string.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static get MaxLength(): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Tests if two unnormalized strings represent the same name.
             * @param s1 The first string.
             * @param s2 The second string.
             * @returns True if the strings are equivalent.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static AreEquivalentNameStrings(s1: (JsType<System.String> | System.String), s2: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Normalizes a name string by trimming at both ends
             * and converting to Unicode normal form C.
             * @param name The string to be normalized.
             * @returns The normalized string.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static AsNormalizedNameString(name: (JsType<System.String> | System.String)): JsType<System.String>;
            /**
             * Makes a suggested name string unique within a collection
             * by appending a suffix. Truncates the suggested name if it is too long
             * for a name string, and normalizes the name.
             * @param suggestedName The suggested name.
             * @param takenNames The set of names.
             * @returns A unique name string.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateUniqueName(suggestedName: (JsType<System.String> | System.String), takenNames: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.String> | System.String)>>): JsType<System.String>;
            /**
             * Creates a collection of unique and normalized name strings
             * from a given set of original names.
             * @param defaultName The name to use for null or empty names.
             * @param originalNames The original names.
             * @returns A list of normalized and unique name strings.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static CreateUniqueNameCollection(defaultName: (JsType<System.String> | System.String), originalNames: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.String> | System.String)>>): System.Collections.Generic.IList<JsType<System.String>>;
            /**
             * Checks if a string can be used as a valid name.
             * @param nameCandidate The string.
             * @returns True if the string is not empty or too long.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static IsValidName(nameCandidate: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Checks if an input string can be used as a name.
             * @param suggestedName The suggested name.
             * @param takenNames The set of taken names.
             * @returns True if okay.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static IsValidUniqueName(suggestedName: (JsType<System.String> | System.String), takenNames: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.String> | System.String)>>): JsType<System.Boolean>;
            /**
             * Validates the name of a custom {@link Spotfire.Dxp.Data.DataProperty}.
             * @param propertyName Name of the property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static ValidateCustomPropertyName(propertyName: (JsType<System.String> | System.String)): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_4029962006: null;
        }
        
        /**
         * A mapping between the rows in the column/table and the
         * nodes in a hierarchy level.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class NodeToRowIndexMap extends Object {
            /**
             * Gets the number of nodes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get NodeCount(): JsType<System.Int32>;
            /**
             * Gets the number of rows in the column/table that the
             * hierarchy is based on.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get RowCount(): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Get the node that the row maps to.
             * @param rowIndex The row index.
             * @returns The node index that the row maps to.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetNodeIndex(rowIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
            /**
             * Get the node indexes that the rows maps to.
             * @param rowIndexes The row indexes.
             * @returns The node indexes that the rows maps to.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetNodeIndexes(rowIndexes: IndexSet): IndexSet;
            /**
             * Get the first row index that the node maps to.
             * @param nodeIndex The node index.
             * @returns The first row index that the node maps to.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetRowIndex(nodeIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
            /**
             * Get the row indexes that the node maps to.
             * @param nodeIndex The node index.
             * @returns The row indexes that the node maps to.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetRowIndexes(nodeIndex: (JsType<System.Int32> | System.Int32)): IndexSet;
            /**
             * Get the row indexes that the nodes maps to.
             * @param nodeIndexes The node indexes.
             * @returns The row indexes that the nodes maps to.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetRowIndexes(nodeIndexes: IndexSet): IndexSet;
            /**
             * Get the number of rows for the given node index.
             * @param nodeIndex The node index.
             * @returns The number of rows that corresponds to the given
             * node index.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetRowOccurrenceCount(nodeIndex: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_4065724245: null;
        }
        
        /**
         * This is a wrapper class around a {@link Spotfire.Dxp.Data.PersistentDataView.DataView} which
         * performs the code for serializing the {@link Spotfire.Dxp.Data.PersistentDataView.DataView} since a
         * data view is not possible to persist.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class PersistentDataView extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
            /**
             * Gets or sets a value indicating how the data marking selections shall be combined to limit
             * the data show by the visualization.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get MarkingCombinationMethod(): DataSelectionCombinationMethod;
            set MarkingCombinationMethod(value: DataSelectionCombinationMethod);
            /**
             * Gets or sets the name of the view.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Name(): JsType<System.String>;
            set Name(value: JsType<System.String>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_IServiceProvider: Implementation<System.IServiceProvider>,
                Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
            };
            private __type_3903844680: null;
        }
        
        /**
         * A Range represents a double-precision floating-point interval.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class Range extends Object {
            /**
             * Gets the high limit of the range.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get High(): JsType<System.Double>;
            /**
             * Gets a value indicating whether the range is empty or not.True
             * Returns true if the range is an empty (point) interval.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsEmptyRange(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the range is a unit range.
             * Returns true if the range is a unit range [0, 1].
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsUnitRange(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the range is valid or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsValidRange(): JsType<System.Boolean>;
            /**
             * Gets the low limit of the range.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Low(): JsType<System.Double>;
            /**
             * Gets the mid-point of the range. Equal to (Low + High)/2.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Midpoint(): JsType<System.Double>;
            /**
             * Gets the width of the range. Equal to High - Low.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get Width(): JsType<System.Double>;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.Range} struct.
             * Copy constructor.
             * @param range Range to copy.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(range: Range);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.Range} struct.
             * @param low The low limit of the range
             * @param high The high limit of the range
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(low: (JsType<System.Double> | System.Double), high: (JsType<System.Double> | System.Double));
            /**
             * Clamps the specified value to this range.
             * That is, the returned value will be within this range.
             * @param value The value.
             * @returns Clamped value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Clamp(value: (JsType<System.Double> | System.Double)): JsType<System.Double>;
            /**
             * Determines whether the specified value is within the range.
             * @param value The value to check.
             * @returns true if the specified value is within the range; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Contains(value: (JsType<System.Double> | System.Double)): JsType<System.Boolean>;
            /**
             * Compare for equality.
             * @param obj Another object to compare to.
             * @returns true if obj and this instance are the same type and represent the same value; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Equals(obj: any): JsType<System.Boolean>;
            /**
             * Calculates hash code for a range.
             * @returns The hashcode
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetHashCode(): JsType<System.Int32>;
            /**
             * Returns a string representation of the range.
             * @returns String representation of the range.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            ToString(): JsType<System.String>;
            /**
             * Empty range. Both Low and High are 0.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly EmptyRange: Range;
            /**
             * Invalid range. No operations except IsInvalid are allowed.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly InvalidRange: Range;
            /**
             * Unit range. Low is 0 and High is 1.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static readonly UnitRange: Range;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1269042033: null;
        }
        
        /**
         * The behavior for propagation of filter selections between
         * related tables. This is used in {@link Spotfire.Dxp.Data.DataFilteringSelection}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class RelatedRowsPropagation extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** Do not propagate rows between the related tables. */
            static readonly Ignore: RelatedRowsPropagation;
            /**
             * Propagate rows from the other table and
             * set non matching rows (rows that did not match in the relation) to included.
             */
            static readonly IncludeNonMatching: RelatedRowsPropagation;
            /**
             * Propagate rows from the other table and
             * set non matching rows (rows that did not match in the relation) to not included.
             */
            static readonly OnlyMatching: RelatedRowsPropagation;
            private __type_1730013408: null;
        }
        
        /**
         * Represents the metadata about the result
         * from a data source, transformation or calculation.
         * These properties are used to set properties on
         * the resulting data table.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class ResultProperties extends Object {
            /**
             * Gets a list of the names of all properties for this instance.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get PropertyNames(): System.Collections.Generic.IEnumerable<JsType<System.String>>;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.ResultProperties} class.
             * Creates an empty result properties collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor();
            /**
             * Gets the value of a named property.
             * @param name The property name.
             * @returns The value of the property.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            GetProperty(name: (JsType<System.String> | System.String)): unknown;
            /**
             * Checks a value exists for a named property.
             * @param name The property name.
             * @returns True if there is a value for the property; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            HasPropertyValue(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Create a new collection of result properties where all the
             * correct properties are forwarded.
             * @param importContext The import context.
             * @returns A copy of the properties that should be propagated.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Propagate(importContext: Import.ImportContext): ResultProperties;
            /**
             * Checks if a property with a given name exists.
             * @param name The name of the property.
             * @returns True if the property exists; otherwise, false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            PropertyExists(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
            /**
             * Sets the value of a named property.
             * @param name The property name.
             * @param value The property value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            SetProperty(name: (JsType<System.String> | System.String), value: any): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_959927488: null;
        }
        
        /**
         * This is a representation of a selection of rows in a table.
         * It is currently created from an enumeration of row
         * indexes or {@link Spotfire.Dxp.Data.IndexSet} but may be extended in the future to support symbolic marking.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class RowSelection extends Object {
            /**
             * Gets the number of excluded rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get ExcludedRowCount(): JsType<System.Int32>;
            /**
             * Gets the number of included rows.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IncludedRowCount(): JsType<System.Int32>;
            /**
             * Gets a value indicating whether the row selection does not contain any rows or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsEmpty(): JsType<System.Boolean>;
            /**
             * Gets a value indicating whether the row selection contains all rows or not.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get IsFull(): JsType<System.Boolean>;
            /**
             * Gets the total number of rows in the table that this row selection
             * refers to.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TotalRowCount(): JsType<System.Int32>;
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.RowSelection} class.
             * @param indexSet An index set containing the row indexes
             * that should be selected.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(indexSet: IndexSet);
            /**
             * Initializes a new instance of the {@link Spotfire.Dxp.Data.RowSelection} class.
             * @param rowCount The total number of rows in the table.
             * @param includedRows An enumerator of the included
             * row indexes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            constructor(rowCount: (JsType<System.Int32> | System.Int32), includedRows: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>);
            /**
             * Combine using the specified  operation two row
             * selections to create a new combined
             * row selection.
             * @param selection1 The first selection.
             * @param selection2 The second selection.
             * @param operation The operation that should be used
             * to combine the selections.
             * @returns The combined selection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            static Combine(selection1: RowSelection, selection2: RowSelection, operation: DataSelectionOperation): RowSelection;
            /**
             * Gets the row selection as an {@link Spotfire.Dxp.Data.IndexSet}.
             * @returns The row selection as an {@link Spotfire.Dxp.Data.IndexSet}
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AsIndexSet(): IndexSet;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3936494826: null;
        }
        
        /**
         * Defines the order for a sort operation.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class SortOrder extends System.Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** Defines an ascending sort. */
            static readonly Ascending: SortOrder;
            /** Defines an descending sort. */
            static readonly Descending: SortOrder;
            private __type_2956009988: null;
        }
        
        /**
         * This class describes operations performed on a {@link Spotfire.Dxp.Data.DataTable}.
         * The SourceView consists of {@link Spotfire.Dxp.Data.DataOperations.DataOperation}s and the columns returned by
         * {@link Spotfire.Dxp.Data.SourceView.AdditionalDataColumns}.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class SourceView extends Object {
            /**
             * Gets the additional {@link Spotfire.Dxp.Data.DataColumn}s added to the final data table after {@link Spotfire.Dxp.Data.SourceView.LastOperation}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get AdditionalDataColumns(): System.Collections.Generic.IReadOnlyList<DataColumn>;
            /**
             * Gets the last {@link Spotfire.Dxp.Data.DataOperations.DataOperation} that has been performed on the data table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get LastOperation(): DataOperations.DataOperation;
            /**
             * Gets all {@link Spotfire.Dxp.Data.DataOperations.DataOperation}s that can have {@link Spotfire.Dxp.Data.DataTransformation}s,
             * using the utility class {@link Spotfire.Dxp.Data.DataOperations.DataOperationSupportingTransformations}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get OperationsSupportingTransformations(): System.Collections.Generic.IReadOnlyList<DataOperations.DataOperationSupportingTransformations>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Adds columns after the specified operation.
             * @param operation The operation that the added columns should be added after.
             * @param dataSource The data source to add columns from.
             * @param settings The settings to use when adding the columns.
             * @returns The resulting source view containing the newly added {@link Spotfire.Dxp.Data.DataOperations.AddColumnsOperation}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddColumnsAfter(operation: DataOperations.DataOperation, dataSource: DataSource, settings: AddColumnsSettings): SourceView;
            /**
             * Adds rows after the specified operation.
             * @param operation The operation that the added rows should be added after.
             * @param dataSource The data source to add rows from.
             * @param settings The settings to use when adding the rows.
             * @returns The resulting source view containing the newly added {@link Spotfire.Dxp.Data.DataOperations.AddRowsOperation}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddRowsAfter(operation: DataOperations.DataOperation, dataSource: DataSource, settings: AddRowsSettings): SourceView;
            /**
             * Adds a transformation after the specified operation.
             * @param operation The operation to add transformations after.
             * @param transformation The transformation to add.
             * @returns The resulting source view containing the newly added {@link Spotfire.Dxp.Data.DataOperations.DataTransformationsOperation}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddTransformationAfter(operation: DataOperations.DataOperation, transformation: DataTransformation): SourceView;
            /**
             * Adds transformations after the specified operation.
             * @param operation The operation to add transformations after.
             * @param transformations The transformations to add.
             * @returns The resulting source view containing the newly added {@link Spotfire.Dxp.Data.DataOperations.DataTransformationsOperation}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            AddTransformationsAfter(operation: DataOperations.DataOperation, transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): SourceView;
            /**
             * Checks whether it is possible to add columns after the specified operation.
             * @param operation The operation to add columns after.
             * @returns true if columns can be added after the operation; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanAddColumnsAfter(operation: DataOperations.DataOperation): JsType<System.Boolean>;
            /**
             * Checks whether it is possible to add rows after the specified operation.
             * @param operation The operation to add rows after.
             * @returns true if rows can be added after the operation; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanAddRowsAfter(operation: DataOperations.DataOperation): JsType<System.Boolean>;
            /**
             * Checks whether it is possible to add transformations after the specified operation.
             * @param operation The operation to add transformations after.
             * @returns true if transformations can be added after the operation; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanAddTransformationsAfter(operation: DataOperations.DataOperation): JsType<System.Boolean>;
            /**
             * Checks whether the specified {@link Spotfire.Dxp.Data.DataOperations.DataOperation} can be removed.
             * @param operation The operation to remove.
             * @returns true if it can be removed; otherwise false.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            CanRemoveOperation(operation: DataOperations.DataOperation): JsType<System.Boolean>;
            /**
             * Gets all {@link Spotfire.Dxp.Data.DataOperations.DataOperation}s of a certain type.
             * @returns A list of {@link Spotfire.Dxp.Data.DataOperations.DataOperation}s.
             * 
             * @since 2.0
             * 
             * @group Default capability
             * @param typeT - @@Generic type argument
             */
            GetAllOperations<T extends DataOperations.DataOperation>(typeT: TypeRefParam<T>): System.Collections.Generic.IReadOnlyList<T>;
            /**
             * Removes the specified {@link Spotfire.Dxp.Data.DataOperations.DataOperation}. As a side effect, other
             * operations may be removed as well, e.g., an add rows operation
             * will implicitly be removed when removing either of its source inputs.
             * @param operation The operation to remove.
             * @returns The resulting source view.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RemoveOperation(operation: DataOperations.DataOperation): SourceView;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2666397864: null;
        }
        
        /**
         * An instance of this class can be retrieved from a
         * {@link Spotfire.Dxp.Data.DataColumn} using the {@link Spotfire.Dxp.Data.DataColumn.As} method when the column type
         * of the {@link Spotfire.Dxp.Data.DataColumn} is Tags. This class is used for
         * modifying the tags column.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        class TagsColumn extends Object {
            /**
             * Gets or sets a readonly list of the current tag values defined.
             * The order of the tag values defines the sort order of the tags
             * column. If the empty string is not part of the collection of tag
             * values it will be automatically be added to the end of the list.
             * A string in the tag values collection cannot be longer than 150
             * characters.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            get TagValues(): System.Collections.Generic.IList<JsType<System.String>>;
            set TagValues(value: OrExplicit<System.Collections.Generic.IList<JsType<System.String>>>);
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Renames a tag value in the list of TagValues. The old tag
             * value has to be part of the {@link Spotfire.Dxp.Data.TagsColumn.TagValues} list and may
             * not be the empty string. The new tag values must not be part of
             * the {@link Spotfire.Dxp.Data.TagsColumn.TagValues} list and may not be the empty string.
             * The new tag value cannot be longer than 150 characters.
             * @param oldValue The old tag value.
             * @param newValue The new tag value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            RenameTagValue(oldValue: (JsType<System.String> | System.String), newValue: (JsType<System.String> | System.String)): void;
            /**
             * Tag the specified rows with the given value. The row mask
             * has to match current rowcount in the table and the value has to be
             * part of the {@link Spotfire.Dxp.Data.TagsColumn.TagValues} list.
             * @param value The row value. The row value has to be part
             * of the {@link Spotfire.Dxp.Data.TagsColumn.TagValues} list.
             * @param rowMask The row mask defining the rows which
             * should be tagged.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            Tag(value: (JsType<System.String> | System.String), rowMask: RowSelection): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_799781897: null;
        }
        
        namespace Columns {
            /**
             * See the documentation for the generic {@link Spotfire.Dxp.Data.Columns.ColumnBuilder} class.
             * This class cannot be used directly.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnBuilder extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1959775524: null;
            }
        }
        
        namespace Computations {
            /**
             * Interface for method which should be shown in the UI.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            interface IPublicMethod extends IInterfaceBase {
                /**
                 * Gets a description of what the method does. This is shown in the user interface to describe
                 * to the user how to use the method.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the display name for method name. This is not the name used
                 * in expressions but the name shown in the UI.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the data method category.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MethodCategory(): DataMethodCategory;
                /**
                 * Gets the name of the method as used in expressions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets which section should the method be part of, see the {@link Spotfire.Dxp.Data.Computations.Sections} class for predefined sections.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Section(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Data_Computations_IPublicMethod: Implementation<IPublicMethod>,
                };
            }
            
            /**
             * This enumeration class is used to specify the category of a
             * {@link Spotfire.Dxp.Data.Computations.DataMethod}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataMethodCategory extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * An aggregation method.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly AggregationMethod: DataMethodCategory;
                /**
                 * A column calculation method.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly ColumnMethod: DataMethodCategory;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_208236413: null;
            }
            
            /**
             * The {@link Spotfire.Dxp.Data.Computations.DataMethod}s are grouped into sections
             * (ex. Text, Math, etc.) when presented in the user interface. This class contains
             * the predefined sections which methods can be part of.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Sections extends Object {
                /**
                 * Gets the section for binning functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get BinningFunctions(): JsType<System.String>;
                /**
                 * Gets the section for conversion functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get ConversionFunctions(): JsType<System.String>;
                /**
                 * Gets the section for Date and Time functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get DateAndTimeFunctions(): JsType<System.String>;
                /**
                 * Gets the section for logical functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get LogicalFunctions(): JsType<System.String>;
                /**
                 * Gets the section for math functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get MathFunctions(): JsType<System.String>;
                /**
                 * Gets the section for operators.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Operators(): JsType<System.String>;
                /**
                 * Gets the section for property functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get PropertyFunctions(): JsType<System.String>;
                /**
                 * Gets the section for ranking functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get RankingFunctions(): JsType<System.String>;
                /**
                 * Gets the section for spatial functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get SpatialFunctions(): JsType<System.String>;
                /**
                 * Gets the section for statistical functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get StatisticalFunctions(): JsType<System.String>;
                /**
                 * Gets the section for text functions.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get TextFunctions(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1931218058: null;
            }
            
            namespace Clustering {
                /**
                 * Holds the settings for a Hierarchical Clustering.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class HierarchicalClusteringSettings extends Object {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                    };
                    private __type_3815924364: null;
                }
            }
        }
        
        namespace DataColumnProperties {
            /**
             * Contains predefined name constants for the standard column properties.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DefaultProperties extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * The ColumnType property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static ColumnType: System.String;
                /**
                 * The Comparer property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static Comparer: System.String;
                /**
                 * A more specific type of the data contained in a column of a certain DataType.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static ContentType: System.String;
                /**
                 * The DataType property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static DataType: System.String;
                /**
                 * The DerivedExpression property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static DerivedExpression: System.String;
                /**
                 * The Description property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static Description: System.String;
                /**
                 * The Expression property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static Expression: System.String;
                /**
                 * The ExternalId property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static ExternalId: System.String;
                /**
                 * The ExternalName property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static ExternalName: System.String;
                /**
                 * The Formatter property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static Formatter: System.String;
                /**
                 * The HasValidValue property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static IsValid: System.String;
                /**
                 * The Name property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static Name: System.String;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_552381105: null;
            }
        }
        
        namespace DataFunctions {
            /**
             * Represents the settings for the handling of a {@link Spotfire.Dxp.Data.DataFunctions.OutputParameter} of
             * a {@link Spotfire.Dxp.Data.DataFunctions.DataFunction}. This class will add columns to an existing table when first executed and
             * when updated it will either update those column or add new columns depending on the settings.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnsOutput extends DataFunctionOutput implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a value indicating whether the columns produced the first time should be replaced
                 * when executing a second time. If false the old columns will become embedded and the new rows
                 * added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AddNewColumnsWhenUpdating(): JsType<System.Boolean>;
                /**
                 * Gets the reference to table where the columns are added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableReference(): DataTable;
                /**
                 * Gets the columns created by this output.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ResultColumns(): System.Collections.Generic.IList<DataColumn>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2426179119: null;
            }
            
            /**
             * Represents an execution of a data function defined from a {@link Spotfire.Dxp.Data.DataFunctions.DataFunction.DataFunctionDefinition}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunction extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets or sets the data function definition.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataFunctionDefinition(): DataFunctionDefinition;
                /**
                 * Gets the inputs of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): DataFunctionInputCollection;
                /**
                 * Gets or sets the name of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                set Name(value: JsType<System.String>);
                /**
                 * Gets a value indicating whether the data function needs to be refreshed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get NeedsRefresh(): JsType<System.Boolean>;
                /**
                 * Gets the outputs of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Outputs(): DataFunctionOutputCollection;
                /**
                 * Gets or sets the update behavior.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UpdateBehavior(): DataFunctionUpdateBehavior;
                set UpdateBehavior(value: DataFunctionUpdateBehavior);
                /**
                 * Gets or sets a value indicating whether the function is visible in the UI or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Visible(): JsType<System.Boolean>;
                set Visible(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Asynchronously executes the data function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Execute(): void;
                /**
                 * Updates the function synchronously.
                 * @returns True if the data function ran to completion and updated the document; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExecuteSynchronously(): JsType<System.Boolean>;
                /**
                 * Synchronize the function definition with the function definition stored in the library.
                 * @returns True if it successfully synchronized; False otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                SynchronizeWithLibrary(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1650377107: null;
            }
            
            /**
             * Represents the category of a data function.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionCategory extends Object {
                /**
                 * Gets the display name for the category.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the invariant name of the category.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * The Anomaly detection category, used e.g. for identifying items, events or observations which deviate significantly from the majority of the data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly AnomalyDetection: DataFunctionCategory;
                /**
                 * The Audio category, used e.g. for processing and analyzing sound recognition.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Audio: DataFunctionCategory;
                /**
                 * The Clustering category, used e.g. for grouping a set of objects in such a way that objects in the same group are more similar to each other than to those in other groups.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Clustering: DataFunctionCategory;
                /**
                 * The Connection category, used e.g. for sharing data with external services or take action on external services.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Connection: DataFunctionCategory;
                /**
                 * The Custom category, used for user-supplied icons.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Custom: DataFunctionCategory;
                /**
                 * The Data access category, used e.g. for accessing data from external sources not accessible natively.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly DataAccess: DataFunctionCategory;
                /**
                 * The default category, used if no other category is selected.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Default: DataFunctionCategory;
                /**
                 * The Evaluation category, used e.g. for monitoring and understanding performance and efficacy of a data model.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Evaluation: DataFunctionCategory;
                /**
                 * The Exploration category, used e.g. for understanding what is in a data set and the characteristics of the data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Exploration: DataFunctionCategory;
                /**
                 * The Forecasting category, used e.g. for estimating the values of new data based on historical data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Forecasting: DataFunctionCategory;
                /**
                 * The Prediction category, used e.g. for making predictions on values or unknown events.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Prediction: DataFunctionCategory;
                /**
                 * The Preparation category, used e.g. for manipulating data to a form that can readily and accurately be analyzed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Preparation: DataFunctionCategory;
                /**
                 * The Similarities category, used e.g. for measuring how data samples are related or close to each other.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Similarities: DataFunctionCategory;
                /**
                 * The Spatial category, used e.g. for processing and manipulating spatial data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Spatial: DataFunctionCategory;
                /**
                 * The Text category, used e.g. for analyzing text data and transforming unstructured text into normalized, structured data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Text: DataFunctionCategory;
                /**
                 * The Vision category, used e.g. for processing, analyzing and outputting images and data from image recognition.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Vision: DataFunctionCategory;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1512043467: null;
            }
            
            /**
             * Represents a list of {@link Spotfire.Dxp.Data.DataFunctions.DataFunction} instances.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataFunction>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of elements contained in this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<DataFunction>;
                /**
                 * Determines whether the specified value is in this collection.
                 * @param value The object to locate in this collection.
                 * The value can be null.
                 * @returns true if value is found in this collection;
                 * otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(value: DataFunction): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through this collection.
                 * @returns An {@link System.Collections.Generic.IEnumerator} for this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<DataFunction>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataFunction>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), DataFunction>;
                private __type_323638909: null;
            }
            
            /**
             * Represents a definition of an data function.
             * 
             * The definition describes the information needed
             * to invoke the function and enough information to provide a user interface for specifying how the inputs and
             * outputs should be handled. If the function definition represents a script it also contains the script definition.
             * 
             * The function definition provides methods to save and load the definition from the Spotfire library.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionDefinition extends Object {
                /**
                 * Gets a value indicating whether caching of the result of the function is allowed or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AllowCaching(): JsType<System.Boolean>;
                /**
                 * Gets the category of the data function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Category(): DataFunctionCategory;
                /**
                 * Gets the description.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the display name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the name of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FunctionName(): JsType<System.String>;
                /**
                 * Gets the input parameters.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get InputParameters(): System.Collections.Generic.IList<InputParameter>;
                /**
                 * Gets a value indicating whether this data function is approved by the current Windows user.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsApprovedByCurrentUser(): JsType<System.Boolean>;
                /**
                 * Gets the identifier to the function definition as stored in the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LibraryIdentifier(): JsType<System.Guid>;
                /**
                 * Gets the output parameters.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OutputParameters(): System.Collections.Generic.IList<OutputParameter>;
                /**
                 * Gets the type identifier for the provider responsible for executing the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ServiceType(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * Gets settings that are specific for the type of function used.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Settings(): System.Collections.Generic.IDictionary<JsType<System.String>, System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Create a function definition from the library.
                 * @param functionLibraryItem The library item for the function definition to get.
                 * @param libraryManager The library manager.
                 * @returns The function definition.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static Load(functionLibraryItem: Framework.Library.LibraryItem, libraryManager: Framework.Library.LibraryManager): DataFunctionDefinition;
                /**
                 * Updates the function definition in the library.
                 * @returns The library item for this function.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                Save(): Framework.Library.LibraryItem;
                /**
                 * Saves the function definition as a new item in the library.
                 * @param folder The library folder in which to save the function definition to.
                 * @param title The title of the library item.
                 * @param keywords The keywords.
                 * @param savedFunctionDefinition The new function definition that has been saved.
                 * @returns The library item for the newly saved function.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                SaveAs(folder: Framework.Library.LibraryItem, title: (JsType<System.String> | System.String), keywords: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.String> | System.String)>>, savedFunctionDefinition: OutParam<DataFunctionDefinition>): Framework.Library.LibraryItem;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3403360808: null;
            }
            
            /**
             * Represents a data function expression function.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionExpressionFunction extends Object {
                /**
                 * Gets the description of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the method category of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MethodCategory(): Computations.DataMethodCategory;
                /**
                 * Gets the name of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets the return type of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ReturnType(): DataType;
                /**
                 * Gets the script to execute.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Script(): JsType<System.String>;
                /**
                 * Gets the section of the function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Section(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3908269655: null;
            }
            
            /**
             * This class represents a collection of data function expression functions. These functions
             * calls data functions through the Spotfire expression language.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionExpressionFunctionCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataFunctionExpressionFunction>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of elements contained in this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<DataFunctionExpressionFunction>;
                /**
                 * Determines whether the collection contains an expression function with the defined name.
                 * @param name The name.
                 * @returns True if the expression function exists; false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through this collection.
                 * @returns An {@link System.Collections.Generic.IEnumerator} for this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<DataFunctionExpressionFunction>;
                /**
                 * Tries to get an expression function with the given name.
                 * @param name The name.
                 * @param value The value.
                 * @returns True if the expression function was found; false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetValue(name: (JsType<System.String> | System.String), value: OutParam<DataFunctionExpressionFunction>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataFunctionExpressionFunction>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataFunctions.DataFunctionExpressionFunction} with the specified name.
                 * @param name The name.
                 * @returns The function with the specified name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.String> | System.String), DataFunctionExpressionFunction>;
                private __type_2951448813: null;
            }
            
            /**
             * Defines how to retrieve the input for an {@link Spotfire.Dxp.Data.DataFunctions.InputParameter} in
             * a {@link Spotfire.Dxp.Data.DataFunctions.DataFunction}.
             * 
             * 
             * An input to a data function is an expression representing
             * a list of columns and optionally a set of selections that can be used to define the rows
             * that the expression should be calculated on. The expression is calculated on the
             * intersection of all the included selections.
             * 
             * 
             * Instances of this class is created in the {@link Spotfire.Dxp.Data.DataFunctions.DataFunctionInputCollection} class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionInput extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the expression that describes how to retrieve values for the input argument.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                /**
                 * Gets a value indicating whether active filtering should be included in the selections as well.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IncludeActiveFiltering(): JsType<System.Boolean>;
                /**
                 * Gets a readonly list of the selections to use when calculating the expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Selections(): System.Collections.Generic.IList<DataSelection>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3658399077: null;
            }
            
            /**
             * Represents the declarations on how to retrieve the values for
             * {@link Spotfire.Dxp.Data.DataFunctions.InputParameter}s in a {@link Spotfire.Dxp.Data.DataFunctions.DataFunction}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionInputCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataFunctionInput>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<DataFunctionInput>;
                /**
                 * Check if there is a {@link Spotfire.Dxp.Data.DataFunctions.DataFunctionInput} for the given {@link Spotfire.Dxp.Data.DataFunctions.InputParameter}.
                 * @param inputParameter The input parameter.
                 * @returns True if there is an input defined, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ContainsKey(inputParameter: InputParameter): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through the collection.
                 * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<DataFunctionInput>;
                /**
                 * Tries to get a {@link Spotfire.Dxp.Data.DataFunctions.DataFunctionInput} for the given {@link Spotfire.Dxp.Data.DataFunctions.InputParameter}.
                 * @param inputParameter The input parameter.
                 * @param dataFunctionInput The input definition.
                 * @returns True if it was possible to get the input; false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetValue(inputParameter: InputParameter, dataFunctionInput: OutParam<DataFunctionInput>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataFunctionInput>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_3507534747: null;
            }
            
            /**
             * The data function output mapping.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionOutput extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the input whose selections should be used to map output rows back into the application.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get InputToAdaptSelectionFrom(): InputParameter;
                /**
                 * Gets the transformations for this output mapping.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Transformations(): System.Collections.Generic.IList<DataTransformation>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2483145408: null;
            }
            
            /**
             * Represents the declarations on how to handle the results for
             * {@link Spotfire.Dxp.Data.DataFunctions.OutputParameter}s in a {@link Spotfire.Dxp.Data.DataFunctions.DataFunction}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionOutputCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<DataFunctionOutput>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<DataFunctionOutput>;
                /**
                 * Check if there is a {@link Spotfire.Dxp.Data.DataFunctions.DataFunctionOutput} for the outputParameter.
                 * @param outputParameter The output parameter.
                 * @returns True if there is an output defined, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ContainsKey(outputParameter: OutputParameter): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through the collection.
                 * @returns A {@link System.Collections.Generic.IEnumerator} that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<DataFunctionOutput>;
                /**
                 * Tries to get a {@link Spotfire.Dxp.Data.DataFunctions.DataFunctionOutput} for the outputParameter.
                 * @param outputParameter The output parameter.
                 * @param dataFunctionOutput The output definition.
                 * @returns True if it was possible to get the input; false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetValue(outputParameter: OutputParameter, dataFunctionOutput: OutParam<DataFunctionOutput>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<DataFunctionOutput>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_2242365716: null;
            }
            
            /**
             * The update behavior for a data function.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionUpdateBehavior extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Automatic update. */
                static readonly Automatic: DataFunctionUpdateBehavior;
                /** Manual update. */
                static readonly Manual: DataFunctionUpdateBehavior;
                private __type_722635738: null;
            }
            
            /**
             * Represents an input parameter to a data function.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class InputParameter extends Object {
                /**
                 * Gets the allowed data types.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AllowedDataTypes(): System.Collections.Generic.IList<DataType>;
                /**
                 * Gets the description of the parameter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the display name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets a value indicating whether the parameter is optional or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsOptional(): JsType<System.Boolean>;
                /**
                 * Gets the name of the parameter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets the parameter type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ParameterType(): ParameterType;
                /**
                 * Gets the implementation specific settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Settings(): System.Collections.Generic.IDictionary<JsType<System.String>, System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Check if the data type is allowed as a data type for this parameter.
                 * @param dataType The data type.
                 * @returns True if the data type is allowed; false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsAllowedDataType(dataType: DataType): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3366791898: null;
            }
            
            /**
             * Output mapping class for adding columns to a new table using a join.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class JoinOutput extends DataFunctionOutput implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the table reference.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableReference(): (DataTable | null);
                /**
                 * Gets the columns not included in the mapping or
                 * the additional columns from the output that should be ignored.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IgnoredColumns(): System.Collections.Generic.IList<DataColumnSignature>;
                /**
                 * Gets the type of join that should occur.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get JoinType(): JoinType;
                /**
                 * Gets a map matching columns from the original table to columns
                 * in the output.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Map(): System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_2879098192: null;
            }
            
            /**
             * An output parameter from an data function.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class OutputParameter extends Object {
                /**
                 * Gets the description.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the display name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets the parameter type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ParameterType(): ParameterType;
                /**
                 * Gets the implementation specific information.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Settings(): System.Collections.Generic.IDictionary<JsType<System.String>, System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4006267471: null;
            }
            
            /**
             * The type of a input or output parameter of a data function.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ParameterType extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** A list of scalar values. This is typically mapped to a list valued property or a data column. */
                static readonly Column: ParameterType;
                /** A list of lists of scalar values. This is typically mapped to a data table. */
                static readonly Table: ParameterType;
                /** A single scalar value. This is typically mapped to the value of a property. */
                static readonly Value: ParameterType;
                private __type_92776796: null;
            }
            
            /**
             * Output mapping class for setting the values of properties as output.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PropertyOutput extends DataFunctionOutput implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the column that the property value is set on.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataColumn(): DataColumn;
                /**
                 * Gets the table that the property value is set on.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTable(): DataTable;
                /**
                 * Gets the property class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PropertyClass(): DataPropertyClass;
                /**
                 * Gets the name of property to set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PropertyName(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3210211973: null;
            }
            
            /**
             * Output mapping class for replacing data.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ReplaceDataOutput extends DataFunctionOutput implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the table reference.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableReference(): (DataTable | null);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_710907214: null;
            }
            
            /**
             * Represents the settings for the handling of a {@link Spotfire.Dxp.Data.DataFunctions.OutputParameter} of
             * a {@link Spotfire.Dxp.Data.DataFunctions.DataFunction}. This class will add rows to an existing table when first executed and
             * when updated it will either update those rows or add new rows depending on the settings.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class RowsOutput extends DataFunctionOutput implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the table reference of the table to add rows to.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableReference(): (DataTable | null);
                /**
                 * Gets the columns not included in the mapping or
                 * the additional columns from the output that should be ignored.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IgnoredColumns(): System.Collections.Generic.IList<DataColumnSignature>;
                /**
                 * Gets a map matching columns from the original table to columns
                 * in the output.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Map(): System.Collections.Generic.IDictionary<DataColumnSignature, DataColumnSignature>;
                /**
                 * Gets the value that new elements in the
                 * row source column should get.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get NewRowSourceValue(): JsType<System.String>;
                /**
                 * Gets the value that the existing elements
                 * in the row source column should get.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OriginalRowSourceValue(): JsType<System.String>;
                /**
                 * Gets a value indicating whether the rows produced the first time should be replaced
                 * when executing a second time. If false the old rows will become embedded and the new rows
                 * added.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ReplaceRowsWhenUpdating(): JsType<System.Boolean>;
                /**
                 * Gets the column in the table that
                 * will be created to indicate the source of the rows..
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowSourceColumn(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_1357047895: null;
            }
            
            /**
             * Output mapping class for adding a new table.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TableOutput extends DataFunctionOutput implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets a reference to data table created by this output.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTableReference(): (DataTable | null);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3874316814: null;
            }
        }
        
        namespace DataLoadReport {
            /**
             * A categorized message item.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Item extends Object {
                /**
                 * Gets the category.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Category(): JsType<System.String>;
                /**
                 * Gets the message.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Message(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2751122949: null;
            }
        }
        
        namespace DataOperations {
            /**
             * This operation represents an Add Columns operation performed to construct a {@link Spotfire.Dxp.Data.DataTable},
             * typically created by {@link Spotfire.Dxp.Data.DataTable.AddColumns|AddColumns(dataSource, settings)}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class AddColumnsOperation extends DataOperation {
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.AddColumnsSettings} used to add columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AddColumnsSettings(): AddColumnsSettings;
                set AddColumnsSettings(value: AddColumnsSettings);
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataOperations.DataOperation} producing the added data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AddedData(): DataOperation;
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataOperations.DataOperation} producing the original data, i.e. the data before adding columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OriginalData(): DataOperation;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether changing the {@link Spotfire.Dxp.Data.DataOperations.AddColumnsOperation.AddColumnsSettings} is possible.
                 * @returns true if settings can be set; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanSetAddColumnsSettings(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1229102203: null;
            }
            
            /**
             * This operation represents an Add Rows operation performed to construct a {@link Spotfire.Dxp.Data.DataTable},
             * typically created by {@link Spotfire.Dxp.Data.DataTable.AddRows|AddRows(dataSource, settings)}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class AddRowsOperation extends DataOperation {
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataOperations.DataOperation} producing the added data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AddedData(): DataOperation;
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.AddRowsSettings} used to add rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AddRowsSettings(): AddRowsSettings;
                set AddRowsSettings(value: AddRowsSettings);
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataOperations.DataOperation} producing the original data, i.e. the data before adding rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OriginalData(): DataOperation;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether changing the {@link Spotfire.Dxp.Data.DataOperations.AddRowsOperation.AddRowsSettings} is possible.
                 * @returns true if settings can be set; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanSetAddRowsSettings(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2614441963: null;
            }
            
            /**
             * This source operation represents the output of a {@link Spotfire.Dxp.Data.Calculation}, for example
             * the result of running Data Relationships.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class CalculationOperation extends DataOperation {
                /**
                 * Gets the {@link Spotfire.Dxp.Data.Calculation} that created this operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Calculation(): Calculation;
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2849736614: null;
            }
            
            /**
             * This source operation represents data loaded from a view in a Data Connection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataConnectionOperation extends DataOperation {
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.DataOperations.DataLoadingBehavior} for this operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataLoadingBehavior(): DataLoadingBehavior;
                set DataLoadingBehavior(value: DataLoadingBehavior);
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether it is possible to replace transformations.
                 * @returns true if replacing transformations is possible; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReplaceTransformations(): JsType<System.Boolean>;
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataTransformation}s performed on the result of the {@link Spotfire.Dxp.Data.DataOperations.DataConnectionOperation} output.
                 * @returns A list of data transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetTransformations(): System.Collections.Generic.IList<DataTransformation>;
                /**
                 * Replaces the current (if any) {@link Spotfire.Dxp.Data.DataTransformation}s performed on the result of the {@link Spotfire.Dxp.Data.DataOperations.DataConnectionOperation} output,
                 * with the supplied transformations.
                 * @param transformations The new transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceTransformations(transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_434203749: null;
            }
            
            /**
             * This source operation represents an output of a {@link Spotfire.Dxp.Data.DataFunctions.DataFunction}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionOperation extends DataOperation {
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataFunctions.DataFunction} whose output is used in this operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataFunction(): DataFunctions.DataFunction;
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataFunctions.OutputParameter} for the {@link Spotfire.Dxp.Data.DataOperations.DataFunctionOperation.DataFunction}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OutputParameter(): DataFunctions.OutputParameter;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether it is possible to replace transformations.
                 * @returns true if replacing transformations is possible; otherwise false
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReplaceTransformations(): JsType<System.Boolean>;
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataTransformation}s performed on the result of the {@link Spotfire.Dxp.Data.DataOperations.DataFunctionOperation.DataFunction} output.
                 * @returns A list of data transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetTransformations(): System.Collections.Generic.IList<DataTransformation>;
                /**
                 * Replaces the current (if any) {@link Spotfire.Dxp.Data.DataTransformation}s performed on the result of the {@link Spotfire.Dxp.Data.DataOperations.DataFunctionOperation.DataFunction} output,
                 * with the supplied transformations.
                 * @param transformations The new transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceTransformations(transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1216051769: null;
            }
            
            /**
             * The data loading behavior of a {@link Spotfire.Dxp.Data.DataOperations.DataOperation} in a {@link Spotfire.Dxp.Data.SourceView}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataLoadingBehavior extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * New data will always be loaded when the operation is refreshed
                 * (e.g. when the analysis is opened).
                 */
                static readonly AlwaysNewData: DataLoadingBehavior;
                /** Data is stored in the analysis, but new data will be loaded if available when the analysis is opened. */
                static readonly NewDataWhenPossible: DataLoadingBehavior;
                /** The data loading behavior is not applicable for the operation. */
                static readonly NotApplicable: DataLoadingBehavior;
                /** Data is stored in the analysis. */
                static readonly StoredData: DataLoadingBehavior;
                private __type_3162414294: null;
            }
            
            /**
             * This class represents an operation performed to construct a {@link Spotfire.Dxp.Data.DataTable}.
             * An operation can have zero or more inputs. Operations with
             * no inputs are typically sources, those with one input perform some
             * form of transformation of the data, and those with more than one input
             * join or add data. The tree structure can be
             * traversed by using the {@link Spotfire.Dxp.Data.DataOperations.DataOperation.Inputs} property.
             * 
             * {@link Spotfire.Dxp.Data.DataOperations.DataOperation.TryGetOutputSignatures|TryGetOutputSignatures(outputSignatures)} can be used to check the output
             * of the operation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataOperation extends Object {
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.DataOperations.DataLoadingBehavior} for this operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataLoadingBehavior(): DataLoadingBehavior;
                set DataLoadingBehavior(value: DataLoadingBehavior);
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether the data for this operation can be reloaded.
                 * @returns true if the data can be reloaded, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReload(): JsType<System.Boolean>;
                /**
                 * Checks whether the specified {@link Spotfire.Dxp.Data.DataOperations.DataLoadingBehavior}
                 * can be set on this operation.
                 * @param behavior The behavior to check.
                 * @returns true if the specified behavior can be set, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanSetDataLoadingBehavior(behavior: DataLoadingBehavior): JsType<System.Boolean>;
                /**
                 * Reloads the data for this operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Reload(): void;
                /**
                 * Tries to get the output {@link Spotfire.Dxp.Data.DataColumnSignature}s from this operation.
                 * @param outputSignatures If the method returns true, then these are the
                 * column signatures. (Note that zero columns is possible.)
                 * @returns true if the column signatures are available, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryGetOutputSignatures(outputSignatures: OutParam<OrExplicit<System.Collections.Generic.IReadOnlyList<DataColumnSignature>>>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1528815795: null;
            }
            
            /**
             * Utility wrapper for accessing {@link Spotfire.Dxp.Data.DataOperations.DataOperation}s
             * that may have {@link Spotfire.Dxp.Data.DataTransformation}s.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataOperationSupportingTransformations extends Object {
                /**
                 * Gets the underlying {@link Spotfire.Dxp.Data.DataOperations.DataOperation}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataOperation(): DataOperation;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether it is possible to replace transformations by calling {@link Spotfire.Dxp.Data.DataOperations.DataOperationSupportingTransformations.ReplaceTransformations|ReplaceTransformations(transformations)}.
                 * @returns true if replacing transformations is possible; otherwise false
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReplaceTransformations(): JsType<System.Boolean>;
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataTransformation}s performed by the {@link Spotfire.Dxp.Data.DataOperations.DataOperationSupportingTransformations.DataOperation}.
                 * @returns A list of data transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetTransformations(): System.Collections.Generic.IList<DataTransformation>;
                /**
                 * Replaces the current (if any) {@link Spotfire.Dxp.Data.DataTransformation}s performed by the {@link Spotfire.Dxp.Data.DataOperations.DataOperationSupportingTransformations.DataOperation},
                 * with the supplied transformations.
                 * @param transformations The new transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceTransformations(transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2435650402: null;
            }
            
            /**
             * This source operation represents data loaded from a {@link Spotfire.Dxp.Data.DataSource}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataSourceOperation extends DataOperation {
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.DataOperations.DataLoadingBehavior} for this operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataLoadingBehavior(): DataLoadingBehavior;
                set DataLoadingBehavior(value: DataLoadingBehavior);
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether it is possible to replace the {@link Spotfire.Dxp.Data.DataFlow} by calling {@link Spotfire.Dxp.Data.DataOperations.DataSourceOperation.ReplaceDataFlow|ReplaceDataFlow(dataFlow)}.
                 * @returns true if replacing the data flow is possible; otherwise false
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReplaceDataFlow(): JsType<System.Boolean>;
                /**
                 * Checks whether it is possible to replace transformations.
                 * @returns true if replacing transformations is possible; otherwise false
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReplaceTransformations(): JsType<System.Boolean>;
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataFlow}.
                 * @returns A copy of the data flow.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetDataFlow(): DataFlow;
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataTransformation}s contained in the data flow.
                 * @returns A list of data transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetTransformations(): System.Collections.Generic.IList<DataTransformation>;
                /**
                 * Replaces the current data flow with the supplied {@link Spotfire.Dxp.Data.DataFlow}.
                 * @param dataFlow The new data flow.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceDataFlow(dataFlow: DataFlow): void;
                /**
                 * Replaces the current (if any) {@link Spotfire.Dxp.Data.DataTransformation}s contained in the {@link Spotfire.Dxp.Data.DataFlow},
                 * with the supplied transformations.
                 * @param transformations The new transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceTransformations(transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1608729770: null;
            }
            
            /**
             * This source operation represents data read from another
             * {@link Spotfire.Dxp.Data.DataTable} in the analysis.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataTableDataSourceOperation extends DataOperation {
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.DataOperations.DataLoadingBehavior} for this operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataLoadingBehavior(): DataLoadingBehavior;
                set DataLoadingBehavior(value: DataLoadingBehavior);
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataTable} that data is read from.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTable(): DataTable;
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.Import.DataTableDataSourceUpdateBehavior}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UpdateBehavior(): Import.DataTableDataSourceUpdateBehavior;
                set UpdateBehavior(value: Import.DataTableDataSourceUpdateBehavior);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether it is possible to replace transformations.
                 * @returns true if replacing transformations is possible; otherwise false
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReplaceTransformations(): JsType<System.Boolean>;
                /**
                 * Checks whether the specified {@link Spotfire.Dxp.Data.Import.DataTableDataSourceUpdateBehavior} can be set as {@link Spotfire.Dxp.Data.DataOperations.DataTableDataSourceOperation.UpdateBehavior} for this operation.
                 * @param behavior The behavior to check.
                 * @returns true if the specified update behavior can be set; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanSetUpdateBehavior(behavior: Import.DataTableDataSourceUpdateBehavior): JsType<System.Boolean>;
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataTransformation}s performed on the data read from the {@link Spotfire.Dxp.Data.DataOperations.DataTableDataSourceOperation.DataTable}.
                 * @returns A list of data transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetTransformations(): System.Collections.Generic.IList<DataTransformation>;
                /**
                 * Replaces the current (if any) {@link Spotfire.Dxp.Data.DataTransformation}s performed on the data read from the {@link Spotfire.Dxp.Data.DataOperations.DataTableDataSourceOperation.DataTable},
                 * with the supplied transformations.
                 * @param transformations The new transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceTransformations(transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2744953502: null;
            }
            
            /**
             * This operation represents a list of transformations (at least one)
             * applied on the output of another {@link Spotfire.Dxp.Data.DataOperations.DataOperation}.
             * Operations of this type are typically created with {@link Spotfire.Dxp.Data.DataTable.AddTransformation|AddTransformation(transformation)}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataTransformationsOperation extends DataOperation {
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataOperations.DataOperation} producing the original data, i.e. the data that the transformations are applied on.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OriginalData(): DataOperation;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether it is possible to replace transformations.
                 * @returns true if replacing transformations is possible; otherwise false
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReplaceTransformations(): JsType<System.Boolean>;
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataTransformation}s performed by this operation.
                 * @returns A list of data transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetTransformations(): System.Collections.Generic.IList<DataTransformation>;
                /**
                 * Replaces the current {@link Spotfire.Dxp.Data.DataTransformation}s performed by this operation,
                 * with the supplied transformations.
                 * @param transformations The new transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceTransformations(transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4189115053: null;
            }
            
            /**
             * Represents a Freeze column operation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FreezeColumnOperation extends DataOperation {
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataOperations.DataOperation} producing the original data, i.e. the data before the column was frozen.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OriginalData(): DataOperation;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2057004762: null;
            }
            
            /**
             * This source operation represents On-Demand loaded data from an Information Link.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class InformationLinkOnDemandOperation extends DataOperation {
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the Information Link id.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get InformationLinkId(): JsType<System.Guid>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Checks whether it is possible to replace transformations.
                 * @returns true if replacing transformations is possible; otherwise false
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CanReplaceTransformations(): JsType<System.Boolean>;
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataTransformation}s performed on the loaded data.
                 * @returns A list of data transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetTransformations(): System.Collections.Generic.IList<DataTransformation>;
                /**
                 * Replaces the current (if any) {@link Spotfire.Dxp.Data.DataTransformation}s performed when data is loaded,
                 * with the supplied transformations.
                 * @param transformations The new transformations.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceTransformations(transformations: OrExplicit<System.Collections.Generic.IEnumerable<DataTransformation>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2741798949: null;
            }
            
            /**
             * This operation represents removal of columns from the output of another {@link Spotfire.Dxp.Data.DataOperations.DataOperation},
             * for example created by {@link Spotfire.Dxp.Data.DataColumnCollection.Remove|Remove(name)}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class RemoveColumnsOperation extends DataOperation {
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataOperations.DataOperation} producing the original data, before columns were removed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OriginalData(): DataOperation;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Gets a copy of the {@link Spotfire.Dxp.Data.DataColumnSignature}s representing the columns that are removed by this operation.
                 * @returns A list of {@link Spotfire.Dxp.Data.DataColumnSignature}s.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetRemovedColumns(): System.Collections.Generic.IList<DataColumnSignature>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1398979788: null;
            }
            
            /**
             * This operation represents removal of rows from the output of another {@link Spotfire.Dxp.Data.DataOperations.DataOperation},
             * for example created by {@link Spotfire.Dxp.Data.DataTable.RemoveRows|RemoveRows(rowMask)}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class RemoveRowsOperation extends DataOperation {
                /**
                 * Gets a localized display name for the operation.
                 * This string is for display purposes only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the inputs, if any, to the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Inputs(): System.Collections.Generic.IReadOnlyList<DataOperation>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataOperations.DataOperation} producing the original data, before rows were removed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OriginalData(): DataOperation;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1703194350: null;
            }
        }
        
        namespace Exceptions {
            /**
             * This exception is thrown when an invalid expression fails to parse.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExpressionParseException extends System.Exception {
                /**
                 * Gets the column number where the error occurred.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Column(): JsType<System.Int32>;
                /**
                 * Gets the part of the expression around where the error occurred.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ExpressionContext(): JsType<System.String>;
                /**
                 * Gets the line number where the error occurred.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Line(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_40641042: null;
            }
        }
        
        namespace Export {
            /**
             * Represents a class capable of exporting data from a {@link Spotfire.Dxp.Data.DataTable}
             * to a Stream given a set of ordered row indexes and a enumerable of
             * column names.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataWriter extends Object {
                /**
                 * Gets a value indicating whether this instance can write from reader.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CanWriteFromReader(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Writes data from {@link Spotfire.Dxp.Data.DataRowReader} to the specified stream.
                 * @param stream The opened writable stream.
                 * @param dataRowReader The data row reader.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Write(stream: (JsType<System.IO.Stream> | System.IO.Stream), dataRowReader: DataRowReader): void;
                /**
                 * Writes data from {@link Spotfire.Dxp.Data.DataRowReader} to the specified stream.
                 * @param stream The opened writable stream.
                 * @param dataRowReader The data row reader.
                 * @param columns The columns in the data row reader that
                 * should be exported.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Write(stream: (JsType<System.IO.Stream> | System.IO.Stream), dataRowReader: DataRowReader, columns: DataRowReaderColumnCollection): void;
                /**
                 * Writes data from a {@link Spotfire.Dxp.Data.DataTable} to the specified stream.
                 * @param stream The opened writable stream.
                 * @param dataTable The data table.
                 * @param rowIndexes The ordered row indexes that should be used to export the data.
                 * @param columnNames The column names in the table that should be exported.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Write(stream: (JsType<System.IO.Stream> | System.IO.Stream), dataTable: DataTable, rowIndexes: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.Int32> | System.Int32)>>, columnNames: OrExplicit<System.Collections.Generic.IEnumerable<(JsType<System.String> | System.String)>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3436907475: null;
            }
            
            /**
             * Defines the type identifiers for built-in data writers.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataWriterTypeIdentifiers extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Identifies the ExcelXlsDataWriter, a data writer for writing data as Excel workbooks.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly ExcelXlsDataWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the ExcelXlsxDataWriter, a data writer for writing data as Excel workbooks.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly ExcelXlsxDataWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the SbdfDataWriter, a data writer for writing data to the SBDF format.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SbdfDataWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the SpreadsheetDataCsvUtf8Writer, a data writer for writing data to spreadsheet csv format with UTF8 encoding.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SpreadsheetDataCsvUtf8Writer: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the SpreadsheetDataCsvWriter, a data writer for writing data to spreadsheet csv format.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SpreadsheetDataCsvWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the SpreadsheetDataSemicolonUtf8Writer, a data writer for writing data to spreadsheet semicolon format with UTF8 encoding.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SpreadsheetDataSemicolonUtf8Writer: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the SpreadsheetDataSemicolonWriter, a data writer for writing data to spreadsheet semicolon format.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SpreadsheetDataSemicolonWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the SpreadsheetDataWriter, a data writer for writing data to spreadsheet tab format.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SpreadsheetDataWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the SpreadsheetUtf8DataWriter, a data writer for writing data to spreadsheet format with UTF8 encoding.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly SpreadsheetUtf8DataWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the StdfDataWriter, a data writer for writing data to the STDF format, current version.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly StdfDataWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Identifies the StdfOneDataWriter, a data writer for writing data to the STDF format, version 1.0.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly StdfOneDataWriter: Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1910992507: null;
            }
        }
        
        namespace Expressions {
            /**
             * This is a handle to a column expression. This class
             * is created by the factory methods {@link Spotfire.Dxp.Data.Expressions.ColumnExpression.Create|Create(expression)}, and can be used
             * to retrieve information about the components of the column
             * expression.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnExpression extends Object {
                /**
                 * Get the alias (name) of the calculated column if there is an AS
                 * part of the column expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Alias(): JsType<System.String>;
                /**
                 * Get the names of all column names referenced in the expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnNames(): System.Collections.Generic.ICollection<JsType<System.String>>;
                /**
                 * Get the localized error message if the expression is
                 * invalid, null otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ErrorDisplayMessage(): JsType<System.String>;
                /**
                 * Get the expression that could not be parsed if it exists,
                 * if the expression is valid then this property is null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ErrorExpression(): JsType<System.String>;
                /**
                 * Get the error message if the expression is invalid, null
                 * otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ErrorMessage(): JsType<System.String>;
                /**
                 * Gets the expression as a string.
                 * This would exclude any alias (name) statement.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                /**
                 * Get all hierarchy names referenced in the expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HierarchyNames(): System.Collections.Generic.ICollection<JsType<System.String>>;
                /**
                 * True if the expression is valid, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsValid(): JsType<System.Boolean>;
                /**
                 * Get the names of all the methods which are referenced
                 * in the expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MethodNames(): System.Collections.Generic.ICollection<JsType<System.String>>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Parse a column expression and return a ColumnExpression.
                 * @param expression The column expression.
                 * @returns A handle to the parsed column expression. Even if it was
                 * not possible to parse the expression a ColumnExpression will still be returned
                 * but it will be invalid.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static Create(expression: (JsType<System.String> | System.String)): ColumnExpression;
                /**
                 * Parse a custom expression that can be used on plots and return a list of ColumnExpressions.
                 * @param expression The plot expression to parse.
                 * @param dataManager The data manager.
                 * @returns A list of handles to the parsed expressions if it was not possible to parse the expression
                 * an empty list will be returned.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static CreateFromPlotExpression(expression: (JsType<System.String> | System.String), dataManager: DataManager): System.Collections.Generic.IList<ColumnExpression>;
                /**
                 * Clone the expression.
                 * @returns A clone of the current column expression handle.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clone(): ColumnExpression;
                /**
                 * Checks if column expression contains an aggregation method.
                 * @param table The {@link Spotfire.Dxp.Data.DataTable} where the columns and hierarchies referenced
                 * in the expression are defined.
                 * @returns True if the column expression contained an aggregation method,
                 * false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ContainsAggregationMethod(table: DataTable): JsType<System.Boolean>;
                /**
                 * Get the result type for the given expression using the columns
                 * in the specified table.
                 * @param table The {@link Spotfire.Dxp.Data.DataTable} where the columns and hierarchies referenced
                 * in the expression are defined.
                 * @returns The return type of the expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetExpressionReturnType(table: DataTable): DataType;
                /**
                 * Make sure that all column/hierarchy references in the query are fully qualified.
                 * @param tableName The table name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                QualifyNames(tableName: (JsType<System.String> | System.String)): void;
                /**
                 * Rename all column references from oldName  to
                 * newName.
                 * @param oldName The old column name.
                 * @param newName The new column name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RenameColumn(oldName: (JsType<System.String> | System.String), newName: (JsType<System.String> | System.String)): void;
                /**
                 * Rename all hierarchy references from oldName to
                 * newName.
                 * @param oldName The old hierarchy name.
                 * @param newName The new hierarchy name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RenameHierarchy(oldName: (JsType<System.String> | System.String), newName: (JsType<System.String> | System.String)): void;
                /**
                 * Validates if the column expression is valid in the given
                 * {@link Spotfire.Dxp.Data.DataTable} context.
                 * @param table The {@link Spotfire.Dxp.Data.DataTable} where the columns and hierarchies referenced
                 * in the expression are defined.
                 * @returns True if the expression is valid, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Validate(table: DataTable): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_105419509: null;
            }
            
            /**
             * Utilities for escaping and unescaping sting literals and names to be used in expressions.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExpressionUtilities extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Escapes an identifier (a column/hierarchy/view name)
                 * to be able to use special characters.
                 * 
                 * 
                 * Replaces all ']' characters with ']]' and adds '[' to the beginning
                 * and ']' to the end of the string.
                 * @param identifier The unescaped identifier.
                 * @returns The escaped identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static EscapeIdentifier(identifier: (JsType<System.String> | System.String)): JsType<System.String>;
                /**
                 * Escape string literal to be able to use special characters,
                 * adds escape sequences and " characters to the string.
                 * 
                 * 
                 * All "-characters are replace with "" and "-characters are added to
                 * the start and end of the string.
                 * @param literal The unescaped string literal.
                 * @returns The escaped string literal.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static EscapeStringLiteral(literal: (JsType<System.String> | System.String)): JsType<System.String>;
                /**
                 * Unescape an identifier (a column/hierarchy/view name).
                 * 
                 * 
                 * Removes the '[' and ']' characters at the beginning and end of
                 * the string and replaces all occurrences of ']]' with a single ']'
                 * character.
                 * @param identifier The escaped identifier.
                 * @returns The unescaped identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static UnescapeIdentifier(identifier: (JsType<System.String> | System.String)): JsType<System.String>;
                /**
                 * Unescape a string literal, removes the starting and
                 * ending "/'-characters handles escape sequences and replaces all
                 * ""/''-string with a single "/'-character.
                 * 
                 * 
                 * Escape Sequences:\
                 * \uHHHH - Any Unicode character expressed as four hexadecimal digits.\
                 * \ooo   - A character in the range 0-255 expressed as three octal\
                 *          digits 0-7.\
                 * \b     - \u0008: backspace (BS)\
                 * \t     - \u0009: horizontal tab (HT)\
                 * \n     - \u000a: line feed (LF)\
                 * \f     - \u000c: form feed (FF)\
                 * \r     - \u000d: carriage return (CR)\
                 * \\     - \u005c: backslash \
                 * @param literal The escaped string literal.
                 * @returns The unescaped string literal.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static UnescapeStringLiteral(literal: (JsType<System.String> | System.String)): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1525883113: null;
            }
        }
        
        namespace Formatters {
            /**
             * Converts an object to and from a string representation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            interface IDataFormatter extends IInterfaceBase {
                /**
                 * Converts an object to a string representation.
                 * @param obj The object to convert.
                 * @returns A string representation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Format(obj: any): JsType<System.String>;
                /**
                 * Converts an object to a string representation.
                 * @param obj The object to convert.
                 * @returns A string representation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Format(obj: any): JsType<System.String>;
                /**
                 * Formats an invalid value with an optional error string.
                 * @param error An error string. Optional (may be null).
                 * @returns A string value
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                FormatInvalid(error: (JsType<System.String> | System.String)): JsType<System.String>;
                /**
                 * Converts a string representation to an object.
                 * @param str The string to convert.
                 * @returns An object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Parse(str: (JsType<System.String> | System.String)): unknown;
                /**
                 * Converts a string representation to an object. A return value indicates
                 * whether the conversion succeeded or failed.
                 * @param str The string to convert.
                 * @param result The object that is the result of the conversion.
                 * @returns true if str was converted successfully; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryParse(str: (JsType<System.String> | System.String), result: OutParam<System.Object>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Data_Formatters_IDataFormatter: Implementation<IDataFormatter>,
                };
            }
            
            /**
             * Formatter for boolean values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BooleanFormatter extends DataFormatterBase implements IDataFormatter {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Data_Formatters_IDataFormatter: Implementation<IDataFormatter>,
                };
                private __type_3222549683: null;
            }
            
            /**
             * Abstract base class for formatters. Handles read-only state, cloning
             * and formatting of invalid values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFormatterBase extends Object implements IDataFormatter {
                /**
                 * Gets or sets the name of the culture that defines the default formatting.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CultureName(): JsType<System.String>;
                set CultureName(value: JsType<System.String>);
                /**
                 * Gets or sets the string used to indicate empty values.
                 * ({@link Spotfire.Dxp.Data.Formatters.DataFormatterBase.FormatInvalid|FormatInvalid(error)}).
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get EmptyString(): JsType<System.String>;
                set EmptyString(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether
                 * the format of the string representation must match the
                 * specified format exactly or not. Default is false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ExactParse(): JsType<System.Boolean>;
                set ExactParse(value: JsType<System.Boolean>);
                /**
                 * Gets a value indicating whether this formatter is localized and always
                 * uses CultureInfo derived from the current running thread or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsLocalized(): JsType<System.Boolean>;
                /**
                 * Gets a value indicating whether the formatter is read-only or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsReadOnly(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Returns the given formatter if already read-only, otherwise a
                 * read-only copy.
                 * @param formatter A formatter.
                 * @returns A read-only formatter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static AsReadOnly(formatter: DataFormatterBase): DataFormatterBase;
                /**
                 * Returns a writable copy of this formatter.
                 * @returns A new formatter copied from the original
                 * formatter
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clone(): unknown;
                /**
                 * Override this method to convert an object to a string value.
                 * @param obj An object to convert.
                 * @returns A string value
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Format(obj: any): JsType<System.String>;
                /**
                 * Formats an invalid value. If error is not null,
                 * the return value includes the "(error)" string, otherwise
                 * {@link Spotfire.Dxp.Data.Formatters.DataFormatterBase.EmptyString} is returned.
                 * @param error An error string. Optional (may be null).
                 * @returns A string value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                FormatInvalid(error: (JsType<System.String> | System.String)): JsType<System.String>;
                /**
                 * Override this method to convert a string value to an object.
                 * @param str A string value to convert.
                 * @returns An object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Parse(str: (JsType<System.String> | System.String)): unknown;
                /**
                 * Converts a string representation to an object. A return value indicates
                 * whether the conversion succeeded or failed.
                 * @param str The string to convert.
                 * @param result The object that is the result of the conversion.
                 * @returns true if str was converted successfully; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                TryParse(str: (JsType<System.String> | System.String), result: OutParam<System.Object>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Data_Formatters_IDataFormatter: Implementation<IDataFormatter>,
                };
                private __type_2203993674: null;
            }
            
            /**
             * Formatter for {@link Spotfire.Dxp.Data.DataType.Date}, {@link Spotfire.Dxp.Data.DataType.Time},
             * or {@link Spotfire.Dxp.Data.DataType.DateTime} values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DateTimeFormatter extends DataFormatterBase implements IDataFormatter {
                /**
                 * Gets or sets a DateTimeStyles object that defines
                 * how string representations are parsed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DateTimeStyles(): JsType<System.Globalization.DateTimeStyles>;
                set DateTimeStyles(value: JsType<System.Globalization.DateTimeStyles>);
                /**
                 * Gets or sets a format string that defines how values are formatted.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FormatString(): JsType<System.String>;
                set FormatString(value: JsType<System.String>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Data_Formatters_IDataFormatter: Implementation<IDataFormatter>,
                };
                private __type_2551967652: null;
            }
            
            /**
             * Defines how decimal digits should be handled by a {@link Spotfire.Dxp.Data.Formatters.NumberFormatter}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DecimalDigitsMode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Use a suitable number of decimal digits, individual for each value formatted. */
                static readonly Auto: DecimalDigitsMode;
                /** Use the number of decimal digits specified by {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.DecimalDigits}. */
                static readonly Specific: DecimalDigitsMode;
                private __type_1440335827: null;
            }
            
            /**
             * Defines the different number format categories supported by
             * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class NumberFormatCategory extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * A currency number format, which may be configured using
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.CurrencyCulture},
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.DecimalDigits},
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.NegativePattern} and
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.GroupSeparatorEnabled}.
                 */
                static readonly Currency: NumberFormatCategory;
                /** A custom number format. */
                static readonly Custom: NumberFormatCategory;
                /**
                 * A general and non-configurable format, with variable number of
                 * decimals and no group separator. The number is converted to
                 * the most compact of either fixed-point or scientific notation.
                 */
                static readonly General: NumberFormatCategory;
                /**
                 * A Configurable number format, which may be configured using
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.DecimalDigits},
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.NegativePattern} and
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.GroupSeparatorEnabled}.
                 */
                static readonly Number: NumberFormatCategory;
                /**
                 * A percentage number format. which may be configured using
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.DecimalDigits},
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.NegativePattern} and
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.GroupSeparatorEnabled}.
                 */
                static readonly Percentage: NumberFormatCategory;
                /**
                 * A scientific number format, which may be configured using
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.DecimalDigits}.
                 */
                static readonly Scientific: NumberFormatCategory;
                private __type_270363575: null;
            }
            
            /**
             * Defines how negative values are formatted.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class NumberFormatNegativePattern extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Use negative sign from {@link Spotfire.Dxp.Data.Formatters.DataFormatterBase.CultureInfo}. */
                static readonly NegativeSign: NumberFormatNegativePattern;
                /**
                 * Use parenthesis with the pattern: (n), where n is
                 * the positive number format in
                 * {@link Spotfire.Dxp.Data.Formatters.DataFormatterBase.CultureInfo}.
                 */
                static readonly Parentheses: NumberFormatNegativePattern;
                private __type_713670500: null;
            }
            
            /**
             * Abstract base class for number formatters.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class NumberFormatter extends DataFormatterBase implements IDataFormatter {
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.Formatters.NumberFormatCategory}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Category(): NumberFormatCategory;
                set Category(value: NumberFormatCategory);
                /**
                 * Gets or sets the name of the culture that defines the currency formatting.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CurrencyCultureName(): JsType<System.String>;
                set CurrencyCultureName(value: JsType<System.String>);
                /**
                 * Gets or sets the number of decimal digits.
                 * If not explicitly set, a default value is returned according to
                 * the current {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.Category}:
                 * <list><item>General: -1 (not applicable)</item><item>Number:
                 * CultureInfo.NumberFormat.NumberDecimalDigits</item><item>Currency:
                 * CultureInfo.NumberFormat.CurrencyDecimalDigits</item><item>Percentage:
                 * CultureInfo.NumberFormat.PercentDecimalDigits</item><item>Scientific: 6 </item><item>Custom: -1 (not applicable)</item></list>
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DecimalDigits(): JsType<System.Int32>;
                set DecimalDigits(value: JsType<System.Int32>);
                /**
                 * Gets or sets a value indicating how decimal digits should be handled.
                 * {@link Spotfire.Dxp.Data.Formatters.NumberFormatter.DecimalDigitsMode}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DecimalDigitsMode(): DecimalDigitsMode;
                set DecimalDigitsMode(value: DecimalDigitsMode);
                /**
                 * Gets or sets a format string that defines how values are formatted.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FormatString(): JsType<System.String>;
                set FormatString(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether the group separator is enabled or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get GroupSeparatorEnabled(): JsType<System.Boolean>;
                set GroupSeparatorEnabled(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the {@link Spotfire.Dxp.Data.Formatters.NumberFormatNegativePattern}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get NegativePattern(): NumberFormatNegativePattern;
                set NegativePattern(value: NumberFormatNegativePattern);
                /**
                 * Gets or sets a NumberStyles object that defines
                 * how string representations are parsed.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get NumberStyles(): JsType<System.Globalization.NumberStyles>;
                set NumberStyles(value: JsType<System.Globalization.NumberStyles>);
                /**
                 * Gets or sets a value indicating whether or not short number formatting should be used.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShortFormattingEnabled(): JsType<System.Boolean>;
                set ShortFormattingEnabled(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the symbol scheme to use for short number formatting.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ShortFormattingSymbolScheme(): ShortFormattingSymbolScheme;
                set ShortFormattingSymbolScheme(value: ShortFormattingSymbolScheme);
                /**
                 * Gets or sets a value indicating whether or not engineering notation
                 * should be used, which rounds the exponent in scientific formatting
                 * to a multiple of 3.
                 * The default value is false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get UseEngineeringNotation(): JsType<System.Boolean>;
                set UseEngineeringNotation(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Data_Formatters_IDataFormatter: Implementation<IDataFormatter>,
                };
                private __type_3079881944: null;
            }
            
            /**
             * Represents a symbol to substitute a power of 10,
             * used when formatting with short number format.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ShortFormattingSymbol extends Object {
                /**
                 * Gets the substituted power of 10.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Exponent(): JsType<System.Int32>;
                /**
                 * Gets the substituting symbol string.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Symbol(): JsType<System.String>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbol} class with the
                 * specified symbol substituting a power of 10, specified by exponent.
                 * @param symbol The substituting symbol string. May not be a digit or any of '{}'.
                 * @param exponent The substituted power of 10.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(symbol: (JsType<System.String> | System.String), exponent: (JsType<System.Int32> | System.Int32));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2474826124: null;
            }
            
            /**
             * Represents a named list of {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbol} objects,
             * used when formatting with short number format.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ShortFormattingSymbolScheme extends Object {
                /**
                 * Gets a new standard instance of this class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Standard(): ShortFormattingSymbolScheme;
                /**
                 * Gets the name of this {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbolScheme}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbol} list of this {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbolScheme}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Symbols(): System.Collections.Generic.IList<ShortFormattingSymbol>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbolScheme} class with the specified name
                 * and a copy of the {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbol} list.
                 * @param name The name for the new {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbolScheme}.
                 * @param symbols The {@link Spotfire.Dxp.Data.Formatters.ShortFormattingSymbol} list to include a copy of.
                 * May not contain any duplicate symbols or exponents.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(name: (JsType<System.String> | System.String), symbols: OrExplicit<System.Collections.Generic.IList<ShortFormattingSymbol>>);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2035143881: null;
            }
            
            /**
             * Formatter for string values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class StringFormatter extends DataFormatterBase implements IDataFormatter {
                /**
                 * Gets or sets a value indicating whether the formatted string is truncated or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Truncate(): JsType<System.Boolean>;
                set Truncate(value: JsType<System.Boolean>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Data_Formatters_IDataFormatter: Implementation<IDataFormatter>,
                };
                private __type_3060354472: null;
            }
            
            /**
             * Formatter for {@link Spotfire.Dxp.Data.DataType.TimeSpan} values.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TimeSpanFormatter extends DataFormatterBase implements IDataFormatter {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Data_Formatters_IDataFormatter: Implementation<IDataFormatter>,
                };
                private __type_3160960292: null;
            }
        }
        
        namespace Import {
            /**
             * This class exposes a {@link Spotfire.Dxp.Data.DataTable} as a {@link Spotfire.Dxp.Data.DataSource}.
             * Using it, existing tables can be duplicated, transformed and accessed through
             * add operations (for example adding rows and adding columns). Note that this data source
             * can only be used when a document is present and there exists one or more
             * tables to use as source.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataTableDataSource extends DataSource {
                /** Gets a document title for the data returned from this data source with the current configuration. */
                get DocumentTitle(): JsType<System.String>;
                /** Gets a value indicating whether this instance supports linked data mode or not. */
                get IsLinkable(): JsType<System.Boolean>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.DataTableDataSource} class.
                 * @param dataTable The {@link Spotfire.Dxp.Data.DataTable} to use as source.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(dataTable: DataTable);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.DataTableDataSource} class.
                 * @param dataTable The {@link Spotfire.Dxp.Data.DataTable} to use as source.
                 * @param dataSelection The data selection to limit the rows by.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(dataTable: DataTable, dataSelection: DataSelection);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.DataTableDataSource} class.
                 * @param dataTable The {@link Spotfire.Dxp.Data.DataTable} to use as source.
                 * @param updateBehavior The update behavior.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(dataTable: DataTable, updateBehavior: DataTableDataSourceUpdateBehavior);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_130771578: null;
            }
            
            /**
             * Represents the update behavior of a data table data source.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataTableDataSourceUpdateBehavior extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Automatic update. */
                static readonly Automatic: DataTableDataSourceUpdateBehavior;
                /** Only updates on load or reload. */
                static readonly Manual: DataTableDataSourceUpdateBehavior;
                private __type_3735356003: null;
            }
            
            /**
             * This is a context object that is used by a {@link Spotfire.Dxp.Data.DataTransformation}
             * during import. It is used to gain access to the services provided by the application.
             * It can be accessed from the AnalysisApplication object.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ImportContext extends Object implements System.IServiceProvider {
                /**
                 * Gets the parameter manager.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ParameterManager(): Framework.ApplicationModel.ParameterManager;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Gets the service object of the specified type.
                 * @param serviceType An object that specifies the type of service object to get.
                 * @returns A service object of type serviceType.
                 *  -or-
                 *  null if there is no service object of type serviceType.
                 */
                GetService(serviceType: (JsType<System.Type> | System.Type)): unknown;
                /**
                 * Convenience method to fetch a service.
                 * @returns The service implementation requested.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeT - @@Generic type argument
                 */
                GetService<T>(typeT: TypeRefParam<T>): JsType<T>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                };
                private __type_182322595: null;
            }
            
            /**
             * Data source for information links.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class InformationLinkDataSource extends DataSource {
                /**
                 * Gets a document title for the data returned from this data source with the current configuration.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get DocumentTitle(): JsType<System.String>;
                /**
                 * Gets or sets the id of a referenced information link stored on the server.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Id(): JsType<System.Guid>;
                set Id(value: JsType<System.Guid>);
                /**
                 * Returns true to indicate that this instance supports linked data mode.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get IsLinkable(): JsType<System.Boolean>;
                /**
                 * Gets or sets a list of parameters that are applied when executing the information link.
                 * Parameters for elements that are not included in the information link will be ignored. If prompting is enabled a parameter
                 * is used as default value in a prompt step if the target element is the same. If prompting is not enabled, the parameters
                 * will be applied unchanged, unless prompt values were saved in the document previously.
                 * Parameters for elements not included in any prompt steps are applied unchanged (also in the prompt steps).
                 * The parameters are persisted with the data source when saving an analysis, and are re-applied when opening the same analysis.
                 * See {@link Spotfire.Dxp.Data.Import.InformationLinkParameter} for a description on how to create a parameter.
                 * This argument is optional and may be set to null.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Parameters(): System.Collections.Generic.IList<InformationLinkParameter>;
                set Parameters(value: OrExplicit<System.Collections.Generic.IList<InformationLinkParameter>>);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.InformationLinkDataSource} class.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                constructor();
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.InformationLinkDataSource} class.
                 * @param informationLinkId The unique identifier for the information link.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                constructor(informationLinkId: (JsType<System.Guid> | System.Guid));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.InformationLinkDataSource} class.
                 * @param informationLinkLibraryItem The LibraryItem representing the information link.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                constructor(informationLinkLibraryItem: Framework.Library.LibraryItem);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.InformationLinkDataSource} class.
                 * @param informationLinkId The unique identifier for the information link.
                 * @param parameters A list of parameters that are applied when executing the information link.
                 * Parameters for elements that are not included in the information link will be ignored. If prompting is enabled a parameter
                 * is used as default value in a prompt step if the target element is the same. If prompting is not enabled, the parameters
                 * will be applied unchanged, unless prompt values were saved in the document previously.
                 * Parameters for other elements not included in any prompt steps are applied unchanged (also in the prompt steps).
                 * The parameters are persisted with the data source when saving an analysis, and are re-applied when opening the same analysis.
                 * See {@link Spotfire.Dxp.Data.Import.InformationLinkParameter} for a description on how to create a parameter.
                 * This argument is optional and may be set to null.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                constructor(informationLinkId: (JsType<System.Guid> | System.Guid), parameters: OrExplicit<System.Collections.Generic.IEnumerable<InformationLinkParameter>>);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.InformationLinkDataSource} class.
                 * @param informationLinkId The unique identifier for the information link.
                 * @param parameters A list of parameters that are applied when executing the information link.
                 * Parameters for elements that are not included in the information link will be ignored. If prompting is enabled a parameter
                 * is used as default value in a prompt step if the target element is the same. If prompting is not enabled, the parameters
                 * will be applied unchanged, unless prompt values were saved in the document previously.
                 * Parameters for other elements not included in any prompt steps are applied unchanged (also in the prompt steps).
                 * The parameters are persisted with the data source when saving an analysis, and are re-applied when opening the same analysis.
                 * See {@link Spotfire.Dxp.Data.Import.InformationLinkParameter} for a description on how to create a parameter.
                 * This argument is optional and may be set to null.
                 * @param documentTitle The document title, overriding the default derived from the name of the information link,
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                constructor(informationLinkId: (JsType<System.Guid> | System.Guid), parameters: OrExplicit<System.Collections.Generic.IEnumerable<InformationLinkParameter>>, documentTitle: (JsType<System.String> | System.String));
                /**
                 * Lets the user browse or search for an information link.
                 * @returns The selected information link, or null if no selection was done.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static BrowseForInformationLink(): InformationLinkDescriptor;
                /**
                 * Call this method with a search expression to get a collection of InformationLinkDescriptors matching the expression.
                 * @param searchExpression A search expression for matching metadata of InformationLinks
                 * in the form property:value (matching begining of words) or property::value (exact match)
                 * e.g. name::baseball.
                 * @returns Information link descriptors representing the elements matching the expression. If no match, the list is empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static FindAll(searchExpression: (JsType<System.String> | System.String)): InformationLinkDescriptorCollection;
                /**
                 * Get an {@link Spotfire.Dxp.Data.Import.InformationLinkDescriptor} corresponding to given identifier.
                 * @param informationLinkId The unique identifier for the information link.
                 * @returns Information link descriptors or null (if not eavailable).
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static GetInformationLinkDescriptor(informationLinkId: (JsType<System.Guid> | System.Guid)): InformationLinkDescriptor;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4099152448: null;
            }
            
            /**
             * Container class for information around InformationLink.
             * {@link Spotfire.Dxp.Data.Import.InformationModelElementDescriptor} for information on common element properties.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class InformationLinkDescriptor extends InformationModelElementDescriptor {
                /**
                 * Get a read only list of the filter parameters for the InformationLink.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get FilterParameters(): System.Collections.Generic.IList<InformationLinkParameter>;
                /**
                 * Get a read only list of the named parameters for the InformationLink.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get NamedParameters(): System.Collections.Generic.IList<InformationLinkParameter>;
                /**
                 * Get a read only list of the referenced parameters for the InformationLink.
                 * That is, parameters for procedures referenced by the InformationLink.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ReferencedParameters(): System.Collections.Generic.IList<InformationLinkParameter>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Get descriptor for element referenced by the InformationLink.
                 * @param id identifier of referenced element
                 * @returns Descriptor of referenced element, or null if not found
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                GetReferencedElementDescriptor(id: (JsType<System.Guid> | System.Guid)): InformationModelElementDescriptor;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3526901636: null;
            }
            
            /**
             * Collection of InformationLinkDescriptors
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class InformationLinkDescriptorCollection extends Object implements Explicit<System.Collections.Generic.IEnumerable<InformationLinkDescriptor>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * The total number of {@link Spotfire.Dxp.Data.Import.InformationLinkDescriptor}s in this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * Get the first {@link Spotfire.Dxp.Data.Import.InformationLinkDescriptor} of this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get First(): InformationLinkDescriptor;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<InformationLinkDescriptor>;
                /**
                 * Enumerator for all {@link Spotfire.Dxp.Data.Import.InformationLinkDescriptor}s in this collection.
                 * @returns An enumerator for this collection
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<InformationLinkDescriptor>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<InformationLinkDescriptor>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_1523234156: null;
            }
            
            /**
             * Defines a runtime parameter in an information link execution.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class InformationLinkParameter extends Object {
                /**
                 * Gets the identifier for the element (column or procedure) in the information link that this parameter applies to.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ElementIdentifier(): JsType<System.Guid>;
                /**
                 * Gets the expression for a filter parameter.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Expression(): JsType<System.String>;
                /**
                 * Gets the parameter data type.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ExternalDataType(): InformationModel.ExternalDataType;
                /**
                 * Gets a parameter identifier local for the current element (see {@link Spotfire.Dxp.Data.Import.InformationLinkParameter.ElementIdentifier}).
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ParameterId(): JsType<System.String>;
                /**
                 * Gets the parameter values.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Values(): TypedArray<unknown>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a new InformationLinkParameter representing a filter parameter.
                 * @param elementId The element id.
                 * @param expression The expression.
                 * @param values The values.
                 * @returns A new InformationLinkParameter.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static CreateFilterParameter(elementId: (JsType<System.Guid> | System.Guid), expression: (JsType<System.String> | System.String), values: (TypedArray<any> | TypedArray<System.Object>)): InformationLinkParameter;
                /**
                 * Creates a new InformationLinkParameter representing a filter parameter.
                 * @param elementId The element id.
                 * @param expression The expression.
                 * @param values The values.
                 * @param dataType Type data type, one of String, Integer, Real, Date, Time, DateTime, Clob or Blob.
                 * @returns A new InformationLinkParameter.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static CreateFilterParameter(elementId: (JsType<System.Guid> | System.Guid), expression: (JsType<System.String> | System.String), values: (TypedArray<any> | TypedArray<System.Object>), dataType: InformationModel.ExternalDataType): InformationLinkParameter;
                /**
                 * Creates a new InformationLinkParameter that represents a named parameter defined in the information model.
                 * @param parameterName The parameter name.
                 * @param values The values.
                 * @returns A new InformationLinkParameter.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static CreateNamedParameter(parameterName: (JsType<System.String> | System.String), values: (TypedArray<any> | TypedArray<System.Object>)): InformationLinkParameter;
                /**
                 * Creates a new InformationLinkParameter that represents a local parameter defined in the specified procedure element.
                 * @param elementId The element id.
                 * @param parameterId The parameter id.
                 * @param values The values.
                 * @returns A new InformationLinkParameter.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static CreateReferencedParameter(elementId: (JsType<System.Guid> | System.Guid), parameterId: (JsType<System.String> | System.String), values: (TypedArray<any> | TypedArray<System.Object>)): InformationLinkParameter;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2826250516: null;
            }
            
            /**
             * Container class for metadata around InformationModel elements.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class InformationModelElementDescriptor extends Object {
                /**
                 * Get a description of the element.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the element identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Identifier(): JsType<System.Guid>;
                /**
                 * Get the element name.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Name(): JsType<System.String>;
                /**
                 * Get current path for the element.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Path(): JsType<System.String>;
                /**
                 * Get element metadata as a read only Dictionary of key value pairs.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Properties(): System.Collections.Generic.IDictionary<JsType<System.String>, System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3176219535: null;
            }
            
            /**
             * A SBDF data source that loads data from the library.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class SbdfLibraryDataSource extends DataSource {
                /** Gets a document title for the data returned from this data source with the current configuration. */
                get DocumentTitle(): JsType<System.String>;
                /** Gets a value indicating whether this instance supports linked data mode. */
                get IsLinkable(): JsType<System.Boolean>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.SbdfLibraryDataSource} class.
                 * @param libraryItem The library item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                constructor(libraryItem: Framework.Library.LibraryItem);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3680053072: null;
            }
            
            /**
             * Settings for the {@link Spotfire.Dxp.Data.Import.TextFileDataSource} class.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TextDataReaderSettings extends Object {
                /**
                 * Gets or sets a value indicating whether the data set has quoted fields which
                 * contain newline characters (that is, multi-line fields).
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get AllowNewlinesInQuotedFields(): JsType<System.Boolean>;
                set AllowNewlinesInQuotedFields(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the code page.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CodePage(): JsType<System.Int32>;
                set CodePage(value: JsType<System.Int32>);
                /**
                 * Gets or sets the format string used to concatenate the column names if
                 * there are more than one column name row defined.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnNameConcatenation(): JsType<System.String>;
                set ColumnNameConcatenation(value: JsType<System.String>);
                /**
                 * Gets or sets the way an empty field is replaced if there are
                 * more than one name row.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnNameNullValueReplacement(): TextDataReaderSettings.ColumnNameNullValueReplacementType;
                set ColumnNameNullValueReplacement(value: TextDataReaderSettings.ColumnNameNullValueReplacementType);
                /**
                 * Gets or sets the string used to replace empty fields when
                 * concatenation column names.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnNameNullValueReplacementString(): JsType<System.String>;
                set ColumnNameNullValueReplacementString(value: JsType<System.String>);
                /**
                 * Gets a readonly collection of column name rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnNameRows(): System.Collections.ObjectModel.ReadOnlyCollection<JsType<System.Int32>>;
                /**
                 * Gets or sets the string describing how a commented line starts.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CommentPrefix(): JsType<System.String>;
                set CommentPrefix(value: JsType<System.String>);
                /**
                 * Gets or sets the number of columns in the data set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ConstantFieldCount(): JsType<System.Int32>;
                set ConstantFieldCount(value: JsType<System.Int32>);
                /**
                 * Gets or sets the name of the explicitly set culture. Example: "en-US" for
                 * English(United States) culture settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CultureName(): JsType<System.String>;
                set CultureName(value: JsType<System.String>);
                /**
                 * Gets a mapping (Dictionary) between column names and column types.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataTypesGivenName(): System.Collections.Generic.Dictionary<JsType<System.String>, DataType>;
                /**
                 * Gets or sets the default column name. Add a "{0}" to get a 1-based index
                 * applied to the column name.
                 * If no "{0}" is added, one will be automatically appended to the end.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DefaultColumnName(): JsType<System.String>;
                set DefaultColumnName(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether the data set has quote characters.
                 * The quote character to use is set in {@link Spotfire.Dxp.Data.Import.TextDataReaderSettings.QuoteChar}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HasQuoteChar(): JsType<System.Boolean>;
                set HasQuoteChar(value: JsType<System.Boolean>);
                /**
                 * Gets or sets a value indicating whether the data has trailing separator.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get HasTrailingSeparator(): JsType<System.Boolean>;
                set HasTrailingSeparator(value: JsType<System.Boolean>);
                /**
                 * Gets a readonly collection of ignored columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IgnoreColumns(): System.Collections.ObjectModel.ReadOnlyCollection<JsType<System.Int32>>;
                /**
                 * Gets a readonly collection of ignored rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IgnoreRows(): System.Collections.ObjectModel.ReadOnlyCollection<JsType<System.Int32>>;
                /**
                 * Gets or sets the minimum number of columns in the data set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MinimumFieldCount(): JsType<System.Int32>;
                set MinimumFieldCount(value: JsType<System.Int32>);
                /**
                 * Gets or sets the string describing how a null value will be
                 * described in the data set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get NullValueDescriptor(): JsType<System.String>;
                set NullValueDescriptor(value: JsType<System.String>);
                /**
                 * Gets or sets the quote character.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get QuoteChar(): JsType<System.Char>;
                set QuoteChar(value: JsType<System.Char>);
                /**
                 * Gets or sets the quote character escape sequence.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get QuoteCharEscape(): JsType<System.String>;
                set QuoteCharEscape(value: JsType<System.String>);
                /**
                 * Gets or sets a value indicating whether this instance is readonly.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ReadOnly(): JsType<System.Boolean>;
                set ReadOnly(value: JsType<System.Boolean>);
                /**
                 * Gets or sets the separator string used to split the data set
                 * into fields.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Separator(): JsType<System.String>;
                set Separator(value: JsType<System.String>);
                /**
                 * Gets or sets the row to start reading from.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get StartReadingRow(): JsType<System.Int32>;
                set StartReadingRow(value: JsType<System.Int32>);
                /**
                 * Gets or sets the types row.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TypesRow(): JsType<System.Int32>;
                set TypesRow(value: JsType<System.Int32>);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.TextDataReaderSettings} class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor();
                /**
                 * Validates the data type string, and if valid return the
                 * corresponding data type, otherwise returns Undefined.
                 * @param type A string representation of a data type.
                 * @returns Returns the data type if the input string is valid, otherwize; Undefined.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static ValidateColumnType(type: (JsType<System.String> | System.String)): DataType;
                /**
                 * Verifies if the string is a valid default column name string.
                 * @param name The string to test.
                 * @returns true if the string is valid, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static VerifyDefaultColumnName(name: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Verifies if the string is a valid default column name string.
                 * @param name The string to test.
                 * @param allowed The allowed integers.
                 * @returns true if the string is valid, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static VerifyDefaultColumnName(name: (JsType<System.String> | System.String), allowed: (JsType<System.String> | System.String)): JsType<System.Boolean>;
                /**
                 * Adds the provided row to the list of column name rows.
                 * @param row The row to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddColumnNameRow(row: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Adds the provided rows to the list of column name rows.
                 * @param rows The rows to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddColumnNameRows(rows: (TypedArray<JsType<System.Int32>> | TypedArray<System.Int32>)): void;
                /**
                 * Adds the provided column to the list of ignored columns.
                 * @param column The column to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddIgnoreColumn(column: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Adds the provided columns to the list of ignore columns.
                 * @param columns The columns to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddIgnoreColumns(columns: (TypedArray<JsType<System.Int32>> | TypedArray<System.Int32>)): void;
                /**
                 * Adds the provided row to the list of ignored rows.
                 * @param row The row to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddIgnoreRow(row: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Adds the provided rows to the list of ignored rows.
                 * @param rows The rows to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddIgnoreRows(rows: (TypedArray<JsType<System.Int32>> | TypedArray<System.Int32>)): void;
                /**
                 * Adds a column to the list of percent columns.
                 * @param column The column to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddPercentColumn(column: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Clears the list of column name rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearColumnNameRows(): void;
                /**
                 * Clears the list of column names. If the clearPersisted
                 * flag is false, the persisted names are kept.
                 * @param clearPersisted A value indicating whether the persisted
                 * column names should be cleared as well.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearColumnNames(clearPersisted: (JsType<System.Boolean> | System.Boolean)): void;
                /**
                 * Clears the list of data types. If the clearPersisted
                 * flag is false, the persisted data types are kept.
                 * @param clearPersisted A value indicating whether the persisted
                 * data types should be cleared as well.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearDataTypes(clearPersisted: (JsType<System.Boolean> | System.Boolean)): void;
                /**
                 * Clears the list of formatters. If the clearPersisted
                 * flag is false, the persisted formatters are kept.
                 * @param clearPersisted A flag to specify if the persisted
                 * formatters should be cleared as well.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearFormatters(clearPersisted: (JsType<System.Boolean> | System.Boolean)): void;
                /**
                 * Clears the list of ignored columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearIgnoreColumns(): void;
                /**
                 * Clears the list of ignored rows.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearIgnoreRows(): void;
                /**
                 * Clear the list of parsers.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearParsers(): void;
                /**
                 * Clears the list of Percent columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ClearPercentColumns(): void;
                /**
                 * Makes a clone of the settings object.
                 * @returns A clone of this settings object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clone(): TextDataReaderSettings;
                /**
                 * Gets the name for a specific column.
                 * @param column The column to get the name for.
                 * @returns The column name if found; otherwise null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetColumnName(column: (JsType<System.Int32> | System.Int32)): JsType<System.String>;
                /**
                 * Gets the offset for the column, that is the count of
                 * ignored columns prior to this column. This is used when reading the data in
                 * {@link Spotfire.Dxp.Data.Import.TextDataReader}.
                 * @param column The column to get the offset for.
                 * @returns The offset.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetColumnOffset(column: (JsType<System.Int32> | System.Int32)): JsType<System.Int32>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.DataType} for a specific column.
                 * @param column The column to return the {@link Spotfire.Dxp.Data.DataType}
                 * for.
                 * @returns The {@link Spotfire.Dxp.Data.DataType}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetDataType(column: (JsType<System.Int32> | System.Int32)): DataType;
                /**
                 * Gets the Spotfire type for the specified column.
                 * @param column The column.
                 * @returns The Spotfire type
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetDataTypeName(column: (JsType<System.Int32> | System.Int32)): JsType<System.String>;
                /**
                 * Gets the {@link Spotfire.Dxp.Data.Formatters.IDataFormatter} for the provided column.
                 * @param column The column to get the formatter for.
                 * @returns A {@link Spotfire.Dxp.Data.Formatters.IDataFormatter}; otherwise null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetFormatter(column: (JsType<System.Int32> | System.Int32)): Formatters.IDataFormatter;
                /**
                 * Gets the invariant currency symbol, if one exists.
                 * @param column The column to get the invariant currency symbol for.
                 * @returns The invariant currency symbol, or null if there was none..
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetInvariantCurrencySymbol(column: (JsType<System.Int32> | System.Int32)): JsType<System.String>;
                /**
                 * Gets the parser that will be used to parse
                 * this column. If none has been set, {@link System.Globalization.NumberStyles.None}
                 * will be returned.
                 * @param column The column to get the parser for.
                 * @returns A specified {@link System.Globalization.NumberStyles} object,
                 * or {@link System.Globalization.NumberStyles.None}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetParser(column: (JsType<System.Int32> | System.Int32)): JsType<System.Globalization.NumberStyles>;
                /**
                 * Returns true if there are any type or name rows with higher
                 * number than the provided row number.
                 * @returns True if more headers exists.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                HasMoreHeaders(row: (JsType<System.Int32> | System.Int32)): JsType<System.Boolean>;
                /**
                 * Returns true if the provided column is present in the
                 * list of percent columns.
                 * @param column The column to look for.
                 * @returns True if the column existed in the list.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsPercentColumn(column: (JsType<System.Int32> | System.Int32)): JsType<System.Boolean>;
                /**
                 * Removes the column name from the list of column names.
                 * @param column The column to remove the name for.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveColumnName(column: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the provided rows from the list of column name rows.
                 * @param rows The rows to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveColumnNameRows(rows: (TypedArray<JsType<System.Int32>> | TypedArray<System.Int32>)): void;
                /**
                 * Removes the stored data type for the specified column.
                 * @param column The column to remove the data type for.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveDataType(column: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the {@link Spotfire.Dxp.Data.Formatters.IDataFormatter} for the provided column.
                 * @param column The column to remove the {@link Spotfire.Dxp.Data.Formatters.IDataFormatter} for.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveFormatter(column: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the provided columns to the list of ignored columns.
                 * @param columns The columns to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveIgnoreColumns(columns: (TypedArray<JsType<System.Int32>> | TypedArray<System.Int32>)): void;
                /**
                 * Removes the provided rows from the list of ignored rows.
                 * @param rows The rows to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveIgnoreRows(rows: (TypedArray<JsType<System.Int32>> | TypedArray<System.Int32>)): void;
                /**
                 * Removes the parser for the provided column from the list
                 * of parsers, if it exists.
                 * @param column The column to remove the parser for.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveParser(column: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the provided column from the list of percent columns,
                 * if it exists.
                 * @param column The column to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemovePercentColumn(column: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Explicitly sets the name of a column.
                 * @param column The column to set the name for.
                 * @param name The name to set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetColumnName(column: (JsType<System.Int32> | System.Int32), name: (JsType<System.String> | System.String)): void;
                /**
                 * Explicitly sets the {@link Spotfire.Dxp.Data.DataType} of a column.
                 * @param column The column to set the type for.
                 * @param type The {@link Spotfire.Dxp.Data.DataType} to set the column to.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetDataType(column: (JsType<System.Int32> | System.Int32), type: DataType): void;
                /**
                 * Sets the {@link Spotfire.Dxp.Data.Formatters.IDataFormatter} for the provided column.
                 * @param column The column to set the {@link Spotfire.Dxp.Data.Formatters.IDataFormatter} for.
                 * @param formatter The {@link Spotfire.Dxp.Data.Formatters.IDataFormatter}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetFormatter(column: (JsType<System.Int32> | System.Int32), formatter: Formatters.IDataFormatter): void;
                /**
                 * Sets the invariant currency symbol for the provided column index.
                 * @param column The column to set the invariant currency symbol for.
                 * @param symbol The symbol to set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetInvariantCurrencySymbol(column: (JsType<System.Int32> | System.Int32), symbol: (JsType<System.String> | System.String)): void;
                /**
                 * Sets the parser to use for the provided column.
                 * @param column The column to set parser for.
                 * @param parser The parser.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                SetParser(column: (JsType<System.Int32> | System.Int32), parser: (JsType<System.Globalization.NumberStyles> | System.Globalization.NumberStyles)): void;
                /**
                 * A sanity check to make sure that no name rows, type row or ignored rows
                 * are the same.
                 * @returns true if the combination of rows is valid.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ValidateUniqueLines(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2311213528: null;
            }
            
            /**
             * Data Source for delimited text files. Used when loading and saving linked data.
             * Provides handle to a TextDataReader for text data retrieval.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TextFileDataSource extends DataSource {
                /**
                 * Gets or sets the settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Settings(): TextDataReaderSettings;
                set Settings(value: TextDataReaderSettings);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.TextFileDataSource} class.
                 * @param stream The stream.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(stream: (JsType<System.IO.Stream> | System.IO.Stream));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Import.TextFileDataSource} class.
                 * @param stream The stream.
                 * @param settings The settings.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(stream: (JsType<System.IO.Stream> | System.IO.Stream), settings: TextDataReaderSettings);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_97183487: null;
            }
            
            namespace TextDataReaderSettings {
                /**
                 * Defines how null values should be replaced.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ColumnNameNullValueReplacementType extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Replace null values from left. */
                    static readonly FromLeft: ColumnNameNullValueReplacementType;
                    /** No replacement of null values. */
                    static readonly None: ColumnNameNullValueReplacementType;
                    /** Replace null values with a specified replacement string. */
                    static readonly ReplacementString: ColumnNameNullValueReplacementType;
                    private __type_2963583009: null;
                }
            }
        }
        
        namespace InformationModel {
            /**
             * Represents a path to a a metadata item in a data source in Information Services.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataSourceItemPath extends Object {
                /**
                 * Gets the name of the catalog. May be null or empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                get Catalog(): JsType<System.String>;
                /**
                 * Gets the name of the procedure. May be null or empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                get Procedure(): JsType<System.String>;
                /**
                 * Gets the name of the schema. May be null or empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                get Schema(): JsType<System.String>;
                /**
                 * Gets the name of the table. May be null or empty.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                get Table(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a path to a catalog.
                 * @param catalog The name of the catalog.
                 * @returns The newly created path.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                static CreateCatalog(catalog: (JsType<System.String> | System.String)): DataSourceItemPath;
                /**
                 * Creates a path to a procedure.
                 * @param catalog The name of the catalog. Null or empty if it does not exist.
                 * @param schema The name of the schema. Null or empty if it does not exist.
                 * @param procedure The name of the procedure.
                 * @returns The newly created path.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                static CreateProcedure(catalog: (JsType<System.String> | System.String), schema: (JsType<System.String> | System.String), procedure: (JsType<System.String> | System.String)): DataSourceItemPath;
                /**
                 * Creates a path to a schema.
                 * @param catalog The name of the catalog. Null or empty if it does not exist.
                 * @param schema The name of the schema.
                 * @returns The newly created path.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                static CreateSchema(catalog: (JsType<System.String> | System.String), schema: (JsType<System.String> | System.String)): DataSourceItemPath;
                /**
                 * Creates a path to a table.
                 * @param catalog The name of the catalog. Null or empty if it does not exist.
                 * @param schema The name of the schema. Null or empty if it does not exist.
                 * @param table The name of the table.
                 * @returns The newly created path.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                static CreateTable(catalog: (JsType<System.String> | System.String), schema: (JsType<System.String> | System.String), table: (JsType<System.String> | System.String)): DataSourceItemPath;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2303579082: null;
            }
            
            /**
             * Specifies the data type of data source columns in the information model. Can be converted
             * to client side datatype with {@link Spotfire.Dxp.Data.DataType.FromExternalDataType|FromExternalDataType(type)}
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExternalDataType extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** A blob column. */
                static readonly Blob: ExternalDataType;
                /** A bool column. */
                static readonly Boolean: ExternalDataType;
                /** A clob column, which in most ways is handled as a string column. */
                static readonly Clob: ExternalDataType;
                /** A currency column. */
                static readonly Currency: ExternalDataType;
                /** A date column. */
                static readonly Date: ExternalDataType;
                /** A date time column. */
                static readonly DateTime: ExternalDataType;
                /** A integer column. */
                static readonly Integer: ExternalDataType;
                /** A long integer column. */
                static readonly LongInteger: ExternalDataType;
                /** A real column. */
                static readonly Real: ExternalDataType;
                /** A single real column. */
                static readonly SingleReal: ExternalDataType;
                /** A string column. */
                static readonly String: ExternalDataType;
                /** A time column. */
                static readonly Time: ExternalDataType;
                /** The data type is unknown or unsupported. */
                static readonly Undefined: ExternalDataType;
                private __type_3015070904: null;
            }
            
            /**
             * Provides access to Information Services.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class InformationModelManager extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a default model for the specified meta data items in a data source.
                 * @param destinationFolder The library folder to save the result in.
                 * @param dataSource The data source in which the itemPaths live.
                 * @param itemPaths The items in the dataSource for which to create a default model.
                 * @param settings The metadata that will be applied to each element that is created.
                 * @param nameConflictStrategy Determines what happens if names of items that are created clashes with existing items in
                 * the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                CreateDefaultInformationModel(destinationFolder: Framework.Library.LibraryItem, dataSource: Framework.Library.LibraryItem, itemPaths: OrExplicit<System.Collections.Generic.IEnumerable<DataSourceItemPath>>, settings: Framework.Library.LibraryItemMetadataSettings, nameConflictStrategy: NameConflictStrategy): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2115316279: null;
            }
            
            /**
             * Represents a strategy for resolving name conflicts when
             * saving to the library.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class NameConflictStrategy extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Resolve by renaming the new item to a unique name. */
                static readonly CreateUniqueName: NameConflictStrategy;
                /** Resolve by not saving the new item. */
                static readonly Ignore: NameConflictStrategy;
                /** Resolve by replacing the old item with the new. */
                static readonly Replace: NameConflictStrategy;
                /** Resolve by throwing exception. */
                static readonly ThrowException: NameConflictStrategy;
                private __type_1121732497: null;
            }
        }
        
        namespace Transformations {
            /**
             * Represents a {@link Spotfire.Dxp.Data.DataTransformation} that uses an {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformation}
             * to create a new calculated column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class AddCalculatedColumnTransformation extends ExpressionTransformationWrapper {
                /**
                 * Gets or sets the expression that defines the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                set Expression(value: JsType<System.String>);
                /**
                 * Gets or sets the formatter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Formatter(): Formatters.IDataFormatter;
                set Formatter(value: Formatters.IDataFormatter);
                /**
                 * Gets or sets the name of the column to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ResultColumnName(): JsType<System.String>;
                set ResultColumnName(value: JsType<System.String>);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.AddCalculatedColumnTransformation} class.
                 * @param resultColumnName The name of the column to add. Can be null or empty, in which case the expression is used as name.
                 * @param expression The expression that defines the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(resultColumnName: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.AddCalculatedColumnTransformation} class.
                 * @param resultColumnName The name of the column to add. Can be null or empty, in which case the expression is used as name.
                 * @param expression The expression that defines the column.
                 * @param formatter The formatter to set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(resultColumnName: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String), formatter: Formatters.IDataFormatter);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3756758392: null;
            }
            
            /**
             * Represents a {@link Spotfire.Dxp.Data.DataTransformation} that uses an {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformation}
             * to change the {@link Spotfire.Dxp.Data.DataType} of one or more columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ChangeDataTypeTransformation extends ExpressionTransformationWrapper {
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.ChangeDataTypeTransformation} class.
                 * @param columns The columns that should change {@link Spotfire.Dxp.Data.DataType}.
                 * @param newDataType The {@link Spotfire.Dxp.Data.DataType} to change to.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(columns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>, newDataType: DataType);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.ChangeDataTypeTransformation} class.
                 * @param columns The columns that should change {@link Spotfire.Dxp.Data.DataType}.
                 * @param newDataType The {@link Spotfire.Dxp.Data.DataType} to change to.
                 * @param formatter The formatter to set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(columns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>, newDataType: DataType, formatter: Formatters.IDataFormatter);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4255685029: null;
            }
            
            /**
             * Represents a {@link Spotfire.Dxp.Data.DataTransformation} that uses an {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformation}
             * to change the name of one or more columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ChangeNameTransformation extends ExpressionTransformationWrapper {
                /**
                 * Gets or sets the expression that defines the new name of the columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnNameExpression(): JsType<System.String>;
                set ColumnNameExpression(value: JsType<System.String>);
                /**
                 * Gets the columns that are renamed using the {@link Spotfire.Dxp.Data.Transformations.ChangeNameTransformation.ColumnNameExpression}, as a modifiable list.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnsToRename(): System.Collections.Generic.IList<DataColumnSignature>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.ChangeNameTransformation} class.
                 * @param columnsToRename The columns that should be renamed.
                 * @param columnNameExpression The expression (using {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformation.ColumnNameSymbol}) or name to use when naming columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(columnsToRename: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>, columnNameExpression: (JsType<System.String> | System.String));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_210708166: null;
            }
            
            /**
             * Represents an added calculated column in the expression transformation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnAddition extends Object {
                /**
                 * The name of the column to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnNameExpression(): JsType<System.String>;
                /**
                 * The expression that defines the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                /**
                 * The formatter used. If it is null, the default formatter for the
                 * data type of the expression result will be used.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Formatter(): Formatters.IDataFormatter;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4105480034: null;
            }
            
            /**
             * Represents a collection of columns to add.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnAdditionCollection extends Object implements Explicit<System.Collections.Generic.IList<ColumnAddition>>, Explicit<System.Collections.Generic.ICollection<ColumnAddition>>, Explicit<System.Collections.Generic.IEnumerable<ColumnAddition>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * The number of items in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * Gets a value indicating whether the collection is read-only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsReadOnly(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<ColumnAddition>;
                /**
                 * Adds a column computed from the expression.
                 * @param expression The expression that defines the column.
                 * @returns The newly created {@link Spotfire.Dxp.Data.Transformations.ColumnAddition}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(expression: (JsType<System.String> | System.String)): ColumnAddition;
                /**
                 * Adds a column computed from the expression.
                 * @param columnNameExpression The name of the resulting column.
                 * @param expression The expression used to compute the column.
                 * @returns The newly created {@link Spotfire.Dxp.Data.Transformations.ColumnAddition}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(columnNameExpression: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String)): ColumnAddition;
                /**
                 * Adds a column computed from the expression.
                 * @param expression The expression that defines the column.
                 * @param formatter The formatter to use for the resulting column.
                 * @returns The newly created {@link Spotfire.Dxp.Data.Transformations.ColumnAddition}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(expression: (JsType<System.String> | System.String), formatter: Formatters.IDataFormatter): ColumnAddition;
                /**
                 * Adds a column computed from the expression.
                 * @param columnNameExpression The name of the resulting column.
                 * @param expression The expression used to compute the column.
                 * @param formatter The formatter used by the resulting column.
                 * @returns The newly created {@link Spotfire.Dxp.Data.Transformations.ColumnAddition}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(columnNameExpression: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String), formatter: Formatters.IDataFormatter): ColumnAddition;
                /**
                 * Clears the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines whether the collection contains a specific value.
                 * @param item The item to look for.
                 * @returns True if item was found, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(item: ColumnAddition): JsType<System.Boolean>;
                /**
                 * Copies the elements of the collection to an Array, starting at a particular Array index.
                 * @param array The one-dimensional Array that is the destination of the elements copied
                 * from this collection. The Array must have zero-based indexing.
                 * @param arrayIndex The zero-based index in the Array, at which to begin copying.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CopyTo(array: TypedArray<ColumnAddition>, arrayIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Returns an enumerator that iterates through a collection.
                 * @returns An IEnumerator object that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<ColumnAddition>;
                /**
                 * Returns the index of the item.
                 * @param item The item to look for.
                 * @returns The index of the item, if it was found. Otherwise -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(item: ColumnAddition): JsType<System.Int32>;
                /**
                 * Inserts an item at the specified index.
                 * @param index The zero-based index at which item should be inserted.
                 * @param item The object to insert.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Insert(index: (JsType<System.Int32> | System.Int32), item: ColumnAddition): void;
                /**
                 * Removes the first occurrence of a specific object from the collection.
                 * @param item The object to remove from the collection.
                 * @returns true if item was successfully removed from the collection; otherwise, false.
                 * This method also returns false if item is not found in the original collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: ColumnAddition): JsType<System.Boolean>;
                /**
                 * Removes the item at the specified index.
                 * @param index The zero-based index of the item to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<ColumnAddition>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<ColumnAddition>>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<ColumnAddition>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get or set.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), ColumnAddition> & PropertySet<(JsType<System.Int32> | System.Int32), ColumnAddition>);
                private __type_1779052202: null;
            }
            
            /**
             * A column aggregation is the combination of a
             * {@link Spotfire.Dxp.Data.DataColumnSignature} representing a column and
             * a string holding an Aggregation Method name.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnAggregation extends Object {
                /**
                 * Name of an Aggregation Method.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Aggregation(): (JsType<System.String> | null);
                /**
                 * Signature of a column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Column(): DataColumnSignature;
                /**
                 * Create a {@link Spotfire.Dxp.Data.Transformations.ColumnAggregation}.
                 * @param column The {@link Spotfire.Dxp.Data.DataColumnSignature} of the column to aggregate.
                 * @param aggregation The aggregation to use.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(column: DataColumnSignature, aggregation: (JsType<System.String> | System.String));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2912829120: null;
            }
            
            /**
             * Represents a removal of one or several columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnRemoval extends Object {
                /**
                 * Gets the column selection that determines which columns to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnSelection(): ColumnSelection;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_324101238: null;
            }
            
            /**
             * Represents a collection of columns to remove.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnRemovalCollection extends Object implements Explicit<System.Collections.Generic.IList<ColumnRemoval>>, Explicit<System.Collections.Generic.ICollection<ColumnRemoval>>, Explicit<System.Collections.Generic.IEnumerable<ColumnRemoval>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * The number of items in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * Gets a value indicating whether the collection is read-only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsReadOnly(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<ColumnRemoval>;
                /**
                 * Adds a selection of columns to remove.
                 * @param columnSelection Represents the columns to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(columnSelection: ColumnSelection): ColumnRemoval;
                /**
                 * Clears the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines whether the collection contains a specific value.
                 * @param item The item to look for.
                 * @returns True if item was found, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(item: ColumnRemoval): JsType<System.Boolean>;
                /**
                 * Copies the elements of the collection to an Array, starting at a particular Array index.
                 * @param array The one-dimensional Array that is the destination of the elements copied
                 * from this collection. The Array must have zero-based indexing.
                 * @param arrayIndex The zero-based index in array at which copying begins.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CopyTo(array: TypedArray<ColumnRemoval>, arrayIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Returns an enumerator that iterates through a collection.
                 * @returns An IEnumerator object that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<ColumnRemoval>;
                /**
                 * Returns the index of the item.
                 * @param item The item to look for.
                 * @returns The index of the item, if it was found. Otherwise -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(item: ColumnRemoval): JsType<System.Int32>;
                /**
                 * Inserts an item at the specified index.
                 * @param index The zero-based index at which item should be inserted.
                 * @param item The object to insert.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Insert(index: (JsType<System.Int32> | System.Int32), item: ColumnRemoval): void;
                /**
                 * Removes the first occurrence of a specific object from the collection.
                 * @param item The object to remove from the collection.
                 * @returns True if item was successfully removed from the collection; otherwise, false.
                 * This method also returns false if item is not found in the original collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: ColumnRemoval): JsType<System.Boolean>;
                /**
                 * Removes the item at the specified index.
                 * @param index The zero-based index of the item to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<ColumnRemoval>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<ColumnRemoval>>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<ColumnRemoval>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get or set.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), ColumnRemoval> & PropertySet<(JsType<System.Int32> | System.Int32), ColumnRemoval>);
                private __type_2033308422: null;
            }
            
            /**
             * Represents a replacement of one or several columns with a column formed from an expression in
             * the expression transformation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnReplacement extends Object {
                /**
                 * The expression that defines the name of the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnNameExpression(): JsType<System.String>;
                /**
                 * The columns that will be replaced by the calculated column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnSelection(): ColumnSelection;
                /**
                 * The expression that defines the column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                /**
                 * The formatter that will be used for the column. If it is null, the default formatter for the
                 * data type of the result will be used.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Formatter(): Formatters.IDataFormatter;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_863370542: null;
            }
            
            /**
             * Represents a collection of columns to replace.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnReplacementCollection extends Object implements Explicit<System.Collections.Generic.IList<ColumnReplacement>>, Explicit<System.Collections.Generic.ICollection<ColumnReplacement>>, Explicit<System.Collections.Generic.IEnumerable<ColumnReplacement>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * The number of items in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * Gets a value indicating whether the collection is read-only.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsReadOnly(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<ColumnReplacement>;
                /**
                 * Replace the columns in selection with one created from expression.
                 * @param expression The expression used to compute the column.
                 * @param selection The columns to replace.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(expression: (JsType<System.String> | System.String), selection: ColumnSelection): ColumnReplacement;
                /**
                 * Replace the columns in selection with one created from expression.
                 * @param expression The expression used to compute the column.
                 * @param selection The columns to replace.
                 * @param formatter The formatter to use for the resulting column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(expression: (JsType<System.String> | System.String), selection: ColumnSelection, formatter: Formatters.IDataFormatter): ColumnReplacement;
                /**
                 * Replace the columns in selection with one created from expression.
                 * @param nameExpression The name of the column.
                 * @param expression The expression used to compute the column.
                 * @param selection The columns to replace.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(nameExpression: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String), selection: ColumnSelection): ColumnReplacement;
                /**
                 * Replace the columns in selection with one created from expression.
                 * @param nameExpression The name of the column.
                 * @param expression The expression used to compute the column.
                 * @param selection The columns to replace.
                 * @param formatter The formatter to use for the resulting column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(nameExpression: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String), selection: ColumnSelection, formatter: Formatters.IDataFormatter): ColumnReplacement;
                /**
                 * Clears the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Determines whether the collection contains a specific value.
                 * @param item The item to look for.
                 * @returns True if item was found, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(item: ColumnReplacement): JsType<System.Boolean>;
                /**
                 * Copies the elements of the collection to an Array, starting at a particular Array index.
                 * @param array The one-dimensional Array that is the destination of the elements copied
                 * from this collection. The Array must have zero-based indexing.
                 * @param arrayIndex The zero-based index in array at which copying begins.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CopyTo(array: TypedArray<ColumnReplacement>, arrayIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Returns an enumerator that iterates through a collection.
                 * @returns An IEnumerator object that can be used to iterate through the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<ColumnReplacement>;
                /**
                 * Returns the index of the item.
                 * @param item The item to look for.
                 * @returns The index of the item, if it was found. Otherwise -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(item: ColumnReplacement): JsType<System.Int32>;
                /**
                 * Inserts an item at the specified index.
                 * @param index The zero-based index at which item should be inserted.
                 * @param item The object to insert.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Insert(index: (JsType<System.Int32> | System.Int32), item: ColumnReplacement): void;
                /**
                 * Removes the first occurrence of a specific object from the collection.
                 * @param item The object to remove from the collection.
                 * @returns True if item was successfully removed from the collection; otherwise, false.
                 * This method also returns false if item is not found in the original collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: ColumnReplacement): JsType<System.Boolean>;
                /**
                 * Removes the item at the specified index.
                 * @param index The zero-based index of the item to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<ColumnReplacement>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<ColumnReplacement>>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<ColumnReplacement>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get or set.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), ColumnReplacement> & PropertySet<(JsType<System.Int32> | System.Int32), ColumnReplacement>);
                private __type_3797523906: null;
            }
            
            /**
             * Defines a selection of columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColumnSelection extends Object {
                /**
                 * Gets the signatures.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DataColumnSignatures(): System.Collections.Generic.ICollection<DataColumnSignature>;
                /**
                 * Gets the expression that selects columns. Returns string.empty if no expression is set.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                /**
                 * Defines the selection by a column search expression.
                 * @param expression The expression that defines the columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(expression: (JsType<System.String> | System.String));
                /**
                 * Defines the selection as a fixed set of columns.
                 * @param signatures The signatures of the columns to select.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(signatures: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>);
                /**
                 * Returns the columns in reader matching this selection.
                 * @param reader The reader to look for columns in.
                 * @returns Any columns matching the selection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetColumns(reader: DataRowReader): System.Collections.Generic.IEnumerable<DataRowReaderColumn>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3316311592: null;
            }
            
            /**
             * Represents a data transformation that uses an external function as a filter.
             * The external function must take a single table as input and produce a single table as output.
             * Metadata is not handled.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataFunctionTransformation extends DataTransformation {
                /**
                 * Gets the function definition used for the tranformation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FunctionDefinition(): DataFunctions.DataFunctionDefinition;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3891572093: null;
            }
            
            /**
             * Defines the identifiers for built-in data transformations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DataTransformationTypeIdentifiers extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Pivot Transformation identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly PivotDataTransformation: Framework.DocumentModel.TypeIdentifier;
                /**
                 * Unpivot Transformation identifier.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly UnpivotDataTransformation: Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1830070875: null;
            }
            
            /**
             * Represents a {@link Spotfire.Dxp.Data.DataTransformation} that uses an {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformation}
             * to exclude a set of columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExcludeColumnsTransformation extends ExpressionTransformationWrapper {
                /**
                 * Gets the columns to exclude, as a modifiable list.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnsToExclude(): System.Collections.Generic.IList<DataColumnSignature>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.ExcludeColumnsTransformation} class.
                 * @param columnsToExclude The columns to exclude.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(columnsToExclude: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1032297228: null;
            }
            
            /**
             * The expression transformation allows adding, replacing, and/or deleting columns.
             * This is generally done by supplying a column selection to work on, and, in the first two
             * cases, also providing an expression, name and, optionally, a formatter. The column selection
             * can be either a fixed set of columns, or a column search expression which will be reevaluated each time
             * the transformation is executed. Use the column name symbol to refer to the columns
             * selected in expressions.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExpressionTransformation extends DataTransformation {
                /**
                 * Use this in expressions and/or names to refer to the columns in a selection that this shall be applied to.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get ColumnNameSymbol(): JsType<System.String>;
                /**
                 * Gets the collection of operations that represents added columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnAdditions(): ColumnAdditionCollection;
                /**
                 * Gets the collection of operations that represents removed columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnRemovals(): ColumnRemovalCollection;
                /**
                 * Gets the collection of operations that represents replaced columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnReplacements(): ColumnReplacementCollection;
                /**
                 * Gets or sets the where clause expression.
                 * The transformation will only keep rows that match this boolean expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get WhereClause(): JsType<System.String>;
                set WhereClause(value: JsType<System.String>);
                /**
                 * Creates the transformation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3397213597: null;
            }
            
            /**
             * A wrapper for a number of simple {@link Spotfire.Dxp.Data.DataTransformation}s. The wrapper uses {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformationWrapper.ExpressionTransformation}
             * internally. Examples include {@link Spotfire.Dxp.Data.Transformations.AddCalculatedColumnTransformation} and {@link Spotfire.Dxp.Data.Transformations.ChangeDataTypeTransformation}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ExpressionTransformationWrapper extends DataTransformation {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Gets a copy of the underlying {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformation}.
                 * @returns A copy of the expression transformation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AsExpressionTransformation(): ExpressionTransformation;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1642104622: null;
            }
            
            /**
             * Represents a {@link Spotfire.Dxp.Data.DataTransformation} that uses an {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformation}
             * to only keep the rows that match the given {@link Spotfire.Dxp.Data.Transformations.FilterRowsTransformation.Expression}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FilterRowsTransformation extends ExpressionTransformationWrapper {
                /**
                 * Gets or sets the filter expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                set Expression(value: JsType<System.String>);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.FilterRowsTransformation} class.
                 * @param expression The filter expression.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(expression: (JsType<System.String> | System.String));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3992903534: null;
            }
            
            /**
             * Pivots tall-skinny data into short-wide data.<br />
             * Pivot is based on identity columns and category columns, where each distinct identity denotes a row,
             * and each distinct category, together with an aggregation method and a value column,
             * denotes a column, in a result matrix of data cells.
             * Each cell is the aggregated result of all data values having the same identity and category.
             * Additional transfer columns may exist, holding values aggregated by identity only, and not by category.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PivotTransformation extends DataTransformation {
                /**
                 * Category columns values are used for grouping data into result columns.
                 * There will be an aggregated result data column for each distinct combined value of the Category columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CategoryColumns(): System.Collections.Generic.IEnumerable<DataColumnSignature>;
                set CategoryColumns(value: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>);
                /**
                 * The category separator to be used when combining category values for value column names.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CategorySeparator(): JsType<System.String>;
                set CategorySeparator(value: JsType<System.String>);
                /**
                 * Identity columns are passed through and identify each row of the result data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IdentityColumns(): System.Collections.Generic.IEnumerable<DataColumnSignature>;
                set IdentityColumns(value: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>);
                /**
                 * Naming expression for the aggregated result data columns.
                 * This naming expression is a string containing a placeholder to be
                 * replaced with values during Pivot as follows:<br />
                 * %M is replaced with the aggregation method name (empty string for None).<br />
                 * %V is replaced with the value column name.<br />
                 * %C is replaced with a concatenated list of category values separated by Category separator.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ResultNamingExpression(): JsType<System.String>;
                set ResultNamingExpression(value: JsType<System.String>);
                /**
                 * TransferColumns are aggregated over the identity columns and stored into result transfer columns.
                 * See {@link Spotfire.Dxp.Data.Transformations.ColumnAggregation}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TransferColumns(): System.Collections.Generic.IEnumerable<ColumnAggregation>;
                set TransferColumns(value: OrExplicit<System.Collections.Generic.IEnumerable<ColumnAggregation>>);
                /**
                 * Naming expression for the aggregated transfer result columns.
                 * This naming expression is a string containing a placeholder to be
                 * replaced with values during Pivot as follows:<br />
                 * %A is replaced with the aggregation method name (empty string for None).<br />
                 * %T is replaced with the transfer value column name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TransferNamingExpression(): JsType<System.String>;
                set TransferNamingExpression(value: JsType<System.String>);
                /**
                 * Each value column data is aggregated over identity columns and category columns
                 * and stored into the result data columns.
                 * See {@link Spotfire.Dxp.Data.Transformations.ColumnAggregation}.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ValueColumns(): System.Collections.Generic.IEnumerable<ColumnAggregation>;
                set ValueColumns(value: OrExplicit<System.Collections.Generic.IEnumerable<ColumnAggregation>>);
                /**
                 * Public constructor.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3200050875: null;
            }
            
            /**
             * Represents a {@link Spotfire.Dxp.Data.DataTransformation} that uses an {@link Spotfire.Dxp.Data.Transformations.ExpressionTransformation}
             * to replace an existing column with a calculated column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ReplaceColumnTransformation extends ExpressionTransformationWrapper {
                /**
                 * Gets or sets the column to replace.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ColumnToReplace(): DataColumnSignature;
                set ColumnToReplace(value: DataColumnSignature);
                /**
                 * Gets or sets the expression that defines the resulting column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Expression(): JsType<System.String>;
                set Expression(value: JsType<System.String>);
                /**
                 * Gets or sets the formatter.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Formatter(): Formatters.IDataFormatter;
                set Formatter(value: Formatters.IDataFormatter);
                /**
                 * Gets or sets the name of the resulting column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ResultColumnName(): JsType<System.String>;
                set ResultColumnName(value: JsType<System.String>);
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.ReplaceColumnTransformation} class.
                 * @param columnToReplace The column to replace.
                 * @param resultColumnName The name of the resulting column. Can be null or empty, in which case the original column name is kept.
                 * @param expression The expression to use.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(columnToReplace: DataColumnSignature, resultColumnName: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.ReplaceColumnTransformation} class.
                 * @param columnToReplace The column to replace.
                 * @param resultColumnName The name of the resulting column. Can be null or empty, in which case the original column name is kept.
                 * @param expression The expression to use.
                 * @param formatter The formatter to use.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(columnToReplace: DataColumnSignature, resultColumnName: (JsType<System.String> | System.String), expression: (JsType<System.String> | System.String), formatter: Formatters.IDataFormatter);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_4108713013: null;
            }
            
            /**
             * Represents a {@link Spotfire.Dxp.Data.DataTransformation} that replaces values on specific rows, or on a single specific row.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ReplaceSpecificValueTransformation extends ReplaceValuesBaseTransformation {
                /**
                 * Gets a copy of the list of row identifying column signatures.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowIdentifyingColumnSignatures(): System.Collections.Generic.IList<DataColumnSignature>;
                /**
                 * Gets a copy of the list of row identifying column values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RowIdentifyingColumnValues(): System.Collections.Generic.IList<JsType<System.Object>>;
                /**
                 * Gets a value indicating whether a warning should be shown when the transformation replaces more than one value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get WarnWhenReplacingMultipleValues(): JsType<System.Boolean>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.ReplaceSpecificValueTransformation} class.
                 * @param column The {@link Spotfire.Dxp.Data.DataColumnSignature} for the column to be changed.
                 * @param originalValue The value to be replaced in the column.
                 * @param newValue The new value.
                 * @param rowIdentifyingColumns A list of {@link Spotfire.Dxp.Data.DataColumnSignature} for columns used to define the rows which contain the values to be replaced.
                 * @param rowIdentifyingColumnValues The values identifying the rows for the row identifying columns.
                 * @param warnWhenReplacingMultipleValues A value indicating whether a warning should be shown when the transformation replaces more than one value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(column: DataColumnSignature, originalValue: any, newValue: any, rowIdentifyingColumns: OrExplicit<System.Collections.Generic.IEnumerable<DataColumnSignature>>, rowIdentifyingColumnValues: (any[] | OrExplicit<System.Collections.Generic.IEnumerable<(any | System.Object)>>), warnWhenReplacingMultipleValues: (JsType<System.Boolean> | System.Boolean));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1579366292: null;
            }
            
            /**
             * Represents a base class for the replace value transformations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ReplaceValuesBaseTransformation extends ExpressionTransformationWrapper {
                /**
                 * Gets the column in which values are replaced.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Column(): DataColumnSignature;
                /**
                 * Gets the new value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get NewValue(): unknown;
                /**
                 * Gets the original value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get OriginalValue(): unknown;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3678874974: null;
            }
            
            /**
             * Represents a {@link Spotfire.Dxp.Data.DataTransformation} that replaces all values in a column that match a given value.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ReplaceValuesTransformation extends ReplaceValuesBaseTransformation {
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Data.Transformations.ReplaceValuesTransformation} class.
                 * @param column The {@link Spotfire.Dxp.Data.DataColumnSignature} for the column to be changed.
                 * @param originalValue The value to be replaced in the column.
                 * @param newValue The new value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(column: DataColumnSignature, originalValue: any, newValue: any);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1479787415: null;
            }
            
            /**
             * Transforms short-wide data into tall-skinny data.
             * Unpivot merges data from multiple value columns into one result column.
             * Data in identity columns is repeated for each value column and
             * the name of the value column is placed into a category column.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class UnpivotTransformation extends DataTransformation {
                /**
                 * Name of the category column for merged column names.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CategoryName(): JsType<System.String>;
                set CategoryName(value: JsType<System.String>);
                /**
                 * {@link Spotfire.Dxp.Data.DataType} of the category column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get CategoryType(): DataType;
                set CategoryType(value: DataType);
                /**
                 * Identity columns are passed through and repeated for each unpivoted value.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IdentityColumns(): System.Collections.Generic.IList<DataColumnSignature>;
                set IdentityColumns(value: OrExplicit<System.Collections.Generic.IList<DataColumnSignature>>);
                /**
                 * Gets or sets whether null values shall be removed or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get RemoveNull(): JsType<System.Boolean>;
                set RemoveNull(value: JsType<System.Boolean>);
                /**
                 * Name of the result column holding the merged value column data.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ResultName(): JsType<System.String>;
                set ResultName(value: JsType<System.String>);
                /**
                 * {@link Spotfire.Dxp.Data.DataType} of the result column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ResultType(): DataType;
                set ResultType(value: DataType);
                /**
                 * Value column data is merged into one result column of data.<br />
                 * Column names are merged into a category column.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ValueColumns(): System.Collections.Generic.IList<DataColumnSignature>;
                set ValueColumns(value: OrExplicit<System.Collections.Generic.IList<DataColumnSignature>>);
                /**
                 * Public constructor.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3574003456: null;
            }
        }
        
        namespace VirtualColumns {
            /**
             * A column where the values are fetched one by one as they're needed rather than all at once.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VirtualColumn extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3251930363: null;
            }
            
            /**
             * A collection of virtual columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VirtualColumnCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<VirtualColumn>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<VirtualColumn>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<VirtualColumn>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_3145282833: null;
            }
            
            /**
             * A class which produces virtual columns.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VirtualColumnProducer extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext> {
                /**
                 * Gets the produced columns.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Columns(): VirtualColumnCollection;
                /**
                 * Gets the type identifier for the producer.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get TypeId(): Framework.DocumentModel.TypeIdentifier;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                };
                private __type_3579054455: null;
            }
            
            /**
             * A collection of virtual column producers.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class VirtualColumnProducerCollection extends Framework.DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<Framework.DocumentModel.ITransactions>, Explicit<Framework.DocumentModel.INodeContext>, Explicit<System.Collections.Generic.IEnumerable<VirtualColumnProducer>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<VirtualColumnProducer>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<Framework.DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<Framework.DocumentModel.INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<VirtualColumnProducer>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                private __type_2139349121: null;
            }
        }
        
        /**
         * @@Type reference for casting to class {@link Spotfire.Dxp.Data.DataValue}.
         * @param typeT - @@Generic type argument
         */
        function DataValue<T>(typeT: TypeRefParam<T>): TypeRef<DataValueGeneric<T>>;
        
        /**
         * @@Type reference for casting to class {@link Spotfire.Dxp.Data.DataValueCursor}.
         * @param typeT - @@Generic type argument
         */
        function DataValueCursor<T>(typeT: TypeRefParam<T>): TypeRef<DataValueCursorGeneric<T>>;
    }
    
    namespace Framework {
        /**
         * @ignore
         * @@Helper class with property accessors to express interface types when casting.
         */
        abstract class DocumentModel {
            /** @@Type reference for casting to {{@link Spotfire.Dxp.Framework.DocumentModel.INodeContext}. */
            static get INodeContext(): TypeRef<DocumentModel.INodeContext>;
            /** @@Type reference for casting to {{@link Spotfire.Dxp.Framework.DocumentModel.ITransactions}. */
            static get ITransactions(): TypeRef<DocumentModel.ITransactions>;
        }
        
        namespace ApplicationModel {
            /**
             * Provides information about the Spotfire Server, such as its
             * URL, whether or not it is currently available, etc.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ConnectivityService extends Object {
                /**
                 * Gets a value indicating whether or not the application is online
                 * and is connected to a Spotfire server.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsOnline(): JsType<System.Boolean>;
                /**
                 * Gets the public Uri of the Spotfire Server currently connected to.
                 * This will be the Uri configured as "Public Address" in the Spotfire server configuration.
                 * This Uri should always be used when displaying links to the server, to library files or to the Web Player.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ServerPublicUri(): JsType<System.Uri>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_176343449: null;
            }
            
            /**
             * Represents an operation on a document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DocumentOperation extends DocumentModel.DocumentNode implements Explicit<System.IServiceProvider>, Explicit<DocumentModel.ITransactions>, Explicit<DocumentModel.INodeContext> {
                /**
                 * Gets whether or not the operation is partially or entirely broken.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsBroken(): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Executes the operation.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Execute(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<DocumentModel.ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<DocumentModel.INodeContext>,
                };
                private __type_871201051: null;
            }
            
            /**
             * This service contains a list of notifications that contains information that the user might want to know.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class NotificationService extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Add a notification that contains an error.
                 * @param title The title of the notification.
                 * @param summary The summary of the notification, may be null.
                 * @param details The details of the notification, may be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddErrorNotification(title: (JsType<System.String> | System.String), summary: (JsType<System.String> | System.String), details: (JsType<System.String> | System.String)): void;
                /**
                 * Add a notification that contains information.
                 * @param title The title of the notification.
                 * @param summary The summary of the notification, may be null.
                 * @param details The details of the notification, may be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddInformationNotification(title: (JsType<System.String> | System.String), summary: (JsType<System.String> | System.String), details: (JsType<System.String> | System.String)): void;
                /**
                 * Add a notification that contains a warning.
                 * @param title The title of the notification.
                 * @param summary The summary of the notification, may be null.
                 * @param details The details of the notification, may be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddWarningNotification(title: (JsType<System.String> | System.String), summary: (JsType<System.String> | System.String), details: (JsType<System.String> | System.String)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1829478293: null;
            }
            
            /**
             * The ParameterManager manages the parameters associated with a document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ParameterManager extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Gets the value assigned to the parameter identified by the given parameterName.
                 * @param parameterName The parameter name.
                 * @param value The parameter value.
                 * @returns true if the parameter exists and has a value that can be converted to the type given by T;
                 * otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeT - @@Generic type argument
                 */
                TryGetParameterValue<T>(typeT: TypeRefParam<T>, parameterName: (JsType<System.String> | System.String), value: OutParam<T>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_324530635: null;
            }
        }
        
        namespace DocumentModel {
            /**
             * An interface which declares methods for accessing the context of a node.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            interface INodeContext extends IInterfaceBase {
                /**
                 * Returns the closest ancestor node of type T,
                 * or null if no such ancestor is found.
                 * @returns The closest ancestor node.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeT - @@Generic type argument
                 */
                GetAncestor<T extends DocumentNode>(typeT: TypeRefParam<T>): (JsType<T> | null);
                /**
                 * Gets the service object of the specified type.
                 * @returns An object of type T, or null
                 * if no service of type T was found.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeT - @@Generic type argument
                 */
                GetService<T>(typeT: TypeRefParam<T>): (JsType<T> | null);
                /**
                 * Determines whether this instance is a descendant of the specified node.
                 * Note: A node is not considered a descendant of itself.
                 * @param node The potential ancestor node.
                 * @returns true if this instance is a descendant of the
                 * specified node; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsDescendantOf(node: DocumentNode): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<INodeContext>,
                };
            }
            
            /**
             * Declares methods for executing transactions on the document.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            interface ITransactions extends IInterfaceBase {
                /**
                 * Starts an invisible transaction on the document model by executing
                 * action.
                 * @param action The delegate to execute.
                 * 
                 * @remark This API expects that the script is declared with 'wrapInTransaction' set to 'false' to work as documented.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExecuteInvisibleTransaction(action: (JsType<System.Action> | System.Action)): void;
                /**
                 * Starts a sticky transaction on the document model by executing
                 * action.
                 * @param guid The id which identifies the transactions which should stick together.
                 * @param action The delegate to execute.
                 * 
                 * @remark This API expects that the script is declared with 'wrapInTransaction' set to 'false' to work as documented.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExecuteStickyTransaction(guid: (JsType<System.Guid> | System.Guid), action: (JsType<System.Action> | System.Action)): void;
                /**
                 * Starts a transaction on the document model by executing
                 * action.
                 * @param action The delegate to execute.
                 * 
                 * @remark This API expects that the script is declared with 'wrapInTransaction' set to 'false' to work as documented.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ExecuteTransaction(action: (JsType<System.Action> | System.Action)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<ITransactions>,
                };
            }
            
            /**
             * Abstract base class for all Document Nodes.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DocumentNode extends Object implements Explicit<System.IServiceProvider>, Explicit<ITransactions>, Explicit<INodeContext> {
                /**
                 * Gets the context of this node.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Context(): INodeContext;
                /**
                 * Gets a value indicating whether this node is attached.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsAttached(): JsType<System.Boolean>;
                /**
                 * Gets a collection of methods for executing transactions on the document.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Transactions(): ITransactions;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<INodeContext>,
                };
                private __type_711478271: null;
            }
            
            /**
             * Abstract base class for list-like document nodes.
             * It contains standard {@link System.Collections.Generic.IList} methods to modify the collection.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DocumentNodeList<T> extends DocumentNodeListBase<T> implements Explicit<System.IServiceProvider>, Explicit<ITransactions>, Explicit<INodeContext>, Explicit<System.Collections.Generic.IEnumerable<T>>, Explicit<System.Collections.IEnumerable>, Explicit<System.Collections.Generic.IList<T>>, Explicit<System.Collections.Generic.ICollection<T>> {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * Adds an item to this collection.
                 * @param item The item to add.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Add(item: (JsType<T> | T)): void;
                /**
                 * Adds the elements of the specified collection to the
                 * end of this collection.
                 * @param collection The collection whose elements should
                 * be added to the end of this collection.
                 * The collection itself cannot be null, but it can contain elements
                 * that are null, if type T is a reference type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                AddRange(collection: OrExplicit<System.Collections.Generic.IEnumerable<T>>): void;
                /**
                 * Removes all items from this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Clear(): void;
                /**
                 * Inserts an element into this collection at the specified index.
                 * @param index The zero-based index at which item should be inserted.
                 * @param item The object to insert. The value can be null.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Insert(index: (JsType<System.Int32> | System.Int32), item: (JsType<T> | T)): void;
                /**
                 * Inserts the elements of the specified collection at the
                 * specified index in this collection.
                 * @param index The index where the first element shall be inserted.
                 * @param collection The collection whose elements should
                 * be inserted in this collection.
                 * The collection itself cannot be null, but it can contain elements
                 * that are null, if type T is a reference type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                InsertRange(index: (JsType<System.Int32> | System.Int32), collection: OrExplicit<System.Collections.Generic.IEnumerable<T>>): void;
                /**
                 * Moves the item at the specified index to a new location in the collection.
                 * @param fromIndex The zero-based index specifying the location of the item to be moved.
                 * @param toIndex The zero-based index specifying the new location of the item.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Move(fromIndex: (JsType<System.Int32> | System.Int32), toIndex: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes the first occurrence of a specific object from this collection.
                 * @param item The object to remove.
                 * @returns true if item was successfully removed from this collection;
                 * otherwise, false.
                 * This method also returns false if item is not found.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Remove(item: (JsType<T> | T)): JsType<System.Boolean>;
                /**
                 * Removes the element at the specified index.
                 * @param index The zero-based index of the element to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveAt(index: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Removes a range of count elements starting at the
                 * specified index.
                 * @param index The index of the first element to remove.
                 * @param count The number of elements to remove.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                RemoveRange(index: (JsType<System.Int32> | System.Int32), count: (JsType<System.Int32> | System.Int32)): void;
                /**
                 * Replaces the contents of the list with the elements in the
                 * specified collection.
                 * @param collection The collection. The collection itself cannot be null,
                 * but it can contain elements that are null, if type T is a reference type.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ReplaceAll(collection: OrExplicit<System.Collections.Generic.IEnumerable<T>>): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                    System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<T>>,
                    System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<T>>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: (PropertyGet<(JsType<System.Int32> | System.Int32), JsType<T>> & PropertySet<(JsType<System.Int32> | System.Int32), (JsType<T> | T)>);
                private __type_214718023: null;
            }
            
            /**
             * Abstract base class for list-like document nodes.
             * It does not expose any public methods to modify the collection,
             * it is up to derived classes to do so.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DocumentNodeListBase<T> extends DocumentNode implements Explicit<System.IServiceProvider>, Explicit<ITransactions>, Explicit<INodeContext>, Explicit<System.Collections.Generic.IEnumerable<T>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of elements contained in this instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * Determines whether the specified value is in this collection.
                 * @param value The object to locate in this collection.
                 * The value can be null.
                 * @returns true if value is found in this collection;
                 * otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Contains(value: (JsType<T> | T)): JsType<System.Boolean>;
                /**
                 * Returns an enumerator that iterates through this collection.
                 * @returns An {@link System.Collections.Generic.IEnumerator} for this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<T>;
                /**
                 * Searches for the specified value and returns the zero-based index
                 * of the first occurrence within this collection.
                 * @param value The object to locate. The value can be null.
                 * @returns The zero-based index of the first occurrence of value within this
                 * collection, if found; otherwise, -1.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IndexOf(value: (JsType<T> | T)): JsType<System.Int32>;
                /**
                 * Copies the elements of the collection to a new array.
                 * @returns An array containing the elements.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ToArray(): TypedArray<JsType<T>>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_IServiceProvider: Implementation<System.IServiceProvider>,
                    Spotfire_Dxp_Framework_DocumentModel_ITransactions: Implementation<ITransactions>,
                    Spotfire_Dxp_Framework_DocumentModel_INodeContext: Implementation<INodeContext>,
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), JsType<T>>;
                private __type_2943581998: null;
            }
            
            /**
             * This class is used to control which view of the document that is used when getting and settings properties of the document model.
             * A document has multiple views if the user has opened multiple browser tabs for the document in the web client, or if a javascript mashup uses
             * multiple views.
             * 
             * 
             * Each view of the document can have different values for active page, active visualization, active data table, active marking, and active filtering selection.
             * The value of these properties depends on the currently active view of the document. This class provides the API for getting and setting the current view of the document.
             * We will refer to these properties as view properties.
             * 
             * 
             * The current document view is stored in a thread static variable and is thus associated with the current thread.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class DocumentView extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Executes the specified action for each view of the document.
                 * @param documentNode Any document node in the document.
                 * @param action The action that will be executed once in each view.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static ForEach(documentNode: DocumentNode, action: (JsType<System.Action> | System.Action)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1148262152: null;
            }
            
            /**
             * An instance of this class identifies a document node type.
             * The identifier is valid between Spotfire versions, whereas the actual {@link System.Type}
             * of the node might change.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TypeIdentifier extends Object {
                /**
                 * Gets the description.
                 * Typically on the form "The 'My Component' is a [description of MyComponent]. It is a part of the 'My Components' add-in that can be downloaded from http://www.mycomponents.com.".
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the human readable name.
                 * Typically on the form "My Component".
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get DisplayName(): JsType<System.String>;
                /**
                 * Gets the name.
                 * Typically on the form "MyCompany.MyComponent".
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3776167663: null;
            }
            
            /**
             * @@Type reference for casting to class {@link Spotfire.Dxp.Framework.DocumentModel.DocumentNodeList}.
             * @param typeT - @@Generic type argument
             */
            function DocumentNodeList<T>(typeT: TypeRefParam<T>): TypeRef<DocumentNodeList<T>>;
            
            /**
             * @@Type reference for casting to class {@link Spotfire.Dxp.Framework.DocumentModel.DocumentNodeListBase}.
             * @param typeT - @@Generic type argument
             */
            function DocumentNodeListBase<T>(typeT: TypeRefParam<T>): TypeRef<DocumentNodeListBase<T>>;
        }
        
        namespace Library {
            /**
             * Exceptions thrown for errors encountered at Library service
             * communications.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryException extends System.Exception {
                /**
                 * Gets the fault code.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FaultCode(): LibraryExceptionFaultCode;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2052703387: null;
            }
            
            /**
             * Fault codes for LibraryExceptions.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryExceptionFaultCode extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Failed to upload or download attachment. */
                static readonly AttachmentFailure: LibraryExceptionFaultCode;
                /** The client is offline. */
                static readonly ClientIsOffline: LibraryExceptionFaultCode;
                /** Library entry does not exist. */
                static readonly EntryDoesNotExist: LibraryExceptionFaultCode;
                /** Library entry exists. */
                static readonly EntryExist: LibraryExceptionFaultCode;
                /** Library entry title is invalid. */
                static readonly EntryTitleInvalid: LibraryExceptionFaultCode;
                /** Library entry is of wrong type. */
                static readonly EntryWrongType: LibraryExceptionFaultCode;
                /** The user has insufficient permissions to an item. */
                static readonly InsufficientPermissions: LibraryExceptionFaultCode;
                /** The parent entry is invalid, for example wrong type etc. */
                static readonly InvalidParent: LibraryExceptionFaultCode;
                /** The user has entered an invalid search expression. */
                static readonly InvalidSearchExpression: LibraryExceptionFaultCode;
                /** Specifies any failures from a LibraryAccessControlServiceException. */
                static readonly LibraryAccessControlServiceException: LibraryExceptionFaultCode;
                /** Any failures from a LibraryServiceException. */
                static readonly LibraryServiceException: LibraryExceptionFaultCode;
                /** When the library service is not running. */
                static readonly LibraryServiceNotRunning: LibraryExceptionFaultCode;
                /** Any other errors. */
                static readonly Other: LibraryExceptionFaultCode;
                /** The query timed out. */
                static readonly QueryTimeout: LibraryExceptionFaultCode;
                /** Undefined fault. */
                static readonly Undefined: LibraryExceptionFaultCode;
                /** The result from the server was unexpected or incomplete. */
                static readonly UnexpectedResult: LibraryExceptionFaultCode;
                /** Any error from using the User Directory. */
                static readonly UserDirectoryException: LibraryExceptionFaultCode;
                /** User is unauthorized to perform the requested operation. */
                static readonly UserUnauthorized: LibraryExceptionFaultCode;
                private __type_1967025560: null;
            }
            
            /**
             * Represents an item in the library.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryItem extends Object {
                /**
                 * Gets the content size in bytes of this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ContentSize(): JsType<System.Int64>;
                /**
                 * Gets a DateTime describing when this item was created in the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Created(): JsType<System.DateTime>;
                /**
                 * Gets the description of this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Description(): JsType<System.String>;
                /**
                 * Returns true if the contents of this item has been accessed since it was created.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get HasBeenAccessed(): JsType<System.Boolean>;
                /**
                 * Gets the id of this item. This value shall be used in search and other operations
                 * to refer to this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Id(): JsType<System.Guid>;
                /**
                 * Returns the type of this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ItemType(): LibraryItemType;
                /**
                 * Gets a DateTime describing when the contents of this item was last accessed in the library.
                 * If this item has never been accessed, DateTime.MinValue is returned.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get LastAccess(): JsType<System.DateTime>;
                /**
                 * Gets a DateTime describing when the last modification of this item was made in the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get LastModified(): JsType<System.DateTime>;
                /**
                 * Gets the id of the parent item of this this item. The parent item is
                 * typically a folder in the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ParentId(): JsType<System.Guid>;
                /**
                 * Gets the path of this item, or null if the path was not retrieved
                 * from the library when this item was created.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Path(): JsType<System.String>;
                /**
                 * Gets the properties of this item, or null if the properties was not retrieved
                 * from the library when this item was created.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Properties(): LibraryItemPropertyCollection;
                /**
                 * Gets the signature of this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Signature(): LibraryItemSignature;
                /**
                 * Gets the title of this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_765928161: null;
            }
            
            /**
             * Represents a collection of items.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryItemCollection extends Object implements Explicit<System.Collections.Generic.IEnumerable<LibraryItem>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of items in the collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<LibraryItem>;
                /**
                 * Enumerates the items in this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<LibraryItem>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<LibraryItem>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the library item at the specified index.
                 * @param index The index in this collection.
                 * @returns The library item at the specified index.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), LibraryItem>;
                private __type_1853865943: null;
            }
            
            /**
             * Specifies how the metadata of a library item shall be changed.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryItemMetadataSettings extends Object {
                /**
                 * Gets or sets the description to associate with a library entry. If null, the description is not changed.
                 * If this property is set, it overrides any description specified by document properties when the document
                 * is saved to the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Description(): JsType<System.String>;
                set Description(value: JsType<System.String>);
                /**
                 * Creates a default metadata specification instance.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                constructor();
                /**
                 * Sets the keywords to associate with a library entry.
                 * By default the keywords are not changed.
                 * The keywords set with this method will override any keywords specified by document properties when the document
                 * is saved to the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                SetKeywords(...keywords: (JsType<System.String> | System.String)[]): void;
                /**
                 * Adds a custom property that shall be set on the library item. The property value will be updated
                 * if it is already set on the library item.
                 * @param propertyName The name of the custom property that should be set.
                 * @param values The values that shall be associated with the custom property.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                SetProperty(propertyName: (JsType<System.String> | System.String), ...values: (JsType<System.String> | System.String)[]): void;
                /**
                 * Tries to get the keywords previously set by the SetKeywords method. Returns true and
                 * assigns the keywordsProperty parameter if the keywords have previously
                 * been set.
                 * @param keywordsProperty Will be assigned with the previously set keywords or null.
                 * @returns true if the keywords have previously been set.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetKeywords(keywordsProperty: OutParam<LibraryItemProperty>): JsType<System.Boolean>;
                /**
                 * Tries to get the custom property previously set by the SetProperty method. Returns true and
                 * assigns the property parameter if the keywords have previously
                 * been set.
                 * @param propertyName The name of the custom property to get.
                 * @param property Will be assigned with the previously set custom property or null.
                 * @returns true if the custom property has previously been set.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetProperty(propertyName: (JsType<System.String> | System.String), property: OutParam<LibraryItemProperty>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3829048905: null;
            }
            
            /**
             * Represents a property of a library item.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryItemProperty extends Object implements Explicit<System.Collections.Generic.IEnumerable<System.String>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of values in this property.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * Gets the name of this property.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<JsType<System.String>>;
                /**
                 * Enumerates the values in this property.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<JsType<System.String>>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<System.String>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the value at the specified index in this property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.Int32> | System.Int32), JsType<System.String>>;
                private __type_673618168: null;
            }
            
            /**
             * Holds a collection of library item properties.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryItemPropertyCollection extends Object implements Explicit<System.Collections.Generic.IEnumerable<LibraryItemProperty>>, Explicit<System.Collections.IEnumerable> {
                /**
                 * Gets the number of properties in this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Count(): JsType<System.Int32>;
                /**
                 * Gets the keywords property.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Keywords(): LibraryItemProperty;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<LibraryItemProperty>;
                /**
                 * Enumerates the properties in this collection.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                GetEnumerator(): System.Collections.Generic.IEnumerator<LibraryItemProperty>;
                /**
                 * Tries to get the property with the specified name.
                 * @param name The name of the property to get.
                 * @param property Will be assigned the property with the specified
                 * name, or null if no such property exists.
                 * @returns true if a property with the specified name was found.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetProperty(name: (JsType<System.String> | System.String), property: OutParam<LibraryItemProperty>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<LibraryItemProperty>>,
                    System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
                };
                /**
                 * Gets the property with the specified name.
                 * @param name The name of the property to get.
                 * @returns The property with the specified name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                readonly Item: PropertyGet<(JsType<System.String> | System.String), LibraryItemProperty>;
                private __type_2438353540: null;
            }
            
            /**
             * Describes a metadata kind that shall be retrieved from the library when it is queried.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryItemRetrievalOption extends Object {
                /**
                 * Gets an option specifying that the path of a library item shall be retrieved.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static get IncludePath(): LibraryItemRetrievalOption;
                /**
                 * Gets an option specifying that the properties of a library item shall be retrieved.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static get IncludeProperties(): LibraryItemRetrievalOption;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3877730086: null;
            }
            
            /**
             * Identifies an item in the library. Provides access to the subset of the
             * metadata associated with the item that can be used to find the item in the
             * library.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryItemSignature extends Object {
                /**
                 * Gets the description of this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the id of this item. This value shall be used in search and other operations
                 * to refer to this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Id(): JsType<System.Guid>;
                /**
                 * Returns the type of this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ItemType(): LibraryItemType;
                /**
                 * Gets the id of the parent item of this this item. The parent item is
                 * typically a folder in the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get ParentId(): JsType<System.Guid>;
                /**
                 * Gets the path of this item, or null if the path was not retrieved
                 * from the library when this item signature was created.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Path(): JsType<System.String>;
                /**
                 * Gets the title of this item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Title(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2956658633: null;
            }
            
            /**
             * Represent the type of a library item.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryItemType extends Object {
                /**
                 * Gets the library type for an action mod.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get ActionMod(): LibraryItemType;
                /**
                 * Gets the library type for a Spotfire analysis file.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Analysis(): LibraryItemType;
                /**
                 * Gets the library type for an analysis state.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get AnalysisState(): LibraryItemType;
                /**
                 * Gets the library type for an automation services job.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get AutomationServicesJob(): LibraryItemType;
                /**
                 * Gets the library type for a bookmark.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Bookmark(): LibraryItemType;
                /**
                 * Gets the library type for a color scheme.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get ColorScheme(): LibraryItemType;
                /**
                 * Gets the library type for a column element in the information model in Information Services.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Column(): LibraryItemType;
                /**
                 * Gets the library type for a connector data source.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get ConnectionDataSource(): LibraryItemType;
                /**
                 * Gets the library type for a connector data connection.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get DataConnection(): LibraryItemType;
                /**
                 * Gets the library type for a data function.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get DataFunction(): LibraryItemType;
                /**
                 * Gets the library type for an Information Services data source.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get DataSource(): LibraryItemType;
                /**
                 * Gets the library type for a filter element in the information model in Information Services.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Filter(): LibraryItemType;
                /**
                 * Gets the library type for a folder in the library.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Folder(): LibraryItemType;
                /**
                 * Gets the library type for an information link.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get InformationLink(): LibraryItemType;
                /**
                 * Gets the library type for a join element in the information model in Information Services.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Join(): LibraryItemType;
                /**
                 * Gets the library type for a procedure element in the information model in Information Services.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get Procedure(): LibraryItemType;
                /**
                 * Gets the library type for a SBDF file.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get SbdfDataFile(): LibraryItemType;
                /**
                 * Gets the library type for a visualization mod.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static get VisualizationMod(): LibraryItemType;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_178819273: null;
            }
            
            /**
             * Declares methods for retrieving links of different types
             * for a library item.
             * If the resulting link should contain the {@link Spotfire.Dxp.Framework.Library.LibraryLinksOption.Path | path} to the library item
             * use Uri.AbsoluteUri on the resulting uri for a correct string representation for http or https
             * related links in order to comply with different browsers and systems and Uri.ToString() for Spotfire uri.
             * See {@link http://www.ietf.org/rfc/rfc3986.txt | RFC 3986} and related discussions.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryLinks extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Tries to get a uri for a Spotfire Server redirect page of the specified library item, which
                 * should be accessed through http or https.
                 * @param item The library item to retrieve the Spotfire Server redirect page uri for.
                 * @param option The option for generating the resulting uri.
                 * @param uri The Spotfire Server redirect page uri for the specified library item.
                 * @returns True if successfully created a uri for a Spotfire Server redirect page; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetRedirectUri(item: LibraryItem, option: LibraryLinksOption, uri: OutParam<System.Uri>): JsType<System.Boolean>;
                /**
                 * Tries to get a uri for a Spotfire analysis of the specified library item.
                 * The uri returned uses the TIBCOSpotfire protocol.
                 * @param item The library item to retrieve the Spotfire analysis uri for.
                 * @param option The option for generating the resulting uri.
                 * @param uri The Spotfire analysis uri for the specified library item.
                 * @returns True if successfully created a uri for a Spotfire analysis; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetUri(item: LibraryItem, option: LibraryLinksOption, uri: OutParam<System.Uri>): JsType<System.Boolean>;
                /**
                 * Tries to get a uri for a Spotfire Web Player Server redirect page of the specified library item, which
                 * should be accessed through http or https.
                 * @param item The library item to retrieve the Spotfire Web Player Server redirect page uri for.
                 * @param option The option for generating the resulting uri.
                 * @param uri The Spotfire Web Player Server redirect page uri for the specified library item.
                 * @returns True if successfully created a uri for a Spotfire Web Player Server redirect page; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetWebPlayerRedirectUri(item: LibraryItem, option: LibraryLinksOption, uri: OutParam<System.Uri>): JsType<System.Boolean>;
                /**
                 * Tries to get a uri for a Spotfire Web Player analysis with the specified library item, which
                 * should be accessed through http or https.
                 * @param item The library item to retrieve the Spotfire Web Player Player analysis uri for.
                 * @param option The option for generating the resulting uri.
                 * @param uri The Spotfire Web Player analysis uri with the specified library item.
                 * @returns True if successfully created a uri for a Spotfire Web Player analysis; otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetWebPlayerUri(item: LibraryItem, option: LibraryLinksOption, uri: OutParam<System.Uri>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3036292559: null;
            }
            
            /**
             * Options that are used to specified the format for links to library items.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryLinksOption extends Object {
                /**
                 * Gets the option where resulting link will use the library identifier.
                 * This option can be used for all resulting links.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static get Id(): LibraryLinksOption;
                /**
                 * Gets the option where resulting link will use the library path.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                static get Path(): LibraryLinksOption;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3879168182: null;
            }
            
            /**
             * Provides access to the Spotfire library.
             * An instance of this class is available as a service on the user level.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LibraryManager extends Object {
                /**
                 * Gets a collection of methods for retrieving library items uri of different types.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                get Links(): LibraryLinks;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Copy one or more library items to the specified folder.
                 * If an item to copy is a folder, all contained items and folders are included.
                 * The items and any descendants will all be given new IDs.
                 * All ancestors will also be updated with a new "Updated By Principal" and "Updated Timestamp".
                 * If an error occurs all changes will be rolled back.
                 * @param itemsToCopy The items to copy.
                 * Use {@link Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem|TryGetItem(path, itemType, item, retrievalOptions)},
                 * {@link Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem|TryGetItem(id, item, retrievalOptions)} or
                 * {@link Spotfire.Dxp.Framework.Library.LibraryManager.Search|Search(searchExpression, retrievalOptions)} to retrieve the items.
                 * @param folderToCopyItemsTo The folder to copy the items to.
                 * @param conflictResolution The conflict resolution to use when items with the same name exists in the destination folder.
                 * @returns The items copied to the new folder.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                Copy(itemsToCopy: OrExplicit<System.Collections.Generic.IEnumerable<LibraryItem>>, folderToCopyItemsTo: LibraryItem, conflictResolution: LibraryManager.ConflictResolution): LibraryItemCollection;
                /**
                 * Creates a folder with the specified folderName in the library. The folder is created under the
                 * specified parentFolder.
                 * @param parentFolder The parent folder.
                 * @param folderName The name of the folder.
                 * @param metadataSettings The metadata to associate with the library folder.
                 * @returns An object describing the created library folder.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                CreateFolder(parentFolder: LibraryItem, folderName: (JsType<System.String> | System.String), metadataSettings: LibraryItemMetadataSettings): LibraryItem;
                /**
                 * Deletes the specified item in the library.
                 * @param item The item to delete.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                Delete(item: LibraryItem): void;
                /**
                 * Move one or more library items to the specified folder.
                 * If an item to move is a folder all contained items and folders are included.
                 * All ancestors will also be updated with a new "Updated By Principal" and "Updated Timestamp".
                 * If an error occurs all changes will be rolled back.
                 * @param itemsToMove The items to move.
                 * Use {@link Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem|TryGetItem(path, itemType, item, retrievalOptions)},
                 * {@link Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem|TryGetItem(id, item, retrievalOptions)} or
                 * {@link Spotfire.Dxp.Framework.Library.LibraryManager.Search|Search(searchExpression, retrievalOptions)} to retrieve the items.
                 * @param folderToMoveItemsTo The folder to move the items to.
                 * @param conflictResolution The conflict resolution to use when items with the same name exists in the destination folder.
                 * Note all items included in itemsToMove are removed after move,
                 * also the items that are not moved to the new folder.
                 * @returns The items moved to the new folder.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                Move(itemsToMove: OrExplicit<System.Collections.Generic.IEnumerable<LibraryItem>>, folderToMoveItemsTo: LibraryItem, conflictResolution: LibraryManager.ConflictResolution): LibraryItemCollection;
                /**
                 * Gets a collection of items matching the specified search expression.
                 * @param searchExpression An expression describing the items that shall be returned.
                 * The syntax used is the same as in the search field in the "Open from Library" dialog.
                 * See the topic "Searching the Library" in the Spotfire UserÂ´s Guide for a description
                 * of the search syntax.
                 * @param retrievalOptions Specifies the kinds of metadata that the returned
                 * items shall be populated with.
                 * @returns A collection of items matching the search.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                Search(searchExpression: (JsType<System.String> | System.String), ...retrievalOptions: LibraryItemRetrievalOption[]): LibraryItemCollection;
                /**
                 * Sets the metadata of an existing library item.
                 * Only the properties explicitly set in metadata object will be updated.
                 * To keep old values of Description, Keywords or Properties, do not set those properties.
                 * @param itemToUpdate The library item to update.
                 * Use {@link Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem|TryGetItem(path, itemType, item, retrievalOptions)},
                 * {@link Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem|TryGetItem(id, item, retrievalOptions)} or
                 * {@link Spotfire.Dxp.Framework.Library.LibraryManager.Search|Search(searchExpression, retrievalOptions)} to retrieve the item.
                 * @param metadata The metadata to set on the library item.
                 * @returns The updated library item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                SetLibraryItemMetadata(itemToUpdate: LibraryItem, metadata: LibraryItemMetadataSettings): LibraryItem;
                /**
                 * Sets the title of an existing library item.
                 * @param itemToUpdate The library item to update.
                 * Use {@link Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem|TryGetItem(path, itemType, item, retrievalOptions)},
                 * {@link Spotfire.Dxp.Framework.Library.LibraryManager.TryGetItem|TryGetItem(id, item, retrievalOptions)} or
                 * {@link Spotfire.Dxp.Framework.Library.LibraryManager.Search|Search(searchExpression, retrievalOptions)} to retrieve the item.
                 * @param title The new title for the library item.
                 * @returns The updated library item.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryWrite'
                 */
                SetLibraryItemTitle(itemToUpdate: LibraryItem, title: (JsType<System.String> | System.String)): LibraryItem;
                /**
                 * Tries to get the item associated with the specified id. Returns true if the item is found and
                 * false otherwise.
                 * On success, the item parameter is assigned and populated according to the
                 * specified metadata options.
                 * @param id The id of the item to get.
                 * @param item Will be assigned with the library item or null if no item with
                 * the specified id can be found.
                 * @param retrievalOptions Specifies the kinds of metadata that the returned
                 * item shall be populated with.
                 * @returns true if an item was found, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetItem(id: (JsType<System.Guid> | System.Guid), item: OutParam<LibraryItem>, ...retrievalOptions: LibraryItemRetrievalOption[]): JsType<System.Boolean>;
                /**
                 * Tries to get the item associated with the specified path. Returns true if the item is found and
                 * false otherwise.
                 * On success, the item parameter is assigned and populated according to the
                 * specified metadata options.
                 * @param path The path of the item to get.
                 * @param itemType The type of the item. There can be several items with the same path but
                 * with different types.
                 * @param item Will be assigned with the library item or null if no item with
                 * the specified path and type can be found.
                 * @param retrievalOptions Specifies the kinds of metadata that the returned
                 * item shall be populated with.
                 * @returns true if an item was found, false otherwise.
                 * 
                 * @since 2.0
                 * 
                 * @group Extended capability 'LibraryRead'
                 */
                TryGetItem(path: (JsType<System.String> | System.String), itemType: LibraryItemType, item: OutParam<LibraryItem>, ...retrievalOptions: LibraryItemRetrievalOption[]): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2808220059: null;
            }
            
            namespace LibraryManager {
                /**
                 * When copying or moving library items to a new folder how should any conflict be resolved.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                class ConflictResolution extends System.Enum {
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    /** Resolve by keeping both items. The new item will have (2) added to the end of the title. */
                    static readonly KeepBoth: ConflictResolution;
                    /** Resolve by overwriting the old item with the new item. */
                    static readonly KeepNew: ConflictResolution;
                    /** Resolve by keeping the old and not overwriting. */
                    static readonly KeepOld: ConflictResolution;
                    private __type_4164654533: null;
                }
            }
        }
        
        namespace License {
            /**
             * Abstract base class for all classes that define licenses.
             * 
             * 
             * A license is defined by its {@link Spotfire.Dxp.Framework.License.License.Id} which must be globally
             * unique, a {@link Spotfire.Dxp.Framework.License.License.Name}, and a {@link Spotfire.Dxp.Framework.License.License.Description}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class License extends Object {
                /**
                 * Gets the localized description of this license.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the globally unique id of this license.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Id(): JsType<System.String>;
                /**
                 * Return a list of all license functions in this class.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get LicensedFunctions(): System.Collections.Generic.IEnumerable<LicensedFunction>;
                /**
                 * Gets the localized name of this license.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Compares two license functions.
                 * @param lf1 The license function to be compared to lf2.
                 * @param lf2 The license function to be compared to lf1.
                 * @returns -1 if lf1 is smaller than lf2, 0 if lf1=lf2, 1 if lf1 is larger than lf2.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Compare(lf1: LicensedFunction, lf2: LicensedFunction): JsType<System.Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3609090442: null;
            }
            
            /**
             * Instances of this class define parts of a license that can be enabled or
             * disabled by administrators. The licensed function consists of an
             * identifier, a name, and a description. The {@link Spotfire.Dxp.Framework.License.LicensedFunction.Id} of the
             * function is required be unique within the {@link Spotfire.Dxp.Framework.License.License} to which
             * it is being added. The {@link Spotfire.Dxp.Framework.License.LicensedFunction.Name} and {@link Spotfire.Dxp.Framework.License.LicensedFunction.Description}
             * together constitute a user-friendly representation of the feature.
             * Therefore, it is recommended that these strings are localized.
             * 
             * 
             * Licensed functions are typically created as static members of a concrete
             * {@link Spotfire.Dxp.Framework.License.License} implementation.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LicensedFunction extends Object {
                /**
                 * Gets the localized description.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Description(): JsType<System.String>;
                /**
                 * Gets the id of this license function.
                 * This id is unique within the license.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Id(): JsType<System.String>;
                /**
                 * Gets the localized name of the license.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1064212726: null;
            }
            
            /**
             * The LicenseManager is an application wide service that provides
             * information on which {@link Spotfire.Dxp.Framework.License.LicensedFunction} that are enabled.
             * New instances of this manager cannot be created. To access the one and
             * only instance of this class, use one of the service provider methods
             * available.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class LicenseManager extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Determines whether the specified licensed function is enabled.
                 * @param licensedFunction The licensed function to query. May not be null.
                 * @returns true if the specified licensed function is enabled;
                 * otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                IsEnabled(licensedFunction: LicensedFunction): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_397291035: null;
            }
        }
        
        namespace Preferences {
            /**
             * Base class for Preference implementations.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PreferenceBase extends Object {
                /**
                 * Gets the name of the category.
                 * Implementations of this property are to return the name of
                 * the category to which the preference belongs. The category name must
                 * not be null or an empty string for the preference to be
                 * properly persisted.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Category(): JsType<System.String>;
                /**
                 * Gets a value indicating whether this preference object only contains default property values or not.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsEmpty(): JsType<System.Boolean>;
                /**
                 * Gets the name of the sub category.
                 * Implementations of this property are to return the name of
                 * the subcategory to which the preference belongs. The subcategory
                 * must not be null or an empty string for the preference to
                 * be properly persisted.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SubCategory(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Resets all values that may explicitly have been given to the properties
                 * of this preference on a user level basis through a calls to
                 * {@link Spotfire.Dxp.Framework.Preferences.PreferenceProperty.Value}. The effect of resetting a
                 * property is that when the Value of it is queried, either the
                 * group value or the default value will be returned.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Reset(): void;
                /**
                 * Persists all changes to the properties of this preference object.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Save(): void;
                /**
                 * Undoes any changes that may have been to all of the properties
                 * of this preference, since it was last saved.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                UndoChanges(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1476306460: null;
            }
            
            /**
             * Provides functionality to retrieve and set preferences for the currently logged on user.
             * There is only one object of this type available in the application. This instance is registered as a top-level
             * service and can be accessed through one of the service provider methods. New instances of this type cannot be created.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PreferenceManager extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Gets a preference that has been registered with the
                 * framework. Note that a preference must always have been
                 * registered during the initialization phase of an
                 * add-in for it to be returned by this method.
                 * @returns The instance of the preference class corresponding to
                 * T.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeT - @@Generic type argument
                 */
                GetPreference<T extends PreferenceBase>(typeT: TypeRefParam<T>): JsType<T>;
                /**
                 * Determines whether or not a preferences of type T exists,
                 * that is, has been registered with the framework.
                 * @returns true if a preference of type T exists, otherwise false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeT - @@Generic type argument
                 */
                PreferenceExists<T extends PreferenceBase>(typeT: TypeRefParam<T>): JsType<System.Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2259419244: null;
            }
            
            /**
             * One or more preference properties constitute a preference implemented as
             * a type extending {@link Spotfire.Dxp.Framework.Preferences.PreferenceBase}. Each preference
             * property is identified by a name and the
             * {@link Spotfire.Dxp.Framework.Preferences.PreferenceBase.Category} and
             * {@link Spotfire.Dxp.Framework.Preferences.PreferenceBase.SubCategory} of the preference that it
             * is contained in.
             * 
             * 
             * The value of a preference property is decided through inheritance, where
             * user values always have precedence before group values, that is, a user
             * can override that value of a property inherited from a group. The same
             * way, a group can override the value of a parent group. In addition,
             * the preference property may have a default values which is returned when
             * neither parent group(s) nor the user has defined a value for the
             * property.
             * 
             * 
             * Each property is also associated with a version number. This version
             * number must always be increased if the property is changed from the
             * prior version such that the new version cannot be interpreted
             * by older version through the default behavior of the .Net serialization
             * framework. For instance, if the type T is changed
             * from {@link System.String} to {@link System.Int32}, the version number
             * should be increased. The version number should also be increased if
             * properties are added to or removed from T.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PreferenceProperty<T> extends PreferencePropertyBase {
                /**
                 * Gets or sets the value of the property.
                 * A get request to this property will return the overridden value of a
                 * preference property. That is, if the user has overridden the value
                 * inherited from the user group, that inherited value is returned.
                 * Otherwise, the group value is returned. The same way, group values
                 * may override the values inherited from parent groups. If no value
                 * can be found, neither at the group level nor at the user level,
                 * a default value is returned. The default value is passed to the
                 * constructors of this class, either as a value or a
                 * {@link Spotfire.Dxp.Framework.Preferences.PreferenceProperty.DefaultValueCalculatorCallback}. If no default value
                 * exists, null is returned for reference types, and
                 * 0 is returned for value types.
                 * 
                 * 
                 * Setting the property will only affect the user level value and
                 * override the inherited group value (if such exists).
                 * 
                 * 
                 * After setting or resetting the value of a preference property, Save()
                 * must be called on the owning preference to cause the property
                 * to be persisted.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Value(): JsType<T>;
                set Value(value: JsType<T>);
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Use this method to report changes that may have occurred inside of
                 * an mutable property value. The {@link Spotfire.Dxp.Framework.Preferences.PreferenceBase.Save}
                 * must be used to persist the changes.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                OnValueChanged(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_3944638066: null;
            }
            
            /**
             * Base class for a preference property.
             * For more information, refer to {@link Spotfire.Dxp.Framework.Preferences.PreferenceProperty}.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PreferencePropertyBase extends Object {
                /**
                 * Gets the name of this property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Name(): JsType<System.String>;
                /**
                 * Gets the usage of the property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Usage(): PreferenceUsage;
                /**
                 * Gets the type of the value of this property.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get ValueType(): JsType<System.Type>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Resets any value that may explicitly have been given to this property
                 * on a user level basis through a call to
                 * {@link Spotfire.Dxp.Framework.Preferences.PreferenceProperty.Value}. The effect of
                 * resetting a property is that when the Value of it is queried, either
                 * the group value or the default value will be returned.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Reset(): void;
                /**
                 * Undoes any changes that may have been to the value of this property
                 * since it was last saved.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                UndoChanges(): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_493364513: null;
            }
            
            /**
             * Specifies identifiers that define the usage of a preference.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class PreferenceUsage extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The preference value is only defined for a single user. */
                static readonly SingleUser: PreferenceUsage;
                /** The preference may be defined for user groups. */
                static readonly UserGroup: PreferenceUsage;
                private __type_573242220: null;
            }
            
            /**
             * @@Type reference for casting to class {@link Spotfire.Dxp.Framework.Preferences.PreferenceProperty}.
             * @param typeT - @@Generic type argument
             */
            function PreferenceProperty<T>(typeT: TypeRefParam<T>): TypeRef<PreferenceProperty<T>>;
        }
        
        namespace Services {
            /**
             * Class with extension methods for Services-related classes and interfaces.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class Extensions extends Object {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Convenience generic extension method that calls {@link System.IServiceProvider.GetService|GetService(serviceType)} and casts the result.
                 * @param provider The service provider instance.
                 * @returns A service object of type TService -or- null if there is no service object of type TService.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 * @param typeTService - @@Generic type argument
                 */
                static GetService<TService>(typeTService: TypeRefParam<TService>, provider: (JsType<OrExplicit<System.IServiceProvider>> | OrExplicit<System.IServiceProvider>)): (JsType<TService> | null);
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1950703392: null;
            }
        }
        
        namespace Styles {
            /**
             * Represents border radius for a corner in a box.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BorderRadius extends Object {
                /**
                 * Gets the X radius.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get X(): JsType<System.Int32>;
                /**
                 * Gets the Y radius.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Y(): JsType<System.Int32>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.BorderRadius} struct. X and Y radius are the same.
                 * @param radius The radius.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(radius: (JsType<System.Int32> | System.Int32));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.BorderRadius} struct.
                 * @param x The x radius.
                 * @param y The y raidus.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(x: (JsType<System.Int32> | System.Int32), y: (JsType<System.Int32> | System.Int32));
                /**
                 * Indicates whether this instance and a specified object are equal.
                 * @param obj The object to compare with the current instance.
                 * @returns true if obj and this instance are the same type and represent the same value; otherwise, false.
                 */
                Equals(obj: any): JsType<System.Boolean>;
                /**
                 * Returns the hash code for this instance.
                 * @returns A 32-bit signed integer that is the hash code for this instance.
                 */
                GetHashCode(): JsType<System.Int32>;
                /**
                 * Returns the fully qualified type name of this instance.
                 * @returns The fully qualified type name.
                 */
                ToString(): JsType<System.String>;
                /**
                 * The zero border radius, that is, a corner that is not rounded at all.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Zero: BorderRadius;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_903862120: null;
            }
            
            /**
             * Controls how borders appear.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class BorderStyle extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Dashed borders */
                static readonly Dashed: BorderStyle;
                /** Dotted borders */
                static readonly Dotted: BorderStyle;
                /** Double borders */
                static readonly Double: BorderStyle;
                /** No borders */
                static readonly None: BorderStyle;
                /** Solid borders */
                static readonly Solid: BorderStyle;
                private __type_1897130187: null;
            }
            
            /**
             * Represents a color with three bytes for the r,g,b components and a float for alpha.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class ColorInfo extends Object {
                /**
                 * Gets the alpha value of this color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get A(): JsType<System.Byte>;
                /**
                 * Gets the blue value of this color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get B(): JsType<System.Byte>;
                /**
                 * Gets the green value of this color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get G(): JsType<System.Byte>;
                /**
                 * Gets a value indicating whether this instance is completely opaque.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsOpaque(): JsType<System.Boolean>;
                /**
                 * Gets a value indicating whether this instance is completely transparent.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get IsTransparent(): JsType<System.Boolean>;
                /**
                 * Gets the red value of this color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get R(): JsType<System.Byte>;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.ColorInfo} struct from an integer value.
                 * @param argb The color as an int containing a, r, g and b values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(argb: (JsType<System.Int32> | System.Int32));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.ColorInfo} struct using another one as source
                 * but with a new alpha. Clamps the alpha to [0, 1].
                 * @param source The prototype color.
                 * @param a The alpha component.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(source: ColorInfo, a: (JsType<System.Single> | System.Single));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.ColorInfo} struct.
                 * Clamps the color components to the range [0, 255] and sets alpha to 1.
                 * @param r The red component.
                 * @param g The green component.
                 * @param b The blue component.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(r: (JsType<System.Int32> | System.Int32), g: (JsType<System.Int32> | System.Int32), b: (JsType<System.Int32> | System.Int32));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.ColorInfo} struct.
                 * Clamps the color components to the range [0, 255] and alpha to [0, 1].
                 * @param r The red component.
                 * @param g The green component.
                 * @param b The blue component.
                 * @param a The alpha component.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(r: (JsType<System.Int32> | System.Int32), g: (JsType<System.Int32> | System.Int32), b: (JsType<System.Int32> | System.Int32), a: (JsType<System.Single> | System.Single));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.ColorInfo} struct.
                 * Clamps the alpha to [0, 1].
                 * @param r The red component.
                 * @param g The green component.
                 * @param b The blue component.
                 * @param a The alpha component. Clamped to [0, 1].
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(r: (JsType<System.Byte> | System.Byte), g: (JsType<System.Byte> | System.Byte), b: (JsType<System.Byte> | System.Byte), a: (JsType<System.Single> | System.Single));
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.ColorInfo} struct.
                 * @param r The red component.
                 * @param g The green component.
                 * @param b The blue component.
                 * @param a The alpha component.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(r: (JsType<System.Byte> | System.Byte), g: (JsType<System.Byte> | System.Byte), b: (JsType<System.Byte> | System.Byte), a: (JsType<System.Byte> | System.Byte));
                /**
                 * Determines whether the specified object is equal to the current object.
                 * @param obj The object to compare with the current object.
                 * @returns true if the specified object  is equal to the current object; otherwise, false.
                 */
                Equals(obj: any): JsType<System.Boolean>;
                /**
                 * Indicates whether this instance and a specified object are equal.
                 * @param obj The object to compare with the current instance.
                 * @returns true if obj and this instance are the same type and represent the same value; otherwise, false.
                 */
                Equals(obj: any): JsType<System.Boolean>;
                /**
                 * Indicates whether the current object is equal to another object of the same type.
                 * @param other An object to compare with this object.
                 * @returns true if the current object is equal to the other parameter; otherwise, false.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                Equals(other: ColorInfo): JsType<System.Boolean>;
                /**
                 * Returns the hash code for this instance.
                 * @returns A 32-bit signed integer that is the hash code for this instance.
                 */
                GetHashCode(): JsType<System.Int32>;
                /**
                 * Converts this color to an integer.
                 * @returns Color as an integer made up from a, r, g, b values.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ToArgb(): JsType<System.Int32>;
                /**
                 * Creates a font from current settings.
                 * @returns A font. The caller is responsible for disposing it when done.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ToColor(): JsType<System.Drawing.Color>;
                /**
                 * Returns the fully qualified type name of this instance.
                 * @returns The fully qualified type name.
                 */
                ToString(): JsType<System.String>;
                /**
                 * Transparent color. Has all components set to zero (transparent black). Note that this is different from System.Drawing.Color.Transparent which is transparent white.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                static readonly Transparent: ColorInfo;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1319856139: null;
            }
            
            /**
             * Font metadata required for rendering.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FontMetadata extends Object {
                /**
                 * Gets the family name of the font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FamilyName(): JsType<System.String>;
                /**
                 * Gets the style of the font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontStyleFlags(): FontStyleFlags;
                /**
                 * Gets the rendering size of the font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Size(): JsType<System.Single>;
                /**
                 * Gets the rendering unit of the font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Unit(): FontUnit;
                /**
                 * Initializes a new instance of the {@link Spotfire.Dxp.Framework.Styles.FontMetadata} class.
                 * @param familyName The font family name.
                 * @param size The rendering size in units specified by unit.
                 * @param fontStyleFlags The font's styling.
                 * @param unit The unit to use when interpreting size.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                constructor(familyName: (JsType<System.String> | System.String), size: (JsType<System.Single> | System.Single), fontStyleFlags?: FontStyleFlags, unit?: FontUnit);
                /**
                 * Creates a new {@link Spotfire.Dxp.Framework.Styles.FontMetadata} instance with a different size.
                 * @param size The size in units specified by unit.
                 * @param unit The unit of the font size.
                 * @returns A new instance with a different size.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                WithSize(size: (JsType<System.Single> | System.Single), unit: FontUnit): FontMetadata;
                /**
                 * Creates a new {@link Spotfire.Dxp.Framework.Styles.FontMetadata} instance with FontStyleFlags set to flags.
                 * @param flags The new {@link Spotfire.Dxp.Framework.Styles.FontMetadata.FontStyleFlags}.
                 * @returns A new instance with FontStyleFlags set to flags.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                WithStyle(flags: FontStyleFlags): FontMetadata;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_1334590224: null;
            }
            
            /**
             * Controls the font style.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FontStyle extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The italic style. */
                static readonly Italic: FontStyle;
                /** The normal style. */
                static readonly Normal: FontStyle;
                /** The oblique style. Typically a sloped version of the normal style. */
                static readonly Oblique: FontStyle;
                private __type_3264425086: null;
            }
            
            /**
             * Flags for styling fonts.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FontStyleFlags extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Bold font style. */
                static readonly Bold: FontStyleFlags;
                /** Italic font style. */
                static readonly Italic: FontStyleFlags;
                /** No font styling. */
                static readonly Regular: FontStyleFlags;
                /** Strikeout font decoration. */
                static readonly Strikeout: FontStyleFlags;
                /** Underlined font decoration. */
                static readonly Underline: FontStyleFlags;
                private __type_118949523: null;
            }
            
            /**
             * The rendering unit of the font.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FontUnit extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The font's unit is specified in pixels. */
                static readonly Pixel: FontUnit;
                /** The font's unit is specified in points where one point is 0.75 pixels. */
                static readonly Point: FontUnit;
                private __type_910522873: null;
            }
            
            /**
             * Controls the font weight.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class FontWeight extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** The bold weigth. */
                static readonly Bold: FontWeight;
                /** The Bolder weigth. */
                static readonly Bolder: FontWeight;
                /** The Lighter weigth. */
                static readonly Lighter: FontWeight;
                /** The normal weight. */
                static readonly Normal: FontWeight;
                /** The 100 weigth. */
                static readonly W100: FontWeight;
                /** The 200 weigth. */
                static readonly W200: FontWeight;
                /** The 300 weigth. */
                static readonly W300: FontWeight;
                /** The 400 weigth. */
                static readonly W400: FontWeight;
                /** The 500 weigth. */
                static readonly W500: FontWeight;
                /** The 600 weigth. */
                static readonly W600: FontWeight;
                /** The 700 weigth. */
                static readonly W700: FontWeight;
                /** The 800 weigth. */
                static readonly W800: FontWeight;
                /** The 900 weigth. */
                static readonly W900: FontWeight;
                private __type_2483703091: null;
            }
            
            /**
             * A collection of properties describing the styles of a user interface element.
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class StyleProperties extends Object {
                /**
                 * Gets the background color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BackgroundColor(): ColorInfo;
                /**
                 * Gets the border bottom color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderBottomColor(): ColorInfo;
                /**
                 * Gets the border bottom left radius.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderBottomLeftRadius(): BorderRadius;
                /**
                 * Gets the border bottom right radius.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderBottomRightRadius(): BorderRadius;
                /**
                 * Gets the bottom border width.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderBottomWidth(): JsType<System.Int32>;
                /**
                 * Gets the border left color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderLeftColor(): ColorInfo;
                /**
                 * Gets the left border width.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderLeftWidth(): JsType<System.Int32>;
                /**
                 * Gets the border right color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderRightColor(): ColorInfo;
                /**
                 * Gets the right border width.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderRightWidth(): JsType<System.Int32>;
                /**
                 * Gets the border style.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderStyle(): BorderStyle;
                /**
                 * Gets the border top color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderTopColor(): ColorInfo;
                /**
                 * Gets the top left border radius.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderTopLeftRadius(): BorderRadius;
                /**
                 * Gets the border top right radius.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderTopRightRadius(): BorderRadius;
                /**
                 * Gets the top border width.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get BorderTopWidth(): JsType<System.Int32>;
                /**
                 * Gets the color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get Color(): ColorInfo;
                /**
                 * Gets the font family name.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontFamily(): JsType<System.String>;
                /**
                 * Gets the size of the font.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontSize(): JsType<System.Single>;
                /**
                 * Gets the font style.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontStyle(): FontStyle;
                /**
                 * Gets the font weight.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get FontWeight(): FontWeight;
                /**
                 * Gets the bottom margin.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarginBottom(): JsType<System.Int32>;
                /**
                 * Gets the left margin.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarginLeft(): JsType<System.Int32>;
                /**
                 * Gets the right margin.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarginRight(): JsType<System.Int32>;
                /**
                 * Gets the top margin.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get MarginTop(): JsType<System.Int32>;
                /**
                 * Gets the bottom padding.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PaddingBottom(): JsType<System.Int32>;
                /**
                 * Gets the left padding.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PaddingLeft(): JsType<System.Int32>;
                /**
                 * Gets the right padding.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PaddingRight(): JsType<System.Int32>;
                /**
                 * Gets the top padding.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get PaddingTop(): JsType<System.Int32>;
                /**
                 * Gets the secondary color.
                 * Used when rendering labels etc. on graphical elements (bars, lines, etc.) when the Color has worse contrast to the background.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                get SecondaryColor(): ColorInfo;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /**
                 * Creates a font from current settings.
                 * @returns The font metadata.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                CreateFontMetadata(): FontMetadata;
                /**
                 * Gets a suitable color to use for painting the background. Use this to render the background of an element that does not support transparency.
                 * This method is typically only relevant for Forms based implementations of views for CustomVisuals etc. If your view is based on HTML and
                 * Javascript (that is, derived from CustomVisualView) you can just leave your background transparent to use the theme color of the page.
                 * @returns A color.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                GetEffectiveBackgroundColor(): JsType<System.Drawing.Color>;
                /**
                 * Creates a string containing the CSS corrsponding to the current property values.
                 * @returns A CSS string.
                 * 
                 * @since 2.0
                 * 
                 * @group Default capability
                 */
                ToInlineCss(): JsType<System.String>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_496344176: null;
            }
            
            /**
             * Text alignment
             * 
             * @since 2.0
             * 
             * @group Default capability
             */
            class TextAlign extends System.Enum {
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                /** Text is centered. */
                static readonly Center: TextAlign;
                /** Left aligned. */
                static readonly Left: TextAlign;
                /** Right aligned. */
                static readonly Right: TextAlign;
                private __type_1667102996: null;
            }
        }
    }
}

declare namespace System {
    /**
     * Defines a mechanism for retrieving a service object; that is, an object that provides custom support to other objects.
     */
    interface IServiceProvider extends IInterfaceBase {
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
            System_IServiceProvider: Implementation<IServiceProvider>,
        };
    }
    
    /**
     * Represents a Boolean (true or false) value.
     */
    class Boolean extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_873922939: null;
    }
    
    /**
     * Represents an 8-bit unsigned integer.
     */
    class Byte extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_731452657: null;
    }
    
    /**
     * Represents a character as a UTF-16 code unit.
     */
    class Char extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_502829559: null;
    }
    
    /**
     * @ignore
     * @@Helper class with property accessors to express interface types when casting.
     */
    abstract class Collections {
        /** @@Type reference for casting to {{@link System.Collections.ICollection}. */
        static get ICollection(): TypeRef<Collections.ICollection>;
        /** @@Type reference for casting to {{@link System.Collections.IComparer}. */
        static get IComparer(): TypeRef<Collections.IComparer>;
        /** @@Type reference for casting to {{@link System.Collections.IDictionary}. */
        static get IDictionary(): TypeRef<Collections.IDictionary>;
        /** @@Type reference for casting to {{@link System.Collections.IEnumerable}. */
        static get IEnumerable(): TypeRef<Collections.IEnumerable>;
        /** @@Type reference for casting to {{@link System.Collections.IEnumerator}. */
        static get IEnumerator(): TypeRef<Collections.IEnumerator>;
        /** @@Type reference for casting to {{@link System.Collections.IList}. */
        static get IList(): TypeRef<Collections.IList>;
    }
    
    /**
     * Represents an instant in time, typically expressed as a date and time of day.
     */
    class DateTime extends Object {
        /**
         * Gets a {@link System.DateTime} object that is set to the current date and time on this computer, expressed as the local time.
         * @returns An object whose value is the current local date and time.
         */
        static get Now(): JsType<DateTime>;
        /**
         * Gets the current date.
         * @returns An object that is set to today's date, with the time component set to 00:00:00.
         */
        static get Today(): JsType<DateTime>;
        /**
         * Gets a {@link System.DateTime} object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
         * @returns An object whose value is the current UTC date and time.
         */
        static get UtcNow(): JsType<DateTime>;
        /**
         * Gets the date component of this instance.
         * @returns A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).
         */
        get Date(): JsType<DateTime>;
        /**
         * Gets the day of the month represented by this instance.
         * @returns The day component, expressed as a value between 1 and 31.
         */
        get Day(): JsType<Int32>;
        /**
         * Gets the day of the week represented by this instance.
         * @returns An enumerated constant that indicates the day of the week of this {@link System.DateTime} value.
         */
        get DayOfWeek(): JsType<DayOfWeek>;
        /**
         * Gets the day of the year represented by this instance.
         * @returns The day of the year, expressed as a value between 1 and 366.
         */
        get DayOfYear(): JsType<Int32>;
        /**
         * Gets the hour component of the date represented by this instance.
         * @returns The hour component, expressed as a value between 0 and 23.
         */
        get Hour(): JsType<Int32>;
        /**
         * Gets a value that indicates whether the time represented by this instance is based on local time, Coordinated Universal Time (UTC), or neither.
         * @returns One of the enumeration values that indicates what the current time represents. The default is {@link System.DateTimeKind.Unspecified}.
         */
        get Kind(): JsType<DateTimeKind>;
        /**
         * Gets the milliseconds component of the date represented by this instance.
         * @returns The milliseconds component, expressed as a value between 0 and 999.
         */
        get Millisecond(): JsType<Int32>;
        /**
         * Gets the minute component of the date represented by this instance.
         * @returns The minute component, expressed as a value between 0 and 59.
         */
        get Minute(): JsType<Int32>;
        /**
         * Gets the month component of the date represented by this instance.
         * @returns The month component, expressed as a value between 1 and 12.
         */
        get Month(): JsType<Int32>;
        /**
         * Gets the seconds component of the date represented by this instance.
         * @returns The seconds component, expressed as a value between 0 and 59.
         */
        get Second(): JsType<Int32>;
        /**
         * Gets the number of ticks that represent the date and time of this instance.
         * @returns The number of ticks that represent the date and time of this instance. The value is between DateTime.MinValue.Ticks and DateTime.MaxValue.Ticks.
         */
        get Ticks(): JsType<Int64>;
        /**
         * Gets the time of day for this instance.
         * @returns A time interval that represents the fraction of the day that has elapsed since midnight.
         */
        get TimeOfDay(): JsType<TimeSpan>;
        /**
         * Gets the year component of the date represented by this instance.
         * @returns The year, between 1 and 9999.
         */
        get Year(): JsType<Int32>;
        /**
         * Initializes a new instance of the {@link System.DateTime} structure to a specified number of ticks.
         * @param ticks A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.
         */
        constructor(ticks: (JsType<Int64> | Int64));
        /**
         * Initializes a new instance of the {@link System.DateTime} structure to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.
         * @param ticks A date and time expressed in the number of 100-nanosecond intervals that have elapsed since January 1, 0001 at 00:00:00.000 in the Gregorian calendar.
         * @param kind One of the enumeration values that indicates whether ticks specifies a local time, Coordinated Universal Time (UTC), or neither.
         */
        constructor(ticks: (JsType<Int64> | Int64), kind: (JsType<DateTimeKind> | DateTimeKind));
        /**
         * Returns the number of days in the specified month and year.
         * @param year The year.
         * @param month The month (a number ranging from 1 to 12).
         * @returns The number of days in month for the specified year.
         *  For example, if month equals 2 for February, the return value is 28 or 29 depending upon whether year is a leap year.
         */
        static DaysInMonth(year: (JsType<Int32> | Int32), month: (JsType<Int32> | Int32)): JsType<Int32>;
        /**
         * Converts the string representation of a date and time to its {@link System.DateTime} equivalent by using the conventions of the current thread culture.
         * @param s A string that contains a date and time to convert. See The string to parse for more information.
         * @returns An object that is equivalent to the date and time contained in s.
         */
        static Parse(s: (JsType<String> | String)): JsType<DateTime>;
        /**
         * Creates a new {@link System.DateTime} object that has the same number of ticks as the specified {@link System.DateTime}, but is designated as either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified {@link System.DateTimeKind} value.
         * @param value A date and time.
         * @param kind One of the enumeration values that indicates whether the new object represents local time, UTC, or neither.
         * @returns A new object that has the same number of ticks as the object represented by the value parameter and the {@link System.DateTimeKind} value specified by the kind parameter.
         */
        static SpecifyKind(value: (JsType<DateTime> | DateTime), kind: (JsType<DateTimeKind> | DateTimeKind)): JsType<DateTime>;
        /**
         * Converts the specified string representation of a date and time to its {@link System.DateTime} equivalent and returns a value that indicates whether the conversion succeeded.
         * @param s A string containing a date and time to convert.
         * @param result When this method returns, contains the {@link System.DateTime} value equivalent to the date and time contained in s, if the conversion succeeded, or {@link System.DateTime.MinValue} if the conversion failed. The conversion fails if the s parameter is null, is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.
         * @returns true if the s parameter was converted successfully; otherwise, false.
         */
        static TryParse(s: (JsType<String> | String), result: OutParam<DateTime>): JsType<Boolean>;
        /**
         * Returns a new {@link System.DateTime} that adds the value of the specified {@link System.TimeSpan} to the value of this instance.
         * @param value A positive or negative time interval.
         * @returns An object whose value is the sum of the date and time represented by this instance and the time interval represented by value.
         */
        Add(value: (JsType<TimeSpan> | TimeSpan)): JsType<DateTime>;
        /**
         * Returns a new {@link System.DateTime} that adds the specified number of days to the value of this instance.
         * @param value A number of whole and fractional days. The value parameter can be negative or positive.
         * @returns An object whose value is the sum of the date and time represented by this instance and the number of days represented by value.
         */
        AddDays(value: (JsType<Double> | Double)): JsType<DateTime>;
        /**
         * Returns a new {@link System.DateTime} that adds the specified number of hours to the value of this instance.
         * @param value A number of whole and fractional hours. The value parameter can be negative or positive.
         * @returns An object whose value is the sum of the date and time represented by this instance and the number of hours represented by value.
         */
        AddHours(value: (JsType<Double> | Double)): JsType<DateTime>;
        /**
         * Returns a new {@link System.DateTime} that adds the specified number of milliseconds to the value of this instance.
         * @param value A number of whole and fractional milliseconds. The value parameter can be negative or positive. Note that this value is rounded to the nearest integer.
         * @returns An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by value.
         */
        AddMilliseconds(value: (JsType<Double> | Double)): JsType<DateTime>;
        /**
         * Returns a new {@link System.DateTime} that adds the specified number of minutes to the value of this instance.
         * @param value A number of whole and fractional minutes. The value parameter can be negative or positive.
         * @returns An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by value.
         */
        AddMinutes(value: (JsType<Double> | Double)): JsType<DateTime>;
        /**
         * Returns a new {@link System.DateTime} that adds the specified number of months to the value of this instance.
         * @param months A number of months. The months parameter can be negative or positive.
         * @returns An object whose value is the sum of the date and time represented by this instance and months.
         */
        AddMonths(months: (JsType<Int32> | Int32)): JsType<DateTime>;
        /**
         * Returns a new {@link System.DateTime} that adds the specified number of seconds to the value of this instance.
         * @param value A number of whole and fractional seconds. The value parameter can be negative or positive.
         * @returns An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by value.
         */
        AddSeconds(value: (JsType<Double> | Double)): JsType<DateTime>;
        /**
         * Returns a new {@link System.DateTime} that adds the specified number of ticks to the value of this instance.
         * @param value A number of 100-nanosecond ticks. The value parameter can be positive or negative.
         * @returns An object whose value is the sum of the date and time represented by this instance and the time represented by value.
         */
        AddTicks(value: (JsType<Int64> | Int64)): JsType<DateTime>;
        /**
         * Returns a new {@link System.DateTime} that adds the specified number of years to the value of this instance.
         * @param value A number of years. The value parameter can be negative or positive.
         * @returns An object whose value is the sum of the date and time represented by this instance and the number of years represented by value.
         */
        AddYears(value: (JsType<Int32> | Int32)): JsType<DateTime>;
        /**
         * Indicates whether this instance of {@link System.DateTime} is within the daylight saving time range for the current time zone.
         * @returns true if the value of the {@link System.DateTime.Kind} property is {@link System.DateTimeKind.Local} or {@link System.DateTimeKind.Unspecified} and the value of this instance of {@link System.DateTime} is within the daylight saving time range for the local time zone; false if {@link System.DateTime.Kind} is {@link System.DateTimeKind.Utc}.
         */
        IsDaylightSavingTime(): JsType<Boolean>;
        /**
         * Subtracts the specified date and time from this instance.
         * @param value The date and time value to subtract.
         * @returns A time interval that is equal to the date and time represented by this instance minus the date and time represented by value.
         */
        Subtract(value: (JsType<DateTime> | DateTime)): JsType<TimeSpan>;
        /**
         * Subtracts the specified duration from this instance.
         * @param value The time interval to subtract.
         * @returns An object that is equal to the date and time represented by this instance minus the time interval represented by value.
         */
        Subtract(value: (JsType<TimeSpan> | TimeSpan)): JsType<DateTime>;
        /**
         * Serializes the current {@link System.DateTime} object to a 64-bit binary value that subsequently can be used to recreate the {@link System.DateTime} object.
         * @returns A 64-bit signed integer that encodes the {@link System.DateTime.Kind} and {@link System.DateTime.Ticks} properties.
         */
        ToBinary(): JsType<Int64>;
        /**
         * Converts the value of the current {@link System.DateTime} object to local time.
         * @returns An object whose {@link System.DateTime.Kind} property is {@link System.DateTimeKind.Local}, and whose value is the local time equivalent to the value of the current {@link System.DateTime} object, or {@link System.DateTime.MaxValue} if the converted value is too large to be represented by a {@link System.DateTime} object, or {@link System.DateTime.MinValue} if the converted value is too small to be represented as a {@link System.DateTime} object.
         */
        ToLocalTime(): JsType<DateTime>;
        /**
         * Converts the value of the current {@link System.DateTime} object to its equivalent long date string representation.
         * @returns A string that contains the long date string representation of the current {@link System.DateTime} object.
         */
        ToLongDateString(): JsType<String>;
        /**
         * Converts the value of the current {@link System.DateTime} object to its equivalent long time string representation.
         * @returns A string that contains the long time string representation of the current {@link System.DateTime} object.
         */
        ToLongTimeString(): JsType<String>;
        /**
         * Converts the value of the current {@link System.DateTime} object to its equivalent short date string representation.
         * @returns A string that contains the short date string representation of the current {@link System.DateTime} object.
         */
        ToShortDateString(): JsType<String>;
        /**
         * Converts the value of the current {@link System.DateTime} object to its equivalent short time string representation.
         * @returns A string that contains the short time string representation of the current {@link System.DateTime} object.
         */
        ToShortTimeString(): JsType<String>;
        /**
         * Converts the value of the current {@link System.DateTime} object to Coordinated Universal Time (UTC).
         * @returns An object whose {@link System.DateTime.Kind} property is {@link System.DateTimeKind.Utc}, and whose value is the UTC equivalent to the value of the current {@link System.DateTime} object, or {@link System.DateTime.MaxValue} if the converted value is too large to be represented by a {@link System.DateTime} object, or {@link System.DateTime.MinValue} if the converted value is too small to be represented by a {@link System.DateTime} object.
         */
        ToUniversalTime(): JsType<DateTime>;
        /** Represents the largest possible value of {@link System.DateTime}. This field is read-only. */
        static readonly MaxValue: DateTime;
        /** Represents the smallest possible value of {@link System.DateTime}. This field is read-only. */
        static readonly MinValue: DateTime;
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_2036521186: null;
    }
    
    /**
     * Specifies whether a {@link System.DateTime} object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.
     */
    class DateTimeKind extends Enum {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /** The time represented is local time. */
        static readonly Local: DateTimeKind;
        /** The time represented is not specified as either local time or Coordinated Universal Time (UTC). */
        static readonly Unspecified: DateTimeKind;
        /** The time represented is UTC. */
        static readonly Utc: DateTimeKind;
        private __type_3530135128: null;
    }
    
    /**
     * Specifies the day of the week.
     */
    class DayOfWeek extends Enum {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /** Indicates Friday. */
        static readonly Friday: DayOfWeek;
        /** Indicates Monday. */
        static readonly Monday: DayOfWeek;
        /** Indicates Saturday. */
        static readonly Saturday: DayOfWeek;
        /** Indicates Sunday. */
        static readonly Sunday: DayOfWeek;
        /** Indicates Thursday. */
        static readonly Thursday: DayOfWeek;
        /** Indicates Tuesday. */
        static readonly Tuesday: DayOfWeek;
        /** Indicates Wednesday. */
        static readonly Wednesday: DayOfWeek;
        private __type_2065093410: null;
    }
    
    /**
     * Represents a decimal floating-point number.
     */
    class Decimal extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_2068016594: null;
    }
    
    /**
     * Represents a double-precision floating-point number.
     */
    class Double extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_1126363902: null;
    }
    
    /**
     * Provides the base class for enumerations.
     */
    class Enum extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * Perform And operation on enum values.
         * @param rest The other enum values.
         * @returns The result.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        And(...rest: (JsType<Enum> | Enum)[]): this;
        /**
         * Determines whether one or more bit fields are set in the current instance.
         * @param flag An enumeration value.
         * @returns true if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, false.
         */
        HasFlag(flag: (JsType<Enum> | Enum)): JsType<Boolean>;
        /**
         * Perform Or operation on enum values.
         * @param rest The other enum values.
         * @returns The result.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        Or(...rest: (JsType<Enum> | Enum)[]): this;
        /**
         * Perform Xor operation on enum values.
         * @param rest The other enum values.
         * @returns The result.
         * 
         * @since 2.0
         * 
         * @group Default capability
         */
        Xor(...rest: (JsType<Enum> | Enum)[]): this;
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_3803011062: null;
    }
    
    /**
     * Represents errors that occur during application execution.
     */
    class Exception extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_3270756204: null;
    }
    
    /**
     * Represents a globally unique identifier (GUID).
     */
    class Guid extends Object {
        /**
         * Initializes a new instance of the {@link System.Guid} structure by using the value represented by the specified string.
         * @param g A string that contains a GUID in one of the following formats ("d" represents a hexadecimal digit whose case is ignored):
         *  32 contiguous digits:
         *  dddddddddddddddddddddddddddddddd
         *  -or-
         *  Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses:
         *  dddddddd-dddd-dddd-dddd-dddddddddddd
         *  -or-
         *  {dddddddd-dddd-dddd-dddd-dddddddddddd}
         *  -or-
         *  (dddddddd-dddd-dddd-dddd-dddddddddddd)
         *  -or-
         *  Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces:
         *  {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}
         *  All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeros in a group are ignored.
         *  The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low-order digits of the group.
         */
        constructor(g: (JsType<String> | String));
        /**
         * Initializes a new instance of the {@link System.Guid} structure.
         * @returns A new GUID object.
         */
        static NewGuid(): JsType<Guid>;
        /**
         * Converts the string representation of a GUID to the equivalent {@link System.Guid} structure.
         * @param input The string to convert.
         * @returns A structure that contains the value that was parsed.
         */
        static Parse(input: (JsType<String> | String)): JsType<Guid>;
        /**
         * Converts the string representation of a GUID to the equivalent {@link System.Guid} structure.
         * @param input The GUID to convert.
         * @param result The structure that will contain the parsed value. If the method returns true, result contains a valid {@link System.Guid}. If the method returns false, result equals {@link System.Guid.Empty}.
         * @returns true if the parse operation was successful; otherwise, false.
         */
        static TryParse(input: (JsType<String> | String), result: OutParam<Guid>): JsType<Boolean>;
        /**
         * Returns a string representation of the value of this instance in registry format.
         * @returns The value of this {@link System.Guid}, formatted by using the "D" format specifier as follows:
         *  xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
         *  where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27". To convert the hexadecimal digits from a through f to uppercase, call the {@link System.String.ToUpper} method on the returned string.
         */
        ToString(): JsType<String>;
        /**
         * Returns a string that represents the current object.
         * @returns A string that represents the current object.
         */
        ToString(): JsType<String>;
        /**
         * Returns a string representation of the value of this {@link System.Guid} instance, according to the provided format specifier.
         * @param format A single format specifier that indicates how to format the value of this {@link System.Guid}. The format parameter can be "N", "D", "B", "P", or "X". If format is null or an empty string (""), "D" is used.
         * @returns The value of this {@link System.Guid}, represented as a series of lowercase hexadecimal digits in the specified format.
         */
        ToString(format: (JsType<String> | String)): JsType<String>;
        /** A read-only instance of the {@link System.Guid} structure whose value is all zeros. */
        static readonly Empty: Guid;
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_3876917110: null;
    }
    
    /**
     * Represents a 16-bit signed integer.
     */
    class Int16 extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_1089594135: null;
    }
    
    /**
     * Represents a 32-bit signed integer.
     */
    class Int32 extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_3415192965: null;
    }
    
    /**
     * Represents a 64-bit signed integer.
     */
    class Int64 extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_2252393554: null;
    }
    
    /**
     * Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.
     */
    class Object extends NetClass {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * Determines whether the specified object instances are considered equal.
         * @param objA The first object to compare.
         * @param objB The second object to compare.
         * @returns true if the objects are considered equal; otherwise, false. If both objA and objB are null, the method returns true.
         */
        static Equals(objA: any, objB: any): JsType<Boolean>;
        /**
         * Determines whether the specified object is equal to the current object.
         * @param obj The object to compare with the current object.
         * @returns true if the specified object  is equal to the current object; otherwise, false.
         */
        Equals(obj: any): JsType<Boolean>;
        /**
         * Serves as the default hash function.
         * @returns A hash code for the current object.
         */
        GetHashCode(): JsType<Int32>;
        /**
         * Returns a string that represents the current object.
         * @returns A string that represents the current object.
         */
        ToString(): JsType<String>;
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_4032764812: null;
    }
    
    /**
     * Represents a single-precision floating-point number.
     */
    class Single extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_3419825449: null;
    }
    
    /**
     * Represents text as a sequence of UTF-16 code units.
     */
    class String extends Object implements Explicit<Collections.IEnumerable>, Explicit<Collections.Generic.IEnumerable<Char>> {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        [Symbol.iterator](): Iterator<JsType<Char>>;
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
            System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
            System_Collections_Generic_IEnumerable: Implementation<Collections.Generic.IEnumerable<Char>>,
        };
        private __type_3372535750: null;
    }
    
    /**
     * Represents a time interval.
     */
    class TimeSpan extends Object {
        /**
         * Gets the days component of the time interval represented by the current {@link System.TimeSpan} structure.
         * @returns The day component of this instance. The return value can be positive or negative.
         */
        get Days(): JsType<Int32>;
        /**
         * Gets the hours component of the time interval represented by the current {@link System.TimeSpan} structure.
         * @returns The hour component of the current {@link System.TimeSpan} structure. The return value ranges from -23 through 23.
         */
        get Hours(): JsType<Int32>;
        /**
         * Gets the milliseconds component of the time interval represented by the current {@link System.TimeSpan} structure.
         * @returns The millisecond component of the current {@link System.TimeSpan} structure. The return value ranges from -999 through 999.
         */
        get Milliseconds(): JsType<Int32>;
        /**
         * Gets the minutes component of the time interval represented by the current {@link System.TimeSpan} structure.
         * @returns The minute component of the current {@link System.TimeSpan} structure. The return value ranges from -59 through 59.
         */
        get Minutes(): JsType<Int32>;
        /**
         * Gets the seconds component of the time interval represented by the current {@link System.TimeSpan} structure.
         * @returns The second component of the current {@link System.TimeSpan} structure. The return value ranges from -59 through 59.
         */
        get Seconds(): JsType<Int32>;
        /**
         * Gets the number of ticks that represent the value of the current {@link System.TimeSpan} structure.
         * @returns The number of ticks contained in this instance.
         */
        get Ticks(): JsType<Int64>;
        /**
         * Gets the value of the current {@link System.TimeSpan} structure expressed in whole and fractional days.
         * @returns The total number of days represented by this instance.
         */
        get TotalDays(): JsType<Double>;
        /**
         * Gets the value of the current {@link System.TimeSpan} structure expressed in whole and fractional hours.
         * @returns The total number of hours represented by this instance.
         */
        get TotalHours(): JsType<Double>;
        /**
         * Gets the value of the current {@link System.TimeSpan} structure expressed in whole and fractional milliseconds.
         * @returns The total number of milliseconds represented by this instance.
         */
        get TotalMilliseconds(): JsType<Double>;
        /**
         * Gets the value of the current {@link System.TimeSpan} structure expressed in whole and fractional minutes.
         * @returns The total number of minutes represented by this instance.
         */
        get TotalMinutes(): JsType<Double>;
        /**
         * Gets the value of the current {@link System.TimeSpan} structure expressed in whole and fractional seconds.
         * @returns The total number of seconds represented by this instance.
         */
        get TotalSeconds(): JsType<Double>;
        /**
         * Initializes a new instance of the {@link System.TimeSpan} structure to a specified number of hours, minutes, and seconds.
         * @param hours Number of hours.
         * @param minutes Number of minutes.
         * @param seconds Number of seconds.
         */
        constructor(hours: (JsType<Int32> | Int32), minutes: (JsType<Int32> | Int32), seconds: (JsType<Int32> | Int32));
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_478607170: null;
    }
    
    /**
     * Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.
     */
    class Type extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_2647118743: null;
    }
    
    /**
     * Represents a 16-bit unsigned integer.
     */
    class UInt16 extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_2330198128: null;
    }
    
    /**
     * Represents a 32-bit unsigned integer.
     */
    class UInt32 extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_3492997538: null;
    }
    
    /**
     * Represents a 64-bit unsigned integer.
     */
    class UInt64 extends Object {
        /**
         * @ignore
         * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
         */
        constructor();
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_4252512431: null;
    }
    
    /**
     * Provides an object representation of a uniform resource identifier (URI) and easy access to the parts of the URI.
     */
    class Uri extends Object {
        /**
         * Gets the absolute path of the URI.
         * @returns A {@link System.String} containing the absolute path to the resource.
         */
        get AbsolutePath(): JsType<String>;
        /**
         * Gets the absolute URI.
         * @returns A {@link System.String} containing the entire URI.
         */
        get AbsoluteUri(): JsType<String>;
        /**
         * Gets the Domain Name System (DNS) host name or IP address and the port number for a server.
         * @returns A {@link System.String} containing the authority component of the URI represented by this instance.
         */
        get Authority(): JsType<String>;
        /**
         * Gets the escaped URI fragment.
         * @returns A {@link System.String} that contains any URI fragment information.
         */
        get Fragment(): JsType<String>;
        /**
         * Gets the host component of this instance.
         * @returns A {@link System.String} that contains the host name. This is usually the DNS host name or IP address of the server.
         */
        get Host(): JsType<String>;
        /**
         * Gets whether the {@link System.Uri} instance is absolute.
         * @returns A {@link System.Boolean} value that is true if the {@link System.Uri} instance is absolute; otherwise, false.
         */
        get IsAbsoluteUri(): JsType<Boolean>;
        /**
         * Gets a value indicating whether the specified {@link System.Uri} is a file URI.
         * @returns A {@link System.Boolean} value that is true if the {@link System.Uri} is a file URI; otherwise, false.
         */
        get IsFile(): JsType<Boolean>;
        /**
         * Gets whether the specified {@link System.Uri} references the local host.
         * @returns A {@link System.Boolean} value that is true if this {@link System.Uri} references the local host; otherwise, false.
         */
        get IsLoopback(): JsType<Boolean>;
        /**
         * Gets the original URI string that was passed to the {@link System.Uri} constructor.
         * @returns A {@link System.String} containing the exact URI specified when this instance was constructed; otherwise, {@link System.String.Empty}.
         */
        get OriginalString(): JsType<String>;
        /**
         * Gets the {@link System.Uri.AbsolutePath} and {@link System.Uri.Query} properties separated by a question mark (?).
         * @returns A {@link System.String} that contains the {@link System.Uri.AbsolutePath} and {@link System.Uri.Query} properties separated by a question mark (?).
         */
        get PathAndQuery(): JsType<String>;
        /**
         * Gets the port number of this URI.
         * @returns An {@link System.Int32} value that contains the port number for this URI.
         */
        get Port(): JsType<Int32>;
        /**
         * Gets any query information included in the specified URI.
         * @returns A {@link System.String} that contains any query information included in the specified URI.
         */
        get Query(): JsType<String>;
        /**
         * Gets the scheme name for this URI.
         * @returns A {@link System.String} that contains the scheme for this URI, converted to lowercase.
         */
        get Scheme(): JsType<String>;
        /**
         * Initializes a new instance of the {@link System.Uri} class with the specified URI.
         * @param uriString A string that identifies the resource to be represented by the {@link System.Uri} instance. Note that an IPv6 address in string form must be enclosed within brackets. For example, "http://[2607:f8b0:400d:c06::69]".
         */
        constructor(uriString: (JsType<String> | String));
        /**
         * Initializes a new instance of the {@link System.Uri} class based on the specified base URI and relative URI string.
         * @param baseUri The base URI.
         * @param relativeUri The relative URI to add to the base URI.
         */
        constructor(baseUri: (JsType<Uri> | Uri), relativeUri: (JsType<String> | String));
        /**
         * Converts a string to its escaped representation.
         * @param stringToEscape The string to escape.
         * @returns A {@link System.String} that contains the escaped representation of stringToEscape.
         */
        static EscapeDataString(stringToEscape: (JsType<String> | String)): JsType<String>;
        /**
         * Converts a string to its unescaped representation.
         * @param stringToUnescape The string to unescape.
         * @returns A {@link System.String} that contains the unescaped representation of stringToUnescape.
         */
        static UnescapeDataString(stringToUnescape: (JsType<String> | String)): JsType<String>;
        /**
         * Determines whether the current {@link System.Uri} instance is a base of the specified {@link System.Uri} instance.
         * @param uri The specified {@link System.Uri} instance to test.
         * @returns true if the current {@link System.Uri} instance is a base of uri; otherwise, false.
         */
        IsBaseOf(uri: (JsType<Uri> | Uri)): JsType<Boolean>;
        /**
         * @ignore
         * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
         */
        _interfaces: {
        };
        private __type_1362886457: null;
    }
    
    namespace Collections {
        /**
         * Defines size, enumerators, and synchronization methods for all nongeneric collections.
         */
        interface ICollection extends IInterfaceBase, IEnumerable {
            /**
             * Gets the number of elements contained in the {@link System.Collections.ICollection}.
             * @returns The number of elements contained in the {@link System.Collections.ICollection}.
             */
            get Count(): JsType<Int32>;
            [Symbol.iterator](): Iterator<unknown>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_ICollection: Implementation<ICollection>,
                System_Collections_IEnumerable: Implementation<IEnumerable>,
            };
        }
        
        /**
         * Exposes a method that compares two objects.
         */
        interface IComparer extends IInterfaceBase {
            /**
             * Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
             * @param x The first object to compare.
             * @param y The second object to compare.
             * @returns A signed integer that indicates the relative values of x and y:   - If less than 0, x is less than y.   - If 0, x equals y.   - If greater than 0, x is greater than y.
             */
            Compare(x: any, y: any): JsType<Int32>;
            /**
             * Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
             * @param x The first object to compare.
             * @param y The second object to compare.
             * @returns A signed integer that indicates the relative values of x and y:   - If less than 0, x is less than y.   - If 0, x equals y.   - If greater than 0, x is greater than y.
             */
            Compare(x: any, y: any): JsType<Int32>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_IComparer: Implementation<IComparer>,
            };
        }
        
        /**
         * Represents a nongeneric collection of key/value pairs.
         */
        interface IDictionary extends IInterfaceBase, ICollection, IEnumerable {
            /**
             * Gets a value indicating whether the {@link System.Collections.IDictionary} object has a fixed size.
             * @returns true if the {@link System.Collections.IDictionary} object has a fixed size; otherwise, false.
             */
            get IsFixedSize(): JsType<Boolean>;
            /**
             * Gets a value indicating whether the {@link System.Collections.IDictionary} object is read-only.
             * @returns true if the {@link System.Collections.IDictionary} object is read-only; otherwise, false.
             */
            get IsReadOnly(): JsType<Boolean>;
            /**
             * Gets an {@link System.Collections.ICollection} object containing the keys of the {@link System.Collections.IDictionary} object.
             * @returns An {@link System.Collections.ICollection} object containing the keys of the {@link System.Collections.IDictionary} object.
             */
            get Keys(): JsType<ICollection>;
            /**
             * Gets an {@link System.Collections.ICollection} object containing the values in the {@link System.Collections.IDictionary} object.
             * @returns An {@link System.Collections.ICollection} object containing the values in the {@link System.Collections.IDictionary} object.
             */
            get Values(): JsType<ICollection>;
            [Symbol.iterator](): Iterator<unknown>;
            /**
             * Adds an element with the provided key and value to the {@link System.Collections.IDictionary} object.
             * @param key The {@link System.Object} to use as the key of the element to add.
             * @param value The {@link System.Object} to use as the value of the element to add.
             */
            Add(key: any, value: any): void;
            /**
             * Adds an element with the provided key and value to the {@link System.Collections.IDictionary} object.
             * @param key The {@link System.Object} to use as the key of the element to add.
             * @param value The {@link System.Object} to use as the value of the element to add.
             */
            Add(key: any, value: any): void;
            /**
             * Removes all elements from the {@link System.Collections.IDictionary} object.
             */
            Clear(): void;
            /**
             * Determines whether the {@link System.Collections.IDictionary} object contains an element with the specified key.
             * @param key The key to locate in the {@link System.Collections.IDictionary} object.
             * @returns true if the {@link System.Collections.IDictionary} contains an element with the key; otherwise, false.
             */
            Contains(key: any): JsType<Boolean>;
            /**
             * Determines whether the {@link System.Collections.IDictionary} object contains an element with the specified key.
             * @param key The key to locate in the {@link System.Collections.IDictionary} object.
             * @returns true if the {@link System.Collections.IDictionary} contains an element with the key; otherwise, false.
             */
            Contains(key: any): JsType<Boolean>;
            /**
             * Removes the element with the specified key from the {@link System.Collections.IDictionary} object.
             * @param key The key of the element to remove.
             */
            Remove(key: any): void;
            /**
             * Removes the element with the specified key from the {@link System.Collections.IDictionary} object.
             * @param key The key of the element to remove.
             */
            Remove(key: any): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_IDictionary: Implementation<IDictionary>,
                System_Collections_ICollection: Implementation<ICollection>,
                System_Collections_IEnumerable: Implementation<IEnumerable>,
            };
            /**
             * Gets or sets the element with the specified key.
             * @param key The key of the element to get or set.
             * @returns The element with the specified key, or null if the key does not exist.
             */
            readonly Item: (PropertyGet<any, unknown> & PropertySet<any, any>);
        }
        
        /**
         * Exposes an enumerator, which supports a simple iteration over a non-generic collection.
         */
        interface IEnumerable extends IInterfaceBase {
            [Symbol.iterator](): Iterator<unknown>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_IEnumerable: Implementation<IEnumerable>,
            };
        }
        
        /**
         * Supports a simple iteration over a non-generic collection.
         */
        interface IEnumerator extends IInterfaceBase {
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_IEnumerator: Implementation<IEnumerator>,
            };
        }
        
        /**
         * Represents a non-generic collection of objects that can be individually accessed by index.
         */
        interface IList extends IInterfaceBase, ICollection, IEnumerable {
            /**
             * Gets a value indicating whether the {@link System.Collections.IList} has a fixed size.
             * @returns true if the {@link System.Collections.IList} has a fixed size; otherwise, false.
             */
            get IsFixedSize(): JsType<Boolean>;
            /**
             * Gets a value indicating whether the {@link System.Collections.IList} is read-only.
             * @returns true if the {@link System.Collections.IList} is read-only; otherwise, false.
             */
            get IsReadOnly(): JsType<Boolean>;
            [Symbol.iterator](): Iterator<unknown>;
            /**
             * Adds an item to the {@link System.Collections.IList}.
             * @param value The object to add to the {@link System.Collections.IList}.
             * @returns The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.
             */
            Add(value: any): JsType<Int32>;
            /**
             * Adds an item to the {@link System.Collections.IList}.
             * @param value The object to add to the {@link System.Collections.IList}.
             * @returns The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.
             */
            Add(value: any): JsType<Int32>;
            /**
             * Removes all items from the {@link System.Collections.IList}.
             */
            Clear(): void;
            /**
             * Determines whether the {@link System.Collections.IList} contains a specific value.
             * @param value The object to locate in the {@link System.Collections.IList}.
             * @returns true if the {@link System.Object} is found in the {@link System.Collections.IList}; otherwise, false.
             */
            Contains(value: any): JsType<Boolean>;
            /**
             * Determines whether the {@link System.Collections.IList} contains a specific value.
             * @param value The object to locate in the {@link System.Collections.IList}.
             * @returns true if the {@link System.Object} is found in the {@link System.Collections.IList}; otherwise, false.
             */
            Contains(value: any): JsType<Boolean>;
            /**
             * Determines the index of a specific item in the {@link System.Collections.IList}.
             * @param value The object to locate in the {@link System.Collections.IList}.
             * @returns The index of value if found in the list; otherwise, -1.
             */
            IndexOf(value: any): JsType<Int32>;
            /**
             * Determines the index of a specific item in the {@link System.Collections.IList}.
             * @param value The object to locate in the {@link System.Collections.IList}.
             * @returns The index of value if found in the list; otherwise, -1.
             */
            IndexOf(value: any): JsType<Int32>;
            /**
             * Inserts an item to the {@link System.Collections.IList} at the specified index.
             * @param index The zero-based index at which value should be inserted.
             * @param value The object to insert into the {@link System.Collections.IList}.
             */
            Insert(index: (JsType<Int32> | Int32), value: any): void;
            /**
             * Inserts an item to the {@link System.Collections.IList} at the specified index.
             * @param index The zero-based index at which value should be inserted.
             * @param value The object to insert into the {@link System.Collections.IList}.
             */
            Insert(index: (JsType<Int32> | Int32), value: any): void;
            /**
             * Removes the first occurrence of a specific object from the {@link System.Collections.IList}.
             * @param value The object to remove from the {@link System.Collections.IList}.
             */
            Remove(value: any): void;
            /**
             * Removes the first occurrence of a specific object from the {@link System.Collections.IList}.
             * @param value The object to remove from the {@link System.Collections.IList}.
             */
            Remove(value: any): void;
            /**
             * Removes the {@link System.Collections.IList} item at the specified index.
             * @param index The zero-based index of the item to remove.
             */
            RemoveAt(index: (JsType<Int32> | Int32)): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
                System_Collections_IList: Implementation<IList>,
                System_Collections_ICollection: Implementation<ICollection>,
                System_Collections_IEnumerable: Implementation<IEnumerable>,
            };
            /**
             * Gets or sets the element at the specified index.
             * @param index The zero-based index of the element to get or set.
             * @returns The element at the specified index.
             */
            readonly Item: (PropertyGet<(JsType<Int32> | Int32), unknown> & PropertySet<(JsType<Int32> | Int32), any>);
        }
        
        /**
         * Defines a dictionary key/value pair that can be set or retrieved.
         */
        class DictionaryEntry extends Object {
            /**
             * Gets or sets the key in the key/value pair.
             * @returns The key in the key/value pair.
             */
            get Key(): unknown;
            /**
             * Gets or sets the value in the key/value pair.
             * @returns The value in the key/value pair.
             */
            get Value(): unknown;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3998763682: null;
        }
        
        namespace Generic {
            /**
             * Defines methods to manipulate generic collections.
             */
            interface ICollection<T> extends IInterfaceBase, IEnumerable<T>, Collections.IEnumerable {
                /**
                 * Gets the number of elements contained in the {@link System.Collections.Generic.ICollection}.
                 * @returns The number of elements contained in the {@link System.Collections.Generic.ICollection}.
                 */
                get Count(): JsType<Int32>;
                /**
                 * Gets a value indicating whether the {@link System.Collections.Generic.ICollection} is read-only.
                 * @returns true if the {@link System.Collections.Generic.ICollection} is read-only; otherwise, false.
                 */
                get IsReadOnly(): JsType<Boolean>;
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * Adds an item to the {@link System.Collections.Generic.ICollection}.
                 * @param item The object to add to the {@link System.Collections.Generic.ICollection}.
                 */
                Add(item: (JsType<T> | T)): void;
                /**
                 * Removes all items from the {@link System.Collections.Generic.ICollection}.
                 */
                Clear(): void;
                /**
                 * Determines whether the {@link System.Collections.Generic.ICollection} contains a specific value.
                 * @param item The object to locate in the {@link System.Collections.Generic.ICollection}.
                 * @returns true if item is found in the {@link System.Collections.Generic.ICollection}; otherwise, false.
                 */
                Contains(item: (JsType<T> | T)): JsType<Boolean>;
                /**
                 * Removes the first occurrence of a specific object from the {@link System.Collections.Generic.ICollection}.
                 * @param item The object to remove from the {@link System.Collections.Generic.ICollection}.
                 * @returns true if item was successfully removed from the {@link System.Collections.Generic.ICollection}; otherwise, false. This method also returns false if item is not found in the original {@link System.Collections.Generic.ICollection}.
                 */
                Remove(item: (JsType<T> | T)): JsType<Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_ICollection: Implementation<ICollection<T>>,
                    System_Collections_Generic_IEnumerable: Implementation<IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                };
            }
            
            /**
             * Defines a method that a type implements to compare two objects.
             */
            interface IComparer<T> extends IInterfaceBase {
                /**
                 * Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
                 * @param x The first object to compare.
                 * @param y The second object to compare.
                 * @returns A signed integer that indicates the relative values of x and y, as shown in the following table.
                 *   Value
                 * 
                 *   Meaning
                 * 
                 *   Less than zero
                 * 
                 *  x is less than y.
                 * 
                 *   Zero
                 * 
                 *  x equals y.
                 * 
                 *   Greater than zero
                 * 
                 *  x is greater than y.
                 */
                Compare(x: (JsType<T> | T), y: (JsType<T> | T)): JsType<Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IComparer: Implementation<IComparer<T>>,
                };
            }
            
            /**
             * Represents a generic collection of key/value pairs.
             */
            interface IDictionary<TKey, TValue> extends IInterfaceBase, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, Collections.IEnumerable {
                /**
                 * Gets an {@link System.Collections.Generic.ICollection} containing the keys of the {@link System.Collections.Generic.IDictionary}.
                 * @returns An {@link System.Collections.Generic.ICollection} containing the keys of the object that implements {@link System.Collections.Generic.IDictionary}.
                 */
                get Keys(): ICollection<TKey>;
                /**
                 * Gets an {@link System.Collections.Generic.ICollection} containing the values in the {@link System.Collections.Generic.IDictionary}.
                 * @returns An {@link System.Collections.Generic.ICollection} containing the values in the object that implements {@link System.Collections.Generic.IDictionary}.
                 */
                get Values(): ICollection<TValue>;
                [Symbol.iterator](): Iterator<KeyValuePair<TKey, TValue>>;
                /**
                 * Adds an item to the {@link System.Collections.Generic.ICollection}.
                 * @param item The object to add to the {@link System.Collections.Generic.ICollection}.
                 */
                Add(item: KeyValuePair<TKey, TValue>): void;
                /**
                 * Adds an element with the provided key and value to the {@link System.Collections.Generic.IDictionary}.
                 * @param key The object to use as the key of the element to add.
                 * @param value The object to use as the value of the element to add.
                 */
                Add(key: (JsType<TKey> | TKey), value: (JsType<TValue> | TValue)): void;
                /**
                 * Determines whether the {@link System.Collections.Generic.IDictionary} contains an element with the specified key.
                 * @param key The key to locate in the {@link System.Collections.Generic.IDictionary}.
                 * @returns true if the {@link System.Collections.Generic.IDictionary} contains an element with the key; otherwise, false.
                 */
                ContainsKey(key: (JsType<TKey> | TKey)): JsType<Boolean>;
                /**
                 * Removes the first occurrence of a specific object from the {@link System.Collections.Generic.ICollection}.
                 * @param item The object to remove from the {@link System.Collections.Generic.ICollection}.
                 * @returns true if item was successfully removed from the {@link System.Collections.Generic.ICollection}; otherwise, false. This method also returns false if item is not found in the original {@link System.Collections.Generic.ICollection}.
                 */
                Remove(item: KeyValuePair<TKey, TValue>): JsType<Boolean>;
                /**
                 * Removes the element with the specified key from the {@link System.Collections.Generic.IDictionary}.
                 * @param key The key of the element to remove.
                 * @returns true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original {@link System.Collections.Generic.IDictionary}.
                 */
                Remove(key: (JsType<TKey> | TKey)): JsType<Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IDictionary: Implementation<IDictionary<TKey, TValue>>,
                    System_Collections_Generic_ICollection: Implementation<ICollection<KeyValuePair<TKey, TValue>>>,
                    System_Collections_Generic_IEnumerable: Implementation<IEnumerable<KeyValuePair<TKey, TValue>>>,
                    System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                };
                /**
                 * Gets or sets the element with the specified key.
                 * @param key The key of the element to get or set.
                 * @returns The element with the specified key.
                 */
                readonly Item: (PropertyGet<(JsType<TKey> | TKey), JsType<TValue>> & PropertySet<(JsType<TKey> | TKey), (JsType<TValue> | TValue)>);
            }
            
            /**
             * Exposes the enumerator, which supports a simple iteration over a collection of a specified type.
             */
            interface IEnumerable<T> extends IInterfaceBase, Collections.IEnumerable {
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IEnumerable: Implementation<IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                };
            }
            
            /**
             * Supports a simple iteration over a generic collection.
             */
            interface IEnumerator<T> extends IInterfaceBase, Collections.IEnumerator {
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IEnumerator: Implementation<IEnumerator<T>>,
                    System_Collections_IEnumerator: Implementation<Collections.IEnumerator>,
                };
            }
            
            /**
             * Represents a collection of objects that can be individually accessed by index.
             */
            interface IList<T> extends IInterfaceBase, ICollection<T>, IEnumerable<T>, Collections.IEnumerable {
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * Determines the index of a specific item in the {@link System.Collections.Generic.IList}.
                 * @param item The object to locate in the {@link System.Collections.Generic.IList}.
                 * @returns The index of item if found in the list; otherwise, -1.
                 */
                IndexOf(item: (JsType<T> | T)): JsType<Int32>;
                /**
                 * Inserts an item to the {@link System.Collections.Generic.IList} at the specified index.
                 * @param index The zero-based index at which item should be inserted.
                 * @param item The object to insert into the {@link System.Collections.Generic.IList}.
                 */
                Insert(index: (JsType<Int32> | Int32), item: (JsType<T> | T)): void;
                /**
                 * Removes the {@link System.Collections.Generic.IList} item at the specified index.
                 * @param index The zero-based index of the item to remove.
                 */
                RemoveAt(index: (JsType<Int32> | Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IList: Implementation<IList<T>>,
                    System_Collections_Generic_ICollection: Implementation<ICollection<T>>,
                    System_Collections_Generic_IEnumerable: Implementation<IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get or set.
                 * @returns The element at the specified index.
                 */
                readonly Item: (PropertyGet<(JsType<Int32> | Int32), JsType<T>> & PropertySet<(JsType<Int32> | Int32), (JsType<T> | T)>);
            }
            
            /**
             * Represents a strongly-typed, read-only collection of elements.
             */
            interface IReadOnlyCollection<T> extends IInterfaceBase, IEnumerable<T>, Collections.IEnumerable {
                /**
                 * Gets the number of elements in the collection.
                 * @returns The number of elements in the collection.
                 */
                get Count(): JsType<Int32>;
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IReadOnlyCollection: Implementation<IReadOnlyCollection<T>>,
                    System_Collections_Generic_IEnumerable: Implementation<IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                };
            }
            
            /**
             * Represents a read-only collection of elements that can be accessed by index.
             */
            interface IReadOnlyList<T> extends IInterfaceBase, IReadOnlyCollection<T>, IEnumerable<T>, Collections.IEnumerable {
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IReadOnlyList: Implementation<IReadOnlyList<T>>,
                    System_Collections_Generic_IReadOnlyCollection: Implementation<IReadOnlyCollection<T>>,
                    System_Collections_Generic_IEnumerable: Implementation<IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                };
            }
            
            /**
             * Represents a collection of keys and values.
             */
            class Dictionary<TKey, TValue> extends Object implements Explicit<IDictionary<TKey, TValue>>, Explicit<ICollection<KeyValuePair<TKey, TValue>>>, Explicit<IEnumerable<KeyValuePair<TKey, TValue>>>, Explicit<Collections.IEnumerable>, Explicit<Collections.IDictionary>, Explicit<Collections.ICollection>, Explicit<IReadOnlyCollection<KeyValuePair<TKey, TValue>>> {
                /**
                 * Gets the number of key/value pairs contained in the {@link System.Collections.Generic.Dictionary}.
                 * @returns The number of key/value pairs contained in the {@link System.Collections.Generic.Dictionary}.
                 */
                get Count(): JsType<Int32>;
                /**
                 * Gets a collection containing the keys in the {@link System.Collections.Generic.Dictionary}.
                 * @returns A {@link System.Collections.Generic.Dictionary.KeyCollection} containing the keys in the {@link System.Collections.Generic.Dictionary}.
                 */
                get Keys(): Dictionary.KeyCollection<TKey, TValue>;
                /**
                 * Gets a collection containing the values in the {@link System.Collections.Generic.Dictionary}.
                 * @returns A {@link System.Collections.Generic.Dictionary.ValueCollection} containing the values in the {@link System.Collections.Generic.Dictionary}.
                 */
                get Values(): Dictionary.ValueCollection<TKey, TValue>;
                /**
                 * Initializes a new instance of the {@link System.Collections.Generic.Dictionary} class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.
                 * @param typeTKey - @@Generic type argument
                 * @param typeTValue - @@Generic type argument
                 */
                constructor(typeTKey: TypeRefParam<TKey>, typeTValue: TypeRefParam<TValue>);
                [Symbol.iterator](): Iterator<KeyValuePair<TKey, TValue>>;
                /**
                 * Adds the specified key and value to the dictionary.
                 * @param key The key of the element to add.
                 * @param value The value of the element to add. The value can be null for reference types.
                 */
                Add(key: (JsType<TKey> | TKey), value: (JsType<TValue> | TValue)): void;
                /**
                 * Removes all keys and values from the {@link System.Collections.Generic.Dictionary}.
                 */
                Clear(): void;
                /**
                 * Determines whether the {@link System.Collections.Generic.Dictionary} contains the specified key.
                 * @param key The key to locate in the {@link System.Collections.Generic.Dictionary}.
                 * @returns true if the {@link System.Collections.Generic.Dictionary} contains an element with the specified key; otherwise, false.
                 */
                ContainsKey(key: (JsType<TKey> | TKey)): JsType<Boolean>;
                /**
                 * Removes the value with the specified key from the {@link System.Collections.Generic.Dictionary}.
                 * @param key The key of the element to remove.
                 * @returns true if the element is successfully found and removed; otherwise, false.  This method returns false if key is not found in the {@link System.Collections.Generic.Dictionary}.
                 */
                Remove(key: (JsType<TKey> | TKey)): JsType<Boolean>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IDictionary: Implementation<IDictionary<TKey, TValue>>,
                    System_Collections_Generic_ICollection: Implementation<ICollection<KeyValuePair<TKey, TValue>>>,
                    System_Collections_Generic_IEnumerable: Implementation<IEnumerable<KeyValuePair<TKey, TValue>>>,
                    System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                    System_Collections_IDictionary: Implementation<Collections.IDictionary>,
                    System_Collections_ICollection: Implementation<Collections.ICollection>,
                    System_Collections_Generic_IReadOnlyCollection: Implementation<IReadOnlyCollection<KeyValuePair<TKey, TValue>>>,
                };
                /**
                 * Gets or sets the value associated with the specified key.
                 * @param key The key of the value to get or set.
                 * @returns The value associated with the specified key. If the specified key is not found, a get operation throws a {@link System.Collections.Generic.KeyNotFoundException}, and a set operation creates a new element with the specified key.
                 */
                readonly Item: (PropertyGet<(JsType<TKey> | TKey), JsType<TValue>> & PropertySet<(JsType<TKey> | TKey), (JsType<TValue> | TValue)>);
                private __type_2370601497: null;
            }
            
            /**
             * Defines a key/value pair that can be set or retrieved.
             */
            class KeyValuePair<TKey, TValue> extends Object {
                /**
                 * Gets the key in the key/value pair.
                 * @returns A TKey that is the key of the {@link System.Collections.Generic.KeyValuePair}.
                 */
                get Key(): JsType<TKey>;
                /**
                 * Gets the value in the key/value pair.
                 * @returns A TValue that is the value of the {@link System.Collections.Generic.KeyValuePair}.
                 */
                get Value(): JsType<TValue>;
                /**
                 * Initializes a new instance of the {@link System.Collections.Generic.KeyValuePair} structure with the specified key and value.
                 * @param key The object defined in each key/value pair.
                 * @param value The definition associated with key.
                 * @param typeTKey - @@Generic type argument
                 * @param typeTValue - @@Generic type argument
                 */
                constructor(typeTKey: TypeRefParam<TKey>, typeTValue: TypeRefParam<TValue>, key: (JsType<TKey> | TKey), value: (JsType<TValue> | TValue));
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                };
                private __type_2055734651: null;
            }
            
            /**
             * Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.
             */
            class List<T> extends Object implements Explicit<IList<T>>, Explicit<ICollection<T>>, Explicit<IEnumerable<T>>, Explicit<Collections.IEnumerable>, Explicit<Collections.IList>, Explicit<Collections.ICollection>, Explicit<IReadOnlyList<T>>, Explicit<IReadOnlyCollection<T>> {
                /**
                 * Gets the number of elements contained in the {@link System.Collections.Generic.List}.
                 * @returns The number of elements contained in the {@link System.Collections.Generic.List}.
                 */
                get Count(): JsType<Int32>;
                /**
                 * Initializes a new instance of the {@link System.Collections.Generic.List} class that is empty and has the default initial capacity.
                 * @param typeT - @@Generic type argument
                 */
                constructor(typeT: TypeRefParam<T>);
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * Adds an object to the end of the {@link System.Collections.Generic.List}.
                 * @param item The object to be added to the end of the {@link System.Collections.Generic.List}. The value can be null for reference types.
                 */
                Add(item: (JsType<T> | T)): void;
                /**
                 * Removes all elements from the {@link System.Collections.Generic.List}.
                 */
                Clear(): void;
                /**
                 * Determines whether an element is in the {@link System.Collections.Generic.List}.
                 * @param item The object to locate in the {@link System.Collections.Generic.List}. The value can be null for reference types.
                 * @returns true if item is found in the {@link System.Collections.Generic.List}; otherwise, false.
                 */
                Contains(item: (JsType<T> | T)): JsType<Boolean>;
                /**
                 * Searches for the specified object and returns the zero-based index of the first occurrence within the entire {@link System.Collections.Generic.List}.
                 * @param item The object to locate in the {@link System.Collections.Generic.List}. The value can be null for reference types.
                 * @returns The zero-based index of the first occurrence of item within the entire {@link System.Collections.Generic.List}, if found; otherwise, -1.
                 */
                IndexOf(item: (JsType<T> | T)): JsType<Int32>;
                /**
                 * Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the {@link System.Collections.Generic.List} that extends from the specified index to the last element.
                 * @param item The object to locate in the {@link System.Collections.Generic.List}. The value can be null for reference types.
                 * @param index The zero-based starting index of the search. 0 (zero) is valid in an empty list.
                 * @returns The zero-based index of the first occurrence of item within the range of elements in the {@link System.Collections.Generic.List} that extends from index to the last element, if found; otherwise, -1.
                 */
                IndexOf(item: (JsType<T> | T), index: (JsType<Int32> | Int32)): JsType<Int32>;
                /**
                 * Inserts an element into the {@link System.Collections.Generic.List} at the specified index.
                 * @param index The zero-based index at which item should be inserted.
                 * @param item The object to insert. The value can be null for reference types.
                 */
                Insert(index: (JsType<Int32> | Int32), item: (JsType<T> | T)): void;
                /**
                 * Removes the first occurrence of a specific object from the {@link System.Collections.Generic.List}.
                 * @param item The object to remove from the {@link System.Collections.Generic.List}. The value can be null for reference types.
                 * @returns true if item is successfully removed; otherwise, false.  This method also returns false if item was not found in the {@link System.Collections.Generic.List}.
                 */
                Remove(item: (JsType<T> | T)): JsType<Boolean>;
                /**
                 * Removes the element at the specified index of the {@link System.Collections.Generic.List}.
                 * @param index The zero-based index of the element to remove.
                 */
                RemoveAt(index: (JsType<Int32> | Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IList: Implementation<IList<T>>,
                    System_Collections_Generic_ICollection: Implementation<ICollection<T>>,
                    System_Collections_Generic_IEnumerable: Implementation<IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                    System_Collections_IList: Implementation<Collections.IList>,
                    System_Collections_ICollection: Implementation<Collections.ICollection>,
                    System_Collections_Generic_IReadOnlyList: Implementation<IReadOnlyList<T>>,
                    System_Collections_Generic_IReadOnlyCollection: Implementation<IReadOnlyCollection<T>>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get or set.
                 * @returns The element at the specified index.
                 */
                readonly Item: (PropertyGet<(JsType<Int32> | Int32), JsType<T>> & PropertySet<(JsType<Int32> | Int32), (JsType<T> | T)>);
                private __type_656181459: null;
            }
            
            namespace Dictionary {
                /**
                 * Represents the collection of keys in a {@link System.Collections.Generic.Dictionary}. This class cannot be inherited.
                 */
                class KeyCollection<TKey, TValue> extends Object implements Explicit<ICollection<TKey>>, Explicit<IEnumerable<TKey>>, Explicit<Collections.IEnumerable>, Explicit<Collections.ICollection>, Explicit<IReadOnlyCollection<TKey>> {
                    /**
                     * Gets the number of elements contained in the {@link System.Collections.Generic.Dictionary.KeyCollection}.
                     * @returns The number of elements contained in the {@link System.Collections.Generic.Dictionary.KeyCollection}.
                     *  Retrieving the value of this property is an O(1) operation.
                     */
                    get Count(): JsType<Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<JsType<TKey>>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_Collections_Generic_ICollection: Implementation<ICollection<TKey>>,
                        System_Collections_Generic_IEnumerable: Implementation<IEnumerable<TKey>>,
                        System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                        System_Collections_ICollection: Implementation<Collections.ICollection>,
                        System_Collections_Generic_IReadOnlyCollection: Implementation<IReadOnlyCollection<TKey>>,
                    };
                    private __type_955500544: null;
                }
                
                /**
                 * Represents the collection of values in a {@link System.Collections.Generic.Dictionary}. This class cannot be inherited.
                 */
                class ValueCollection<TKey, TValue> extends Object implements Explicit<ICollection<TValue>>, Explicit<IEnumerable<TValue>>, Explicit<Collections.IEnumerable>, Explicit<Collections.ICollection>, Explicit<IReadOnlyCollection<TValue>> {
                    /**
                     * Gets the number of elements contained in the {@link System.Collections.Generic.Dictionary.ValueCollection}.
                     * @returns The number of elements contained in the {@link System.Collections.Generic.Dictionary.ValueCollection}.
                     */
                    get Count(): JsType<Int32>;
                    /**
                     * @ignore
                     * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                     */
                    constructor();
                    [Symbol.iterator](): Iterator<JsType<TValue>>;
                    /**
                     * @ignore
                     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                     */
                    _interfaces: {
                        System_Collections_Generic_ICollection: Implementation<ICollection<TValue>>,
                        System_Collections_Generic_IEnumerable: Implementation<IEnumerable<TValue>>,
                        System_Collections_IEnumerable: Implementation<Collections.IEnumerable>,
                        System_Collections_ICollection: Implementation<Collections.ICollection>,
                        System_Collections_Generic_IReadOnlyCollection: Implementation<IReadOnlyCollection<TValue>>,
                    };
                    private __type_2877290526: null;
                }
            }
            
            /**
             * @@Type reference for casting to class {@link System.Collections.Generic.Dictionary}.
             * @param typeTKey - @@Generic type argument
             * @param typeTValue - @@Generic type argument
             */
            function Dictionary<TKey, TValue>(typeTKey: TypeRefParam<TKey>, typeTValue: TypeRefParam<TValue>): TypeRef<Dictionary<TKey, TValue>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.ICollection}.
             * @param typeT - @@Generic type argument
             */
            function ICollection<T>(typeT: TypeRefParam<T>): TypeRef<ICollection<T>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.IComparer}.
             * @param typeT - @@Generic type argument
             */
            function IComparer<T>(typeT: TypeRefParam<T>): TypeRef<IComparer<T>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.IDictionary}.
             * @param typeTKey - @@Generic type argument
             * @param typeTValue - @@Generic type argument
             */
            function IDictionary<TKey, TValue>(typeTKey: TypeRefParam<TKey>, typeTValue: TypeRefParam<TValue>): TypeRef<IDictionary<TKey, TValue>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.IEnumerable}.
             * @param typeT - @@Generic type argument
             */
            function IEnumerable<T>(typeT: TypeRefParam<T>): TypeRef<IEnumerable<T>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.IEnumerator}.
             * @param typeT - @@Generic type argument
             */
            function IEnumerator<T>(typeT: TypeRefParam<T>): TypeRef<IEnumerator<T>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.IList}.
             * @param typeT - @@Generic type argument
             */
            function IList<T>(typeT: TypeRefParam<T>): TypeRef<IList<T>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.IReadOnlyCollection}.
             * @param typeT - @@Generic type argument
             */
            function IReadOnlyCollection<T>(typeT: TypeRefParam<T>): TypeRef<IReadOnlyCollection<T>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.IReadOnlyList}.
             * @param typeT - @@Generic type argument
             */
            function IReadOnlyList<T>(typeT: TypeRefParam<T>): TypeRef<IReadOnlyList<T>>;
            
            /**
             * @@Type reference for casting to class {@link System.Collections.Generic.Dictionary}.
             * @param typeTKey - @@Generic type argument
             * @param typeTValue - @@Generic type argument
             */
            function KeyCollection<TKey, TValue>(typeTKey: TypeRefParam<TKey>, typeTValue: TypeRefParam<TValue>): TypeRef<Dictionary.KeyCollection<TKey, TValue>>;
            
            /**
             * @@Type reference for casting to interface {@link System.Collections.Generic.KeyValuePair}.
             * @param typeTKey - @@Generic type argument
             * @param typeTValue - @@Generic type argument
             */
            function KeyValuePair<TKey, TValue>(typeTKey: TypeRefParam<TKey>, typeTValue: TypeRefParam<TValue>): TypeRef<KeyValuePair<TKey, TValue>>;
            
            /**
             * @@Type reference for casting to class {@link System.Collections.Generic.List}.
             * @param typeT - @@Generic type argument
             */
            function List<T>(typeT: TypeRefParam<T>): TypeRef<List<T>>;
            
            /**
             * @@Type reference for casting to class {@link System.Collections.Generic.Dictionary}.
             * @param typeTKey - @@Generic type argument
             * @param typeTValue - @@Generic type argument
             */
            function ValueCollection<TKey, TValue>(typeTKey: TypeRefParam<TKey>, typeTValue: TypeRefParam<TValue>): TypeRef<Dictionary.ValueCollection<TKey, TValue>>;
        }
        
        namespace ObjectModel {
            /**
             * Provides the base class for a generic collection.
             */
            class Collection<T> extends Object implements Explicit<Generic.IList<T>>, Explicit<Generic.ICollection<T>>, Explicit<Generic.IEnumerable<T>>, Explicit<IEnumerable>, Explicit<IList>, Explicit<ICollection>, Explicit<Generic.IReadOnlyList<T>>, Explicit<Generic.IReadOnlyCollection<T>> {
                /**
                 * Gets the number of elements actually contained in the {@link System.Collections.ObjectModel.Collection}.
                 * @returns The number of elements actually contained in the {@link System.Collections.ObjectModel.Collection}.
                 */
                get Count(): JsType<Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * Adds an object to the end of the {@link System.Collections.ObjectModel.Collection}.
                 * @param item The object to be added to the end of the {@link System.Collections.ObjectModel.Collection}. The value can be null for reference types.
                 */
                Add(item: (JsType<T> | T)): void;
                /**
                 * Removes all elements from the {@link System.Collections.ObjectModel.Collection}.
                 */
                Clear(): void;
                /**
                 * Determines whether an element is in the {@link System.Collections.ObjectModel.Collection}.
                 * @param item The object to locate in the {@link System.Collections.ObjectModel.Collection}. The value can be null for reference types.
                 * @returns true if item is found in the {@link System.Collections.ObjectModel.Collection}; otherwise, false.
                 */
                Contains(item: (JsType<T> | T)): JsType<Boolean>;
                /**
                 * Searches for the specified object and returns the zero-based index of the first occurrence within the entire {@link System.Collections.ObjectModel.Collection}.
                 * @param item The object to locate in the {@link System.Collections.Generic.List}. The value can be null for reference types.
                 * @returns The zero-based index of the first occurrence of item within the entire {@link System.Collections.ObjectModel.Collection}, if found; otherwise, -1.
                 */
                IndexOf(item: (JsType<T> | T)): JsType<Int32>;
                /**
                 * Inserts an element into the {@link System.Collections.ObjectModel.Collection} at the specified index.
                 * @param index The zero-based index at which item should be inserted.
                 * @param item The object to insert. The value can be null for reference types.
                 */
                Insert(index: (JsType<Int32> | Int32), item: (JsType<T> | T)): void;
                /**
                 * Removes the first occurrence of a specific object from the {@link System.Collections.ObjectModel.Collection}.
                 * @param item The object to remove from the {@link System.Collections.ObjectModel.Collection}. The value can be null for reference types.
                 * @returns true if item is successfully removed; otherwise, false.  This method also returns false if item was not found in the original {@link System.Collections.ObjectModel.Collection}.
                 */
                Remove(item: (JsType<T> | T)): JsType<Boolean>;
                /**
                 * Removes the element at the specified index of the {@link System.Collections.ObjectModel.Collection}.
                 * @param index The zero-based index of the element to remove.
                 */
                RemoveAt(index: (JsType<Int32> | Int32)): void;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IList: Implementation<Generic.IList<T>>,
                    System_Collections_Generic_ICollection: Implementation<Generic.ICollection<T>>,
                    System_Collections_Generic_IEnumerable: Implementation<Generic.IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<IEnumerable>,
                    System_Collections_IList: Implementation<IList>,
                    System_Collections_ICollection: Implementation<ICollection>,
                    System_Collections_Generic_IReadOnlyList: Implementation<Generic.IReadOnlyList<T>>,
                    System_Collections_Generic_IReadOnlyCollection: Implementation<Generic.IReadOnlyCollection<T>>,
                };
                /**
                 * Gets or sets the element at the specified index.
                 * @param index The zero-based index of the element to get or set.
                 * @returns The element at the specified index.
                 */
                readonly Item: (PropertyGet<(JsType<Int32> | Int32), JsType<T>> & PropertySet<(JsType<Int32> | Int32), (JsType<T> | T)>);
                private __type_2107327862: null;
            }
            
            /**
             * Provides the base class for a generic read-only collection.
             */
            class ReadOnlyCollection<T> extends Object implements Explicit<Generic.IList<T>>, Explicit<Generic.ICollection<T>>, Explicit<Generic.IEnumerable<T>>, Explicit<IEnumerable>, Explicit<IList>, Explicit<ICollection>, Explicit<Generic.IReadOnlyList<T>>, Explicit<Generic.IReadOnlyCollection<T>> {
                /**
                 * Gets the number of elements contained in the {@link System.Collections.ObjectModel.ReadOnlyCollection} instance.
                 * @returns The number of elements contained in the {@link System.Collections.ObjectModel.ReadOnlyCollection} instance.
                 */
                get Count(): JsType<Int32>;
                /**
                 * @ignore
                 * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
                 */
                constructor();
                [Symbol.iterator](): Iterator<JsType<T>>;
                /**
                 * @ignore
                 * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
                 */
                _interfaces: {
                    System_Collections_Generic_IList: Implementation<Generic.IList<T>>,
                    System_Collections_Generic_ICollection: Implementation<Generic.ICollection<T>>,
                    System_Collections_Generic_IEnumerable: Implementation<Generic.IEnumerable<T>>,
                    System_Collections_IEnumerable: Implementation<IEnumerable>,
                    System_Collections_IList: Implementation<IList>,
                    System_Collections_ICollection: Implementation<ICollection>,
                    System_Collections_Generic_IReadOnlyList: Implementation<Generic.IReadOnlyList<T>>,
                    System_Collections_Generic_IReadOnlyCollection: Implementation<Generic.IReadOnlyCollection<T>>,
                };
                /**
                 * Gets the element at the specified index.
                 * @param index The zero-based index of the element to get.
                 * @returns The element at the specified index.
                 */
                readonly Item: PropertyGet<(JsType<Int32> | Int32), JsType<T>>;
                private __type_1904904568: null;
            }
            
            /**
             * @@Type reference for casting to class {@link System.Collections.ObjectModel.Collection}.
             * @param typeT - @@Generic type argument
             */
            function Collection<T>(typeT: TypeRefParam<T>): TypeRef<Collection<T>>;
            
            /**
             * @@Type reference for casting to class {@link System.Collections.ObjectModel.ReadOnlyCollection}.
             * @param typeT - @@Generic type argument
             */
            function ReadOnlyCollection<T>(typeT: TypeRefParam<T>): TypeRef<ReadOnlyCollection<T>>;
        }
    }
    
    namespace Drawing {
        /**
         * Represents an ARGB (alpha, red, green, blue) color.
         */
        class Color extends Object {
            /**
             * Gets the alpha component value of this {@link System.Drawing.Color} structure.
             * @returns The alpha component value of this {@link System.Drawing.Color}.
             */
            get A(): JsType<Byte>;
            /**
             * Gets the blue component value of this {@link System.Drawing.Color} structure.
             * @returns The blue component value of this {@link System.Drawing.Color}.
             */
            get B(): JsType<Byte>;
            /**
             * Gets the green component value of this {@link System.Drawing.Color} structure.
             * @returns The green component value of this {@link System.Drawing.Color}.
             */
            get G(): JsType<Byte>;
            /**
             * Gets the red component value of this {@link System.Drawing.Color} structure.
             * @returns The red component value of this {@link System.Drawing.Color}.
             */
            get R(): JsType<Byte>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Creates a {@link System.Drawing.Color} structure from the specified 8-bit color values (red, green, and blue). The alpha value is implicitly 255 (fully opaque). Although this method allows a 32-bit value to be passed for each color component, the value of each component is limited to 8 bits.
             * @param red The red component value for the new {@link System.Drawing.Color}. Valid values are 0 through 255.
             * @param green The green component value for the new {@link System.Drawing.Color}. Valid values are 0 through 255.
             * @param blue The blue component value for the new {@link System.Drawing.Color}. Valid values are 0 through 255.
             * @returns The {@link System.Drawing.Color} that this method creates.
             */
            static FromArgb(red: (JsType<Int32> | Int32), green: (JsType<Int32> | Int32), blue: (JsType<Int32> | Int32)): JsType<Color>;
            /**
             * Creates a {@link System.Drawing.Color} structure from the four ARGB component (alpha, red, green, and blue) values. Although this method allows a 32-bit value to be passed for each component, the value of each component is limited to 8 bits.
             * @param alpha The alpha component. Valid values are 0 through 255.
             * @param red The red component. Valid values are 0 through 255.
             * @param green The green component. Valid values are 0 through 255.
             * @param blue The blue component. Valid values are 0 through 255.
             * @returns The {@link System.Drawing.Color} that this method creates.
             */
            static FromArgb(alpha: (JsType<Int32> | Int32), red: (JsType<Int32> | Int32), green: (JsType<Int32> | Int32), blue: (JsType<Int32> | Int32)): JsType<Color>;
            /**
             * Gets the hue-saturation-lightness (HSL) lightness value for this {@link System.Drawing.Color} structure.
             * @returns The lightness of this {@link System.Drawing.Color}. The lightness ranges from 0.0 through 1.0, where 0.0 represents black and 1.0 represents white.
             */
            GetBrightness(): JsType<Single>;
            /**
             * Gets the hue-saturation-lightness (HSL) hue value, in degrees, for this {@link System.Drawing.Color} structure.
             * @returns The hue, in degrees, of this {@link System.Drawing.Color}. The hue is measured in degrees, ranging from 0.0 through 360.0, in HSL color space.
             */
            GetHue(): JsType<Single>;
            /**
             * Gets the hue-saturation-lightness (HSL) saturation value for this {@link System.Drawing.Color} structure.
             * @returns The saturation of this {@link System.Drawing.Color}. The saturation ranges from 0.0 through 1.0, where 0.0 is grayscale and 1.0 is the most saturated.
             */
            GetSaturation(): JsType<Single>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_329475914: null;
        }
        
        /**
         * Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
         */
        class Point extends Object {
            /**
             * Gets a value indicating whether this {@link System.Drawing.Point} is empty.
             * @returns true if both {@link System.Drawing.Point.X} and {@link System.Drawing.Point.Y} are 0; otherwise, false.
             */
            get IsEmpty(): JsType<Boolean>;
            /**
             * Gets or sets the x-coordinate of this {@link System.Drawing.Point}.
             * @returns The x-coordinate of this {@link System.Drawing.Point}.
             */
            get X(): JsType<Int32>;
            set X(value: JsType<Int32>);
            /**
             * Gets or sets the y-coordinate of this {@link System.Drawing.Point}.
             * @returns The y-coordinate of this {@link System.Drawing.Point}.
             */
            get Y(): JsType<Int32>;
            set Y(value: JsType<Int32>);
            /**
             * Initializes a new instance of the {@link System.Drawing.Point} class from a {@link System.Drawing.Size}.
             * @param sz A {@link System.Drawing.Size} that specifies the coordinates for the new {@link System.Drawing.Point}.
             */
            constructor(sz: (JsType<Size> | Size));
            /**
             * Initializes a new instance of the {@link System.Drawing.Point} class with the specified coordinates.
             * @param x The horizontal position of the point.
             * @param y The vertical position of the point.
             */
            constructor(x: (JsType<Int32> | Int32), y: (JsType<Int32> | Int32));
            /**
             * Translates this {@link System.Drawing.Point} by the specified {@link System.Drawing.Point}.
             * @param p The {@link System.Drawing.Point} used offset this {@link System.Drawing.Point}.
             */
            Offset(p: (JsType<Point> | Point)): void;
            /**
             * Translates this {@link System.Drawing.Point} by the specified amount.
             * @param dx The amount to offset the x-coordinate.
             * @param dy The amount to offset the y-coordinate.
             */
            Offset(dx: (JsType<Int32> | Int32), dy: (JsType<Int32> | Int32)): void;
            /** Represents a {@link System.Drawing.Point} that has {@link System.Drawing.Point.X} and {@link System.Drawing.Point.Y} values set to zero. */
            static readonly Empty: Point;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3132333017: null;
        }
        
        /**
         * Represents an ordered pair of floating-point x- and y-coordinates that defines a point in a two-dimensional plane.
         */
        class PointF extends Object {
            /**
             * Gets a value indicating whether this {@link System.Drawing.PointF} is empty.
             * @returns true if both {@link System.Drawing.PointF.X} and {@link System.Drawing.PointF.Y} are 0; otherwise, false.
             */
            get IsEmpty(): JsType<Boolean>;
            /**
             * Gets or sets the x-coordinate of this {@link System.Drawing.PointF}.
             * @returns The x-coordinate of this {@link System.Drawing.PointF}.
             */
            get X(): JsType<Single>;
            set X(value: JsType<Single>);
            /**
             * Gets or sets the y-coordinate of this {@link System.Drawing.PointF}.
             * @returns The y-coordinate of this {@link System.Drawing.PointF}.
             */
            get Y(): JsType<Single>;
            set Y(value: JsType<Single>);
            /**
             * Initializes a new instance of the {@link System.Drawing.PointF} class with the specified coordinates.
             * @param x The horizontal position of the point.
             * @param y The vertical position of the point.
             */
            constructor(x: (JsType<Single> | Single), y: (JsType<Single> | Single));
            /** Represents a new instance of the {@link System.Drawing.PointF} class with member data left uninitialized. */
            static readonly Empty: PointF;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1808328027: null;
        }
        
        /**
         * Stores a set of four integers that represent the location and size of a rectangle
         */
        class Rectangle extends Object {
            /**
             * Gets the y-coordinate that is the sum of the {@link System.Drawing.Rectangle.Y} and {@link System.Drawing.Rectangle.Height} property values of this {@link System.Drawing.Rectangle} structure.
             * @returns The y-coordinate that is the sum of {@link System.Drawing.Rectangle.Y} and {@link System.Drawing.Rectangle.Height} of this {@link System.Drawing.Rectangle}.
             */
            get Bottom(): JsType<Int32>;
            /**
             * Gets or sets the height of this {@link System.Drawing.Rectangle} structure.
             * @returns The height of this {@link System.Drawing.Rectangle} structure. The default is 0.
             */
            get Height(): JsType<Int32>;
            /**
             * Gets the x-coordinate of the left edge of this {@link System.Drawing.Rectangle} structure.
             * @returns The x-coordinate of the left edge of this {@link System.Drawing.Rectangle} structure.
             */
            get Left(): JsType<Int32>;
            /**
             * Gets the x-coordinate that is the sum of {@link System.Drawing.Rectangle.X} and {@link System.Drawing.Rectangle.Width} property values of this {@link System.Drawing.Rectangle} structure.
             * @returns The x-coordinate that is the sum of {@link System.Drawing.Rectangle.X} and {@link System.Drawing.Rectangle.Width} of this {@link System.Drawing.Rectangle}.
             */
            get Right(): JsType<Int32>;
            /**
             * Gets the y-coordinate of the top edge of this {@link System.Drawing.Rectangle} structure.
             * @returns The y-coordinate of the top edge of this {@link System.Drawing.Rectangle} structure.
             */
            get Top(): JsType<Int32>;
            /**
             * Gets or sets the width of this {@link System.Drawing.Rectangle} structure.
             * @returns The width of this {@link System.Drawing.Rectangle} structure. The default is 0.
             */
            get Width(): JsType<Int32>;
            /**
             * Gets or sets the x-coordinate of the upper-left corner of this {@link System.Drawing.Rectangle} structure.
             * @returns The x-coordinate of the upper-left corner of this {@link System.Drawing.Rectangle} structure. The default is 0.
             */
            get X(): JsType<Int32>;
            /**
             * Gets or sets the y-coordinate of the upper-left corner of this {@link System.Drawing.Rectangle} structure.
             * @returns The y-coordinate of the upper-left corner of this {@link System.Drawing.Rectangle} structure. The default is 0.
             */
            get Y(): JsType<Int32>;
            /**
             * Initializes a new instance of the {@link System.Drawing.Rectangle} class with the specified location and size.
             * @param x The x-coordinate of the upper-left corner of the rectangle.
             * @param y The y-coordinate of the upper-left corner of the rectangle.
             * @param width The width of the rectangle.
             * @param height The height of the rectangle.
             */
            constructor(x: (JsType<Int32> | Int32), y: (JsType<Int32> | Int32), width: (JsType<Int32> | Int32), height: (JsType<Int32> | Int32));
            /**
             * Determines if the rectangular region represented by rect is entirely contained within this {@link System.Drawing.Rectangle} structure.
             * @param rect The {@link System.Drawing.Rectangle} to test.
             * @returns This method returns true if the rectangular region represented by rect is entirely contained within this {@link System.Drawing.Rectangle} structure; otherwise false.
             */
            Contains(rect: (JsType<Rectangle> | Rectangle)): JsType<Boolean>;
            /**
             * Determines if the specified point is contained within this {@link System.Drawing.Rectangle} structure.
             * @param x The x-coordinate of the point to test.
             * @param y The y-coordinate of the point to test.
             * @returns This method returns true if the point defined by x and y is contained within this {@link System.Drawing.Rectangle} structure; otherwise false.
             */
            Contains(x: (JsType<Int32> | Int32), y: (JsType<Int32> | Int32)): JsType<Boolean>;
            /**
             * Enlarges this {@link System.Drawing.Rectangle} by the specified amount.
             * @param width The amount to inflate this {@link System.Drawing.Rectangle} horizontally.
             * @param height The amount to inflate this {@link System.Drawing.Rectangle} vertically.
             */
            Inflate(width: (JsType<Int32> | Int32), height: (JsType<Int32> | Int32)): void;
            /**
             * Replaces this {@link System.Drawing.Rectangle} with the intersection of itself and the specified {@link System.Drawing.Rectangle}.
             * @param rect The {@link System.Drawing.Rectangle} with which to intersect.
             */
            Intersect(rect: (JsType<Rectangle> | Rectangle)): void;
            /**
             * Determines if this rectangle intersects with rect.
             * @param rect The rectangle to test.
             * @returns This method returns true if there is any intersection, otherwise false.
             */
            IntersectsWith(rect: (JsType<Rectangle> | Rectangle)): JsType<Boolean>;
            /**
             * Adjusts the location of this rectangle by the specified amount.
             * @param x The horizontal offset.
             * @param y The vertical offset.
             */
            Offset(x: (JsType<Int32> | Int32), y: (JsType<Int32> | Int32)): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1990948900: null;
        }
        
        /**
         * Stores an ordered pair of integers, which specify a {@link System.Drawing.Size.Height} and {@link System.Drawing.Size.Width}.
         */
        class Size extends Object {
            /**
             * Initializes a new instance of the {@link System.Drawing.Size} structure from the specified dimensions.
             * @param width The width component of the new {@link System.Drawing.Size}.
             * @param height The height component of the new {@link System.Drawing.Size}.
             */
            constructor(width: (JsType<Int32> | Int32), height: (JsType<Int32> | Int32));
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1332070666: null;
        }
    }
    
    namespace Globalization {
        /**
         * Defines the formatting options that customize string parsing for some date and time parsing methods.
         */
        class DateTimeStyles extends Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** Date and time are returned as a Coordinated Universal Time (UTC). If the input string denotes a local time, through a time zone specifier or {@link System.Globalization.DateTimeStyles.AssumeLocal}, the date and time are converted from the local time to UTC. If the input string denotes a UTC time, through a time zone specifier or {@link System.Globalization.DateTimeStyles.AssumeUniversal}, no conversion occurs. If the input string does not denote a local or UTC time, no conversion occurs and the resulting {@link System.DateTime.Kind} property is {@link System.DateTimeKind.Unspecified}. */
            static readonly AdjustToUniversal: DateTimeStyles;
            /** Extra white-space characters in the middle of the string must be ignored during parsing, except if they occur in the {@link System.Globalization.DateTimeFormatInfo} format patterns. */
            static readonly AllowInnerWhite: DateTimeStyles;
            /** Leading white-space characters must be ignored during parsing, except if they occur in the {@link System.Globalization.DateTimeFormatInfo} format patterns. */
            static readonly AllowLeadingWhite: DateTimeStyles;
            /** Trailing white-space characters must be ignored during parsing, except if they occur in the {@link System.Globalization.DateTimeFormatInfo} format patterns. */
            static readonly AllowTrailingWhite: DateTimeStyles;
            /** Extra white-space characters anywhere in the string must be ignored during parsing, except if they occur in the {@link System.Globalization.DateTimeFormatInfo} format patterns. This value is a combination of the {@link System.Globalization.DateTimeStyles.AllowLeadingWhite}, {@link System.Globalization.DateTimeStyles.AllowTrailingWhite}, and {@link System.Globalization.DateTimeStyles.AllowInnerWhite} values. */
            static readonly AllowWhiteSpaces: DateTimeStyles;
            /** If no time zone is specified in the parsed string, the string is assumed to denote a local time. */
            static readonly AssumeLocal: DateTimeStyles;
            /** If no time zone is specified in the parsed string, the string is assumed to denote a UTC. */
            static readonly AssumeUniversal: DateTimeStyles;
            /** If the parsed string contains only the time and not the date, the parsing methods assume the Gregorian date with year = 1, month = 1, and day = 1. If this value is not used, the current date is assumed. */
            static readonly NoCurrentDateDefault: DateTimeStyles;
            /** Default formatting options must be used. This value represents the default style for the {@link System.DateTime.Parse|Parse(s)}, {@link System.DateTime.ParseExact|ParseExact(s, format, provider)}, and {@link System.DateTime.TryParse|TryParse(s, result)} methods. */
            static readonly None: DateTimeStyles;
            /** The {@link System.DateTimeKind} field of a date is preserved when a {@link System.DateTime} object is converted to a string using the "o" or "r" standard format specifier, and the string is then converted back to a {@link System.DateTime} object. */
            static readonly RoundtripKind: DateTimeStyles;
            private __type_4054667385: null;
        }
        
        /**
         * Determines the styles permitted in numeric string arguments that are passed to the Parse and TryParse methods of the integral and floating-point numeric types.
         */
        class NumberStyles extends Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** Indicates that the numeric string can contain a currency symbol. Valid currency symbols are determined by the {@link System.Globalization.NumberFormatInfo.CurrencySymbol} property. */
            static readonly AllowCurrencySymbol: NumberStyles;
            /** Indicates that the numeric string can have a decimal point. If the {@link System.Globalization.NumberStyles} value includes the {@link System.Globalization.NumberStyles.AllowCurrencySymbol} flag and the parsed string includes a currency symbol, the decimal separator character is determined by the {@link System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator} property. Otherwise, the decimal separator character is determined by the {@link System.Globalization.NumberFormatInfo.NumberDecimalSeparator} property. */
            static readonly AllowDecimalPoint: NumberStyles;
            /** Indicates that the numeric string can be in exponential notation. The {@link System.Globalization.NumberStyles.AllowExponent} flag allows the parsed string to contain an exponent that begins with the "E" or "e" character and that is followed by an optional positive or negative sign and an integer. In other words, it successfully parses strings in the form nnnExx, nnnE+xx, and nnnE-xx. It does not allow a decimal separator or sign in the significand or mantissa; to allow these elements in the string to be parsed, use the {@link System.Globalization.NumberStyles.AllowDecimalPoint} and {@link System.Globalization.NumberStyles.AllowLeadingSign} flags, or use a composite style that includes these individual flags. */
            static readonly AllowExponent: NumberStyles;
            /** Indicates that the numeric string represents a hexadecimal value. Valid hexadecimal values include the numeric digits 0-9 and the hexadecimal digits A-F and a-f. Strings that are parsed using this style cannot be prefixed with "0x" or "&amp;h". A string that is parsed with the {@link System.Globalization.NumberStyles.AllowHexSpecifier} style will always be interpreted as a hexadecimal value. The only flags that can be combined with {@link System.Globalization.NumberStyles.AllowHexSpecifier} are {@link System.Globalization.NumberStyles.AllowLeadingWhite} and {@link System.Globalization.NumberStyles.AllowTrailingWhite}. The {@link System.Globalization.NumberStyles} enumeration includes a composite style, {@link System.Globalization.NumberStyles.HexNumber}, that consists of these three flags. */
            static readonly AllowHexSpecifier: NumberStyles;
            /** Indicates that the numeric string can have a leading sign. Valid leading sign characters are determined by the {@link System.Globalization.NumberFormatInfo.PositiveSign} and {@link System.Globalization.NumberFormatInfo.NegativeSign} properties. */
            static readonly AllowLeadingSign: NumberStyles;
            /** Indicates that leading white-space characters can be present in the parsed string. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020. Note that this is a subset of the characters for which the {@link System.Char.IsWhiteSpace|IsWhiteSpace(c)} method returns true. */
            static readonly AllowLeadingWhite: NumberStyles;
            /** Indicates that the numeric string can have one pair of parentheses enclosing the number. The parentheses indicate that the string to be parsed represents a negative number. */
            static readonly AllowParentheses: NumberStyles;
            /** Indicates that the numeric string can have group separators, such as symbols that separate hundreds from thousands. If the {@link System.Globalization.NumberStyles} value includes the {@link System.Globalization.NumberStyles.AllowCurrencySymbol} flag and the string to be parsed includes a currency symbol, the valid group separator character is determined by the {@link System.Globalization.NumberFormatInfo.CurrencyGroupSeparator} property,  and the number of digits in each group is determined by the {@link System.Globalization.NumberFormatInfo.CurrencyGroupSizes} property. Otherwise, the valid group separator character is determined by the {@link System.Globalization.NumberFormatInfo.NumberGroupSeparator} property, and the number of digits in each group is determined by the {@link System.Globalization.NumberFormatInfo.NumberGroupSizes} property. */
            static readonly AllowThousands: NumberStyles;
            /** Indicates that the numeric string can have a trailing sign. Valid trailing sign characters are determined by the {@link System.Globalization.NumberFormatInfo.PositiveSign} and {@link System.Globalization.NumberFormatInfo.NegativeSign} properties. */
            static readonly AllowTrailingSign: NumberStyles;
            /** Indicates that trailing white-space characters can be present in the parsed string. Valid white-space characters have the Unicode values U+0009, U+000A, U+000B, U+000C, U+000D, and U+0020. Note that this is a subset of the characters for which the {@link System.Char.IsWhiteSpace|IsWhiteSpace(c)} method returns true. */
            static readonly AllowTrailingWhite: NumberStyles;
            /** Indicates that all styles except {@link System.Globalization.NumberStyles.AllowHexSpecifier} are used. This is a composite number style. */
            static readonly Any: NumberStyles;
            /** Indicates that all styles except {@link System.Globalization.NumberStyles.AllowExponent} and {@link System.Globalization.NumberStyles.AllowHexSpecifier} are used. This is a composite number style. */
            static readonly Currency: NumberStyles;
            /** Indicates that the {@link System.Globalization.NumberStyles.AllowLeadingWhite}, {@link System.Globalization.NumberStyles.AllowTrailingWhite}, {@link System.Globalization.NumberStyles.AllowLeadingSign}, {@link System.Globalization.NumberStyles.AllowDecimalPoint}, and {@link System.Globalization.NumberStyles.AllowExponent} styles are used. This is a composite number style. */
            static readonly Float: NumberStyles;
            /** Indicates that the {@link System.Globalization.NumberStyles.AllowLeadingWhite}, {@link System.Globalization.NumberStyles.AllowTrailingWhite}, and {@link System.Globalization.NumberStyles.AllowHexSpecifier} styles are used. This is a composite number style. */
            static readonly HexNumber: NumberStyles;
            /** Indicates that the {@link System.Globalization.NumberStyles.AllowLeadingWhite}, {@link System.Globalization.NumberStyles.AllowTrailingWhite}, and {@link System.Globalization.NumberStyles.AllowLeadingSign} styles are used. This is a composite number style. */
            static readonly Integer: NumberStyles;
            /** Indicates that no style elements, such as leading or trailing white space, thousands separators, or a decimal separator, can be present in the parsed string. The string to be parsed must consist of integral decimal digits only. */
            static readonly None: NumberStyles;
            /** Indicates that the {@link System.Globalization.NumberStyles.AllowLeadingWhite}, {@link System.Globalization.NumberStyles.AllowTrailingWhite}, {@link System.Globalization.NumberStyles.AllowLeadingSign}, {@link System.Globalization.NumberStyles.AllowTrailingSign}, {@link System.Globalization.NumberStyles.AllowDecimalPoint}, and {@link System.Globalization.NumberStyles.AllowThousands} styles are used. This is a composite number style. */
            static readonly Number: NumberStyles;
            private __type_2798341439: null;
        }
    }
    
    namespace IO {
        /**
         * Creates a stream whose backing store is memory.
         */
        class MemoryStream extends Stream {
            /**
             * Gets the length of the stream in bytes.
             * @returns The length of the stream in bytes.
             */
            get Length(): JsType<Int64>;
            /**
             * Initializes a new instance of the {@link System.IO.MemoryStream} class with an expandable capacity initialized to zero.
             */
            constructor();
            /**
             * Writes the stream contents to a byte array, regardless of the {@link System.IO.MemoryStream.Position} property.
             * @returns A new byte array.
             */
            ToArray(): TypedArray<JsType<Byte>>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_1884241492: null;
        }
        
        /**
         * Specifies the position in a stream to use for seeking.
         */
        class SeekOrigin extends Enum {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /** Specifies the beginning of a stream. */
            static readonly Begin: SeekOrigin;
            /** Specifies the current position within a stream. */
            static readonly Current: SeekOrigin;
            /** Specifies the end of a stream. */
            static readonly End: SeekOrigin;
            private __type_3616192619: null;
        }
        
        /**
         * Provides a generic view of a sequence of bytes. This is an abstract class.
         */
        class Stream extends Object {
            /**
             * When overridden in a derived class, gets the length in bytes of the stream.
             * @returns A long value representing the length of the stream in bytes.
             */
            get Length(): JsType<Int64>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * When overridden in a derived class, sets the position within the current stream.
             * @param offset A byte offset relative to the origin parameter.
             * @param origin A value of type {@link System.IO.SeekOrigin} indicating the reference point used to obtain the new position.
             * @returns The new position within the current stream.
             */
            Seek(offset: (JsType<Int64> | Int64), origin: (JsType<SeekOrigin> | SeekOrigin)): JsType<Int64>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_100716823: null;
        }
        
        /**
         * Implements a {@link System.IO.TextReader} that reads characters from a byte stream in a particular encoding.
         */
        class StreamReader extends TextReader {
            /**
             * Initializes a new instance of the {@link System.IO.StreamReader} class for the specified stream.
             * @param stream The stream to be read.
             */
            constructor(stream: (JsType<Stream> | Stream));
            /**
             * Initializes a new instance of the {@link System.IO.StreamReader} class for the specified stream, with the specified byte order mark detection option.
             * @param stream The stream to be read.
             * @param detectEncodingFromByteOrderMarks Indicates whether to look for byte order marks at the beginning of the file.
             */
            constructor(stream: (JsType<Stream> | Stream), detectEncodingFromByteOrderMarks: (JsType<Boolean> | Boolean));
            /**
             * Initializes a new instance of the {@link System.IO.StreamReader} class for the specified stream, with the specified character encoding.
             * @param stream The stream to be read.
             * @param encoding The character encoding to use.
             */
            constructor(stream: (JsType<Stream> | Stream), encoding: (JsType<Text.Encoding> | Text.Encoding));
            /**
             * Initializes a new instance of the {@link System.IO.StreamReader} class for the specified stream, with the specified character encoding and byte order mark detection option.
             * @param stream The stream to be read.
             * @param encoding The character encoding to use.
             * @param detectEncodingFromByteOrderMarks Indicates whether to look for byte order marks at the beginning of the file.
             */
            constructor(stream: (JsType<Stream> | Stream), encoding: (JsType<Text.Encoding> | Text.Encoding), detectEncodingFromByteOrderMarks: (JsType<Boolean> | Boolean));
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_3500589080: null;
        }
        
        /**
         * Implements a {@link System.IO.TextWriter} for writing characters to a stream in a particular encoding.
         */
        class StreamWriter extends TextWriter {
            /**
             * Initializes a new instance of the {@link System.IO.StreamWriter} class for the specified stream by using UTF-8 encoding and the default buffer size.
             * @param stream The stream to write to.
             */
            constructor(stream: (JsType<Stream> | Stream));
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_703860652: null;
        }
        
        /**
         * Represents a reader that can read a sequential series of characters.
         */
        class TextReader extends Object {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Reads a line of characters from the text reader and returns the data as a string.
             * @returns The next line from the reader, or null if all characters have been read.
             */
            ReadLine(): JsType<String>;
            /**
             * Reads all characters from the current position to the end of the text reader and returns them as one string.
             * @returns A string that contains all characters from the current position to the end of the text reader.
             */
            ReadToEnd(): JsType<String>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_2702075771: null;
        }
        
        /**
         * Represents a writer that can write a sequential series of characters. This class is abstract.
         */
        class TextWriter extends Object {
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
             */
            Flush(): void;
            /**
             * Writes a character array to the text string or stream.
             * @param buffer The character array to write to the text stream.
             */
            Write(buffer: (TypedArray<JsType<Char>> | TypedArray<Char>)): void;
            /**
             * Writes a string to the text string or stream.
             * @param value The string to write.
             */
            Write(value: (JsType<String> | String)): void;
            /**
             * Writes the text representation of an object to the text string or stream by calling the ToString method on that object.
             * @param value The object to write.
             */
            Write(value: any): void;
            /**
             * Writes the text representation of a decimal value to the text string or stream.
             * @param value The decimal value to write.
             */
            Write(value: (JsType<Decimal> | Decimal)): void;
            /**
             * Writes the text representation of an 8-byte floating-point value to the text string or stream.
             * @param value The 8-byte floating-point value to write.
             */
            Write(value: (JsType<Double> | Double)): void;
            /**
             * Writes the text representation of a 4-byte floating-point value to the text string or stream.
             * @param value The 4-byte floating-point value to write.
             */
            Write(value: (JsType<Single> | Single)): void;
            /**
             * Writes the text representation of an 8-byte unsigned integer to the text string or stream.
             * @param value The 8-byte unsigned integer to write.
             */
            Write(value: (JsType<UInt64> | UInt64)): void;
            /**
             * Writes the text representation of a Boolean value to the text string or stream.
             * @param value The Boolean value to write.
             */
            Write(value: (JsType<Boolean> | Boolean)): void;
            /**
             * Writes the text representation of a 4-byte unsigned integer to the text string or stream.
             * @param value The 4-byte unsigned integer to write.
             */
            Write(value: (JsType<UInt32> | UInt32)): void;
            /**
             * Writes the text representation of a 4-byte signed integer to the text string or stream.
             * @param value The 4-byte signed integer to write.
             */
            Write(value: (JsType<Int32> | Int32)): void;
            /**
             * Writes a character to the text string or stream.
             * @param value The character to write to the text stream.
             */
            Write(value: (JsType<Char> | Char)): void;
            /**
             * Writes the text representation of an 8-byte signed integer to the text string or stream.
             * @param value The 8-byte signed integer to write.
             */
            Write(value: (JsType<Int64> | Int64)): void;
            /**
             * Writes an array of characters followed by a line terminator to the text string or stream.
             * @param buffer The character array from which data is read.
             */
            WriteLine(buffer: (TypedArray<JsType<Char>> | TypedArray<Char>)): void;
            /**
             * Writes a string followed by a line terminator to the text string or stream.
             * @param value The string to write. If value is null, only the line terminator is written.
             */
            WriteLine(value: (JsType<String> | String)): void;
            /**
             * Writes the text representation of a decimal value followed by a line terminator to the text string or stream.
             * @param value The decimal value to write.
             */
            WriteLine(value: (JsType<Decimal> | Decimal)): void;
            /**
             * Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.
             * @param value The 8-byte floating-point value to write.
             */
            WriteLine(value: (JsType<Double> | Double)): void;
            /**
             * Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.
             * @param value The 4-byte floating-point value to write.
             */
            WriteLine(value: (JsType<Single> | Single)): void;
            /**
             * Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.
             * @param value The 8-byte unsigned integer to write.
             */
            WriteLine(value: (JsType<UInt64> | UInt64)): void;
            /**
             * Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.
             * @param value The 4-byte signed integer to write.
             */
            WriteLine(value: (JsType<Int32> | Int32)): void;
            /**
             * Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.
             * @param value The 4-byte unsigned integer to write.
             */
            WriteLine(value: (JsType<UInt32> | UInt32)): void;
            /**
             * Writes the text representation of a Boolean value followed by a line terminator to the text string or stream.
             * @param value The Boolean value to write.
             */
            WriteLine(value: (JsType<Boolean> | Boolean)): void;
            /**
             * Writes a character followed by a line terminator to the text string or stream.
             * @param value The character to write to the text stream.
             */
            WriteLine(value: (JsType<Char> | Char)): void;
            /**
             * Writes the text representation of an object by calling the ToString method on that object, followed by a line terminator to the text string or stream.
             * @param value The object to write. If value is null, only the line terminator is written.
             */
            WriteLine(value: any): void;
            /**
             * Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.
             * @param value The 8-byte signed integer to write.
             */
            WriteLine(value: (JsType<Int64> | Int64)): void;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_872497657: null;
        }
    }
    
    namespace Text {
        /**
         * Represents a character encoding.
         */
        class Encoding extends Object {
            /**
             * Gets an encoding for the ASCII (7-bit) character set.
             * @returns An  encoding for the ASCII (7-bit) character set.
             */
            static get ASCII(): JsType<Encoding>;
            /**
             * Gets an encoding for the UTF-16 format that uses the big endian byte order.
             * @returns An encoding object for the UTF-16 format that uses the big endian byte order.
             */
            static get BigEndianUnicode(): JsType<Encoding>;
            /**
             * Gets an encoding for the UTF-32 format using the little endian byte order.
             * @returns An  encoding object for the UTF-32 format using the little endian byte order.
             */
            static get UTF32(): JsType<Encoding>;
            /**
             * Gets an encoding for the UTF-8 format.
             * @returns An encoding for the UTF-8 format.
             */
            static get UTF8(): JsType<Encoding>;
            /**
             * @ignore
             * @deprecated Do not use, constructor exists for type safety only and will throw at runtime.
             */
            constructor();
            /**
             * When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.
             * @param bytes The byte array containing the sequence of bytes to decode.
             * @param index The index of the first byte to decode.
             * @param count The number of bytes to decode.
             * @returns A string that contains the results of decoding the specified sequence of bytes.
             */
            GetString(bytes: (TypedArray<JsType<Byte>> | TypedArray<Byte>), index: (JsType<Int32> | Int32), count: (JsType<Int32> | Int32)): JsType<String>;
            /**
             * @ignore
             * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
             */
            _interfaces: {
            };
            private __type_381284155: null;
        }
    }
}

/**
 * @ignore
 * @@Helper class with property accessors to express interface types when casting.
 */
declare abstract class System {
    /** @@Type reference for casting to {{@link System.IServiceProvider}. */
    static get IServiceProvider(): TypeRef<System.IServiceProvider>;
}


/**
 * Base class for all hosted .NET classes.
 **/
declare abstract class NetClass {
    /**
     * @ignore
     * @deprecated For internal use only 
     */
    _class: never;

    /**
     * Casts this object to the specified type. Throws error on failure.
     * @param type The type to cast to.
     * @typeParam T1 The target type of the cast.
     * @typeParam T2 The type of the object to cast.
     */
    Cast<T1 extends T2, T2>(this: T2, type: TypeRef<T1>): T1;

    /**
     * Casts this object to the specified type. Returns null on failure.
     * @param type The type to cast to.
     * @typeParam T1 The target type of the cast.
     * @typeParam T2 The type of the object to cast.
     */
    TryCast<T1 extends T2, T2>(this: T2, type: TypeRef<T1>): T1 | null;
}


/**
 * Base interface for all .NET interfaces.
 */
interface IInterfaceBase {
    /** 
     * @ignore
     * @deprecated For internal use only
     */
    _interfaces: { [fullname: string]: unknown }

    /**
     * Casts this object to the specified type. Throws error on failure.
     * @param type The type to cast to.
     * @typeParam T1 The target type of the cast.
     * @typeParam T2 The type of the object to cast.
     */
    Cast<T1 extends T2, T2>(this: T2, type: TypeRef<T1>): T1;

    /**
     * Casts this object to the specified type. Returns null on failure.
     * @param type The type to cast to.
     * @typeParam T1 The target type of the cast.
     * @typeParam T2 The type of the object to cast.
     */
    TryCast<T1 extends T2, T2>(this: T2, type: TypeRef<T1>): T1 | null;
}

/**
 * This type signals that the interface is explicitly implemented.
 * The methods of this interface are therefore not available via a class instance without first casting it to the appropriate interface via {@link NetClass.Cast} or {@link NetClass.TryCast}.
 * When an explictily implemented interface appears as argument, a cast is not required.
 * @typeParam T The interface which may be explicitly implemented.
 */
type Explicit<T> = T extends NetClass ? never : T extends IInterfaceBase ? Pick<T, "_interfaces"> : never;

/**
 * @ignore
 * Type used to tag an interface implementation.
 */
type Implementation<T extends IInterfaceBase> = Omit<T, "_interfaces">;

/**
 * Type helper for parameters of managed functions which accecpt interfaces which may be
 * explicitly implemented.
 */
type OrExplicit<T> = T | Explicit<T>;

/** Static methods for handling .NET out parameters. */
declare abstract class OutParam<T> {
    /** Used internally by the framework for type safety, and the value will always be undefined */
    private __type_out?: T;

    /** Creates an instance wrapping a OutParam<T> */
    static create<T>(type: TypeRef<T>): JsType<T> & {
        /** The typed OutParam instance */
        out: OutParam<T>;

        /** The value for the ref parameter. */
        value: JsType<T>;
    };
}

/** Static methods for handling .NET ref parameters. */
declare abstract class RefParam<T> {
    /** Used internally by the framework for type safety, and the value will always be undefined */
    private __type_ref?: T;

    /** Creates an instance wrapping a RefParam<T> */
    static create<T>(type: TypeRef<T>): T & {
        /** The typed RefParam instance */
        ref: RefParam<T>;

        /** The value for the ref parameter. */
        value: T;
    };
}

/** 
 * A strongly typed C# array.
 * @typeParam T The type of the array.
 */
declare abstract class TypedArray<T> implements
    Iterable<JsType<T>>,
    Explicit<System.Collections.IEnumerable>,
    Explicit<System.Collections.Generic.IEnumerable<T>>,
    Explicit<System.Collections.ICollection>,
    Explicit<System.Collections.Generic.ICollection<T>>,
    Explicit<System.Collections.IList>,
    Explicit<System.Collections.Generic.IList<T>> {
    /**
     * @ignore
     * @deprecated Do not use, exists for type safety only and will be undefined at runtime.
     */
    _interfaces: {
        System_Collections_IEnumerable: Implementation<System.Collections.IEnumerable>,
        System_Collections_Generic_IEnumerable: Implementation<System.Collections.Generic.IEnumerable<T>>,
        System_Collections_ICollection: Implementation<System.Collections.ICollection>,
        System_Collections_Generic_ICollection: Implementation<System.Collections.Generic.ICollection<T>>,
        System_Collections_IList: Implementation<System.Collections.IList>,
        System_Collections_Generic_IList: Implementation<System.Collections.Generic.IList<T>>,
    }
    [Symbol.iterator](): Iterator<JsType<T>>;

    /**
     * Creates a strongly typed array.
     * @param type The type of the array.
     * @param items The items which the array should contain.
     * @typeParam T The type of the array.
     */
    static create<T>(type: TypeRef<T>, items: TypedArrayCreateParam<T>): TypedArray<T>;
}

type TypedArrayCreateParam<T> =
    T extends System.UInt16 ? Uint16Array :
    T extends System.UInt32 ? Uint32Array :
    T extends System.UInt64 ? BigUint64Array :
    T extends System.Int16 ? Int16Array :
    T extends System.Int32 ? Int32Array :
    T extends System.Int64 ? BigInt64Array :
    T extends System.Single ? Float32Array :
    T extends System.Double ? Float64Array :
    (JsType<T> | T)[];

/**
 * Registers the entry point in the global scope so it can be reached by Spotfire.
 * @param f The entry point function.
 */
declare function RegisterEntryPoint(f: Function): void;

declare const console: {
    /**
     * Logs the objects to the script output window and the progress dialog.
     * @param objs The objects to log.
     */
    log(...objs: any[]): void;
}

/** Maps the .NET type to the equivalent JS type. */
type JsType<Tdotnet> =
    Tdotnet extends (System.Int16 | System.Int32 | System.Int64) ? number :
    Tdotnet extends (System.UInt16 | System.UInt32 | System.UInt64) ? number :
    Tdotnet extends (System.Single | System.Double | System.Decimal) ? number :
    Tdotnet extends (System.Byte | System.Char) ? number :
    Tdotnet extends System.Boolean ? boolean :
    Tdotnet extends System.String ? string :
    Tdotnet extends Spotfire.Object ? Tdotnet :
    System.Object extends Tdotnet ? unknown :
    Tdotnet;

/** Maps the JS type to the equivalent .NET type. */
type CsType<Tjs> =
    Tjs extends number ? (System.Int16 | System.Int32 | System.Int64 | System.UInt16 | System.UInt32 | System.UInt64 | System.Decimal | System.Single | System.Double | System.Byte | System.Char) :
    Tjs extends boolean ? System.Boolean :
    Tjs extends string ? System.String :
    Tjs;

declare namespace Spotfire {
    /**
     * @deprecated For internal use only. This type is used only for the TypeScript type system and has no implementation.
    */
    class Object extends System.Object {
        private __type_spotfire_object: null
    }
}
declare namespace System {

    class Action {
        private __type_action: null;

        /**
         * Construct an action.
         *  @param callback The callback function.
         **/
        constructor(callback: () => void);
    }

    /**
     * A delegate which determines whether the object meets a set of criteria.
     */
    class Predicate<T = undefined> {
        private __type_predicate: T;

        /**
         * Constructor for predicates.
         *  @param argType The type of objects to compare.
         *  @param callback A callback function which determines if the object meets the criteria.
         **/
        constructor(argType: TypeRef<CsType<T>>, callback: (obj : T) => System.Boolean | JsType<System.Boolean>);
    }

    /**
     * A delegate which determines the order of two objects.
     */
    class Comparison<T = undefined> {
        private __type_comparison: T;

        /**
         * Constructor for comparisons.
         * @param argType The type of objects to compare.
         * @param callback A callback function which determines the order of two objects. This
         * function must return a number which fits in a 32-bit unsigned integer.
         */
        constructor(argType: TypeRef<CsType<T>>, callback: (o1: T, o2: T) => System.Int32 | JsType<System.Int32>);
    }

    namespace Collections.Generic {
        interface IEnumerator<T> {
            FromEnumerator(): Iterable<T>;
        }
    }
}

/** A generically typed class reference, used when the backend API requires a generic type parameter.  */
type ClassRef<T> = {
    new(...args: any[]): T;
}
type TypeRef<T> = ClassRef<T>;
type TypeRefParam<T> = ClassRef<T>;

/**
 * Getter of an indexed property.
 * @typeParam TKey The type of the property key.
 * @typeParam TValue The type of the property value.
 */
interface PropertyGet<TKey, TValue> {
    /** 
     * Gets an indexed property.
     * @param key The key of the property.
     */
    get(key: JsType<TKey> | TKey): JsType<TValue> | null
}

/**
 * Setter of an indexed property.
 * @typeParam TKey The type of the property key.
 * @typeParam TValue The type of the property value.
 */
interface PropertySet<TKey, TValue> {
    /** 
     * Sets an indexed property.
     * @param key The key of the property.
     * @param value The value of the property.
     */
    set(key: JsType<TKey> | TKey, value: JsType<TValue> | TKey): void
}

/**
 * Type aliases for entry point parameter types declared by the manifest.
 * @ignore
 **/
type Integer = number;
/** @ignore */
type LongInteger = BigInt;
/** @ignore */
type SingleReal = number;
/** @ignore */
type Real = number;
/** @ignore */
type Currency = number;
/** @ignore */
type DateTime = System.DateTime;
/** @ignore */
type Time = System.DateTime;
/** @ignore */
type TimeSpan = System.TimeSpan;

/** @ignore */
type Page = Spotfire.Dxp.Application.Page;
/** @ignore */
type Visualization = Spotfire.Dxp.Application.Visual;
/** @ignore */
type DataTable = Spotfire.Dxp.Data.DataTable;